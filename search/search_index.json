{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"GlassAlpha","text":"<p>What is GlassAlpha?</p> <p>GlassAlpha delivers deterministic, regulator-ready PDF audit reports for tabular ML models. An open-source toolkit for teams who need reproducible, audit-ready model documentation.</p>"},{"location":"#the-goal-one-command-audit-generation","title":"The Goal: One Command Audit Generation","text":"<p>Our target is simple, powerful audit generation:</p> <p>CLI Interface</p> <p><pre><code># Generate audit PDF\nglassalpha audit --config configs/german_credit_simple.yaml --output my_audit.pdf\n\n# Produces byte-identical PDF audits with complete lineage tracking\n</code></pre> Capability: Generate deterministic audit PDFs for XGBoost, LightGBM, and Logistic Regression models.</p>"},{"location":"#why-were-building-glassalpha","title":"Why We're Building GlassAlpha","text":""},{"location":"#designed-for-regulatory-compliance","title":"Designed for Regulatory Compliance","text":"<ul> <li>Deterministic outputs - Identical PDFs on same seed/data/model</li> <li>Complete lineage - Git SHA, config hash, data hash, seeds recorded</li> <li>Professional formatting - Publication-quality reports with visualizations</li> </ul>"},{"location":"#on-premise-first-design","title":"On-Premise First Design","text":"<ul> <li>No external dependencies - Runs completely offline</li> <li>File-based approach - No databases or complex infrastructure needed</li> <li>Full reproducibility - Immutable run manifests for audit trails</li> </ul>"},{"location":"#simplicity-as-a-core-principle","title":"Simplicity as a Core Principle","text":"<ul> <li>Single command - <code>glassalpha audit</code> handles everything</li> <li>YAML configuration - Policy-as-code for compliance requirements</li> <li>Fast execution - Under 3 seconds from model to PDF</li> </ul>"},{"location":"#supported-models","title":"Supported Models","text":"Model Type Status Notes XGBoost Production TreeSHAP integration optimized LightGBM Production Native integration available Logistic Regression Production Full scikit-learn compatibility <p>Additional model types available through extension framework</p>"},{"location":"#audit-report-contents","title":"Audit Report Contents","text":"<p>Audit reports include:</p> <ol> <li>Model Performance Metrics</li> <li>Accuracy, precision, recall, F1, AUC-ROC</li> <li>Confusion matrices and performance curves</li> <li> <p>Cross-validation results</p> </li> <li> <p>TreeSHAP Explanations</p> </li> <li>Feature importance rankings</li> <li>Individual prediction explanations</li> <li> <p>Waterfall plots for key decisions</p> </li> <li> <p>Basic Fairness Analysis</p> </li> <li>Protected attribute analysis</li> <li>Disparate impact calculations</li> <li> <p>Group parity metrics</p> </li> <li> <p>Reproducibility Manifest</p> </li> <li>Complete configuration hash</li> <li>Dataset fingerprint</li> <li>Git commit SHA and timestamp</li> <li>All random seeds used</li> </ol>"},{"location":"#installation","title":"Installation","text":"<pre><code># Clone the repository\ngit clone https://github.com/GlassAlpha/glassalpha\ncd glassalpha/packages\n\n# Install\npip install -e .\n\n# Verify installation\nglassalpha --help\n\n# Generate your first audit\nglassalpha audit --config configs/german_credit_simple.yaml --output audit.pdf\n</code></pre>"},{"location":"#contributing","title":"Contributing","text":"<p>We welcome contributions to enhance GlassAlpha's capabilities:</p>"},{"location":"#enhancement-areas","title":"Enhancement Areas","text":"<ol> <li>Additional Models - Neural networks, time series, custom integrations</li> <li>Advanced Explanations - Counterfactuals, gradient methods, interactive visuals</li> <li>Extended Compliance - Additional frameworks, custom templates, industry metrics</li> <li>Performance - Large dataset optimization, parallel processing</li> <li>Documentation - Examples, tutorials, best practices</li> </ol>"},{"location":"#example-configuration-format","title":"Example: Configuration Format","text":"<pre><code># Working configuration structure\naudit_profile: german_credit_default\n\ndata:\n  path: data/german_credit_processed.csv\n  target_column: credit_risk\n  protected_attributes:\n    - gender\n    - age_group\n    - foreign_worker\n\nmodel:\n  type: xgboost\n  params:\n    objective: binary:logistic\n    n_estimators: 100\n    max_depth: 5\n\nexplainers:\n  strategy: first_compatible\n  priority:\n    - treeshap\n    - kernelshap\n\nmetrics:\n  performance:\n    metrics:\n      - accuracy\n      - precision\n      - recall\n      - f1\n      - auc_roc\n  fairness:\n    metrics:\n      - demographic_parity\n      - equal_opportunity\n\nreproducibility:\n  random_seed: 42\n</code></pre> <p>This configuration format supports deterministic, reproducible audits.</p>"},{"location":"#use-cases","title":"Use Cases","text":"<ul> <li>Working Examples - Step-by-step tutorials for different use cases</li> <li>Healthcare Bias Detection - Medical AI compliance example</li> <li>Configuration Comparison - Choosing the right audit approach</li> </ul> <p>Comprehensive examples with real datasets and regulatory interpretations</p>"},{"location":"#documentation","title":"Documentation","text":"<ul> <li>Quick Start Guide - Installation and first audit</li> <li>Configuration Guide - YAML configuration reference</li> <li>Regulatory Compliance - Compliance frameworks</li> <li>Contributing Guidelines - Enhancement opportunities</li> </ul>"},{"location":"#license-support","title":"License &amp; Support","text":"<ul> <li>License &amp; Guidelines: Apache 2.0 - See LICENSE and Trademark Guidelines</li> <li>Issues: GitHub Issues</li> <li>Discussions: GitHub Discussions</li> </ul> <p>Built for teams who need reproducible, regulator-ready ML audit reports.</p>"},{"location":"about/","title":"About GlassAlpha","text":"<p>GlassAlpha is built as an extensible framework for AI compliance and interpretability, starting with tabular ML models in Phase 1 and designed to expand to LLMs and multimodal systems.</p>"},{"location":"about/#why-glassalpha","title":"Why GlassAlpha?","text":""},{"location":"about/#the-problem","title":"The Problem","text":"<p>As AI regulations tighten globally (EU AI Act, CFPB guidance, state-level bills), regulated industries are most exposed. Finance, insurance, healthcare, and defense increasingly rely on ML models for high-stakes decisions: loan approvals, fraud detection, underwriting, patient triage, targeting systems, etc.</p> <p>These organizations need transparent, auditable ML systems. But most ML models are black boxes, and existing audit tools are either:</p> <ul> <li>Academic research code (not production-ready)</li> <li>Enterprise SaaS platforms (vendor lock-in, data privacy concerns)</li> <li>Custom internal tools (inconsistent, non-reproducible)</li> </ul>"},{"location":"about/#the-solution","title":"The Solution","text":"<p>GlassAlpha provides deterministic, regulator-ready audit reports with complete lineage tracking. Run the same config twice, get byte-identical PDFs. Every decision is explainable, every metric is reproducible, every audit trail is complete.</p>"},{"location":"about/#who-this-helps","title":"Who This Helps","text":"<ul> <li>Data Scientists: Generate compliance documentation without manual report writing</li> <li>Legal/Compliance Teams: Get standardized, defensible audit reports for regulatory review</li> <li>Risk Managers: Monitor model fairness and drift with quantitative metrics</li> <li>Auditors: Verify model behavior with reproducible, transparent analysis</li> </ul>"},{"location":"about/#why-open-source","title":"Why Open Source","text":"<p>Compliance tools require trust. Open source code means regulators, auditors, and your team can verify exactly how conclusions were reached. No proprietary black boxes auditing your black boxes.</p>"},{"location":"about/#technical-foundation","title":"Technical Foundation","text":"<p>GlassAlpha is built on a plugin architecture designed for extensibility and regulatory compliance. For detailed technical information, see the Architecture Guide.</p>"},{"location":"about/#getting-started","title":"Getting Started","text":"<p>Ready to try GlassAlpha? Start with the Quick Start Guide or try the 5-minute tutorial to generate your first audit.</p>"},{"location":"architecture/","title":"Architecture Overview","text":"<p>GlassAlpha is designed as an extensible framework for ML model auditing, built with regulatory compliance and professional use in mind. This guide explains the system architecture, design decisions, and how components work together.</p>"},{"location":"architecture/#design-philosophy","title":"Design Philosophy","text":""},{"location":"architecture/#audit-first-approach","title":"Audit-First Approach","text":"<p>GlassAlpha prioritizes regulatory compliance and audit quality over cutting-edge features:</p> <ul> <li>Deterministic behavior - Same input always produces identical output</li> <li>Complete audit trails - Every decision is tracked and reproducible</li> <li>Professional quality - Reports suitable for regulatory submission</li> <li>Transparency - Open source code that can be verified and trusted</li> </ul>"},{"location":"architecture/#plugin-architecture","title":"Plugin Architecture","text":"<p>All major components use dynamic registration and interface-based design:</p> <ul> <li>Models, explainers, and metrics are plugins that register themselves</li> <li>Configuration drives selection - specify preferences, system picks best match</li> <li>Easy extensibility - add new implementations without changing core code</li> <li>Enterprise separation - clear boundaries between OSS and commercial features</li> </ul>"},{"location":"architecture/#system-architecture","title":"System Architecture","text":""},{"location":"architecture/#high-level-component-flow","title":"High-Level Component Flow","text":"<pre><code>User Configuration (YAML)\n          \u2193\n    Config Loading &amp; Validation\n          \u2193\n    Component Selection (Registries)\n          \u2193\n    Data Loading &amp; Processing\n          \u2193\n    Model Training/Loading\n          \u2193\n    Explanation Generation\n          \u2193\n    Metrics Computation\n          \u2193\n    Report Generation (HTML \u2192 PDF)\n          \u2193\n    Audit Manifest Creation\n</code></pre>"},{"location":"architecture/#core-components","title":"Core Components","text":""},{"location":"architecture/#1-configuration-system","title":"1. Configuration System","text":"<p>Purpose: Declarative, reproducible audit specification</p> <p>Key Files: - <code>config/schema.py</code> - Pydantic models for validation - <code>config/loader.py</code> - YAML loading and environment handling - <code>config/strict.py</code> - Regulatory compliance validation</p> <p>Design Features: - YAML-based - Human-readable and version-controllable - Strict mode - Enforces regulatory requirements (explicit seeds, no defaults) - Validation - Comprehensive error checking before execution - Overrides - Environment-specific configuration management</p> <p>Example Flow: <pre><code># User specifies high-level intent\naudit_profile: tabular_compliance\nmodel:\n  type: xgboost\nexplainers:\n  priority: [treeshap, kernelshap]\n</code></pre> \u2192 System validates, fills defaults, ensures determinism</p>"},{"location":"architecture/#2-registry-system","title":"2. Registry System","text":"<p>Purpose: Dynamic component discovery and selection</p> <p>Key Files: - <code>core/registry.py</code> - Registration and selection logic - <code>core/interfaces.py</code> - Protocol definitions</p> <p>How It Works: <pre><code># Components register themselves\n@ModelRegistry.register(\"xgboost\")\nclass XGBoostWrapper:\n    capabilities = {\"supports_shap\": True}\n\n# System selects based on config + capabilities\nmodel_cls = ModelRegistry.select(\"xgboost\")\nexplainer_cls = ExplainerRegistry.select_compatible(model, [\"treeshap\"])\n</code></pre></p> <p>Benefits: - Deterministic selection - Same config = same components - Capability matching - Explainers only run on compatible models - Enterprise gating - Features locked behind license checks - Extensibility - Add new types without changing core</p>"},{"location":"architecture/#3-data-pipeline","title":"3. Data Pipeline","text":"<p>Purpose: Load, validate, and prepare data for analysis</p> <p>Key Files: - <code>data/tabular.py</code> - CSV/Parquet loading with pandas - <code>data/german_credit.py</code> - Example dataset with preprocessing</p> <p>Processing Steps: 1. Format Detection - Auto-detect CSV, Parquet, Feather 2. Schema Validation - Ensure required columns exist 3. Type Conversion - Handle categorical/numeric features 4. Protected Attributes - Extract demographic data for fairness analysis 5. Train/Test Split - Deterministic splitting with fixed seeds 6. Data Hashing - Integrity verification for audit trail</p>"},{"location":"architecture/#4-model-integration","title":"4. Model Integration","text":"<p>Purpose: Unified interface to different ML libraries</p> <p>Key Files: - <code>models/tabular/xgboost.py</code> - XGBoost wrapper - <code>models/tabular/lightgbm.py</code> - LightGBM wrapper - <code>models/tabular/sklearn.py</code> - Scikit-learn wrapper</p> <p>Interface Design: <pre><code>class ModelInterface(Protocol):\n    capabilities: dict[str, Any]\n\n    def predict(self, X: pd.DataFrame) -&gt; np.ndarray\n    def predict_proba(self, X: pd.DataFrame) -&gt; np.ndarray\n    def get_model_type(self) -&gt; str\n</code></pre></p> <p>Key Features: - Capability declaration - Models specify what explainers they support - Consistent interface - Same API regardless of underlying library - Flexible loading - Support pre-trained models or train from scratch - Error handling - Graceful degradation when libraries unavailable</p>"},{"location":"architecture/#5-explanation-system","title":"5. Explanation System","text":"<p>Purpose: Generate interpretable explanations for model decisions</p> <p>Key Files: - <code>explain/shap/tree.py</code> - TreeSHAP for tree-based models - <code>explain/shap/kernel.py</code> - KernelSHAP for any model type</p> <p>Selection Logic: <pre><code># Configuration specifies preferences\nexplainers:\n  priority: [treeshap, kernelshap]\n\n# System finds first compatible explainer\nfor explainer_name in priority:\n    if explainer.supports_model(model):\n        selected = explainer\n        break\n</code></pre></p> <p>Design Features: - Priority-based selection - Deterministic fallback chain - Capability checking - Only run explainers that work with the model - Configurable sampling - Balance accuracy vs speed - Reproducible results - Fixed seeds for consistent outputs</p>"},{"location":"architecture/#6-metrics-system","title":"6. Metrics System","text":"<p>Purpose: Comprehensive model evaluation across multiple dimensions</p> <p>Categories: - Performance (6 metrics): Accuracy, Precision, Recall, F1, AUC-ROC, Classification Report - Fairness (4 metrics): Demographic Parity, Equal Opportunity, Equalized Odds, Predictive Parity - Drift (5 metrics): PSI, KL Divergence, KS Test, JS Divergence, Prediction Drift</p> <p>Design Features: - Category-based organization - Group related metrics - Conditional computation - Only run relevant metrics (e.g., fairness needs protected attributes) - Statistical rigor - Confidence intervals and significance tests - Flexible requirements - Some metrics need probabilities, others just predictions</p>"},{"location":"architecture/#7-report-generation","title":"7. Report Generation","text":"<p>Purpose: Professional PDF reports with visualizations</p> <p>Key Files: - <code>report/renderer.py</code> - HTML to PDF conversion - <code>report/plots.py</code> - Matplotlib/Seaborn visualizations</p> <p>Pipeline: 1. Template Selection - Choose HTML template based on audit profile 2. Data Preparation - Organize results for template rendering 3. Plot Generation - Create deterministic visualizations with fixed seeds 4. HTML Rendering - Jinja2 templating with embedded CSS 5. PDF Conversion - WeasyPrint for publication-quality output 6. Metadata Addition - PDF properties and audit trail information</p>"},{"location":"architecture/#audit-profiles","title":"Audit Profiles","text":"<p>Purpose: Pre-configured component sets for different use cases</p> <p>Current Profiles: - <code>tabular_compliance</code> - Standard audit for tabular models - <code>german_credit_default</code> - Optimized for German Credit dataset</p> <p>Profile Structure: <pre><code>class TabularComplianceProfile:\n    compatible_models = [\"xgboost\", \"lightgbm\", \"logistic_regression\"]\n    required_metrics = [\"accuracy\", \"demographic_parity\"]\n    default_explainers = [\"treeshap\", \"kernelshap\"]\n    report_template = \"standard_audit.html\"\n</code></pre></p> <p>Benefits: - Validated combinations - Ensures compatible components - Simplified configuration - Users specify profile, not individual components - Regulatory alignment - Profiles match compliance requirements - Quality assurance - Pre-tested component combinations</p>"},{"location":"architecture/#design-patterns","title":"Design Patterns","text":""},{"location":"architecture/#1-protocol-based-interfaces","title":"1. Protocol-Based Interfaces","text":"<p>Instead of inheritance, GlassAlpha uses Python's <code>typing.Protocol</code>:</p> <pre><code>@runtime_checkable\nclass ModelInterface(Protocol):\n    capabilities: dict[str, Any]\n\n    def predict(self, X: pd.DataFrame) -&gt; np.ndarray: ...\n</code></pre> <p>Advantages: - Duck typing - Focus on behavior, not inheritance - Flexibility - Easy to wrap existing libraries - Testing - Can create mock implementations easily - Type safety - mypy can verify protocol compliance</p>"},{"location":"architecture/#2-capability-based-selection","title":"2. Capability-Based Selection","text":"<p>Components declare what they can do, system matches capabilities to needs:</p> <pre><code>class TreeSHAPExplainer:\n    capabilities = {\n        \"model_types\": [\"xgboost\", \"lightgbm\"],\n        \"explanation_type\": \"feature_attribution\",\n        \"supports_interactions\": True\n    }\n\n    def supports_model(self, model):\n        return model.get_model_type() in self.capabilities[\"model_types\"]\n</code></pre>"},{"location":"architecture/#3-registry-pattern","title":"3. Registry Pattern","text":"<p>Central registration system for dynamic component discovery:</p> <pre><code>class ExplainerRegistry:\n    _registry = {}\n\n    @classmethod\n    def register(cls, name, priority=50):\n        def decorator(explainer_class):\n            cls._registry[name] = {\n                \"class\": explainer_class,\n                \"priority\": priority\n            }\n            return explainer_class\n        return decorator\n</code></pre>"},{"location":"architecture/#4-deterministic-operations","title":"4. Deterministic Operations","text":"<p>Every source of randomness is controlled and seeded:</p> <pre><code># Central seed management\nset_global_seed(42)\n\n# Component-specific seeds\nwith with_component_seed(\"explainer\"):\n    shap_values = explainer.explain(model, X)\n</code></pre>"},{"location":"architecture/#5-audit-trail-generation","title":"5. Audit Trail Generation","text":"<p>Complete provenance tracking for regulatory compliance:</p> <pre><code>class ManifestGenerator:\n    def generate(self):\n        return {\n            \"config_hash\": hash_config(config),\n            \"data_hash\": hash_dataframe(data),\n            \"git_sha\": get_git_commit(),\n            \"selected_components\": self.components,\n            \"seeds\": self.seeds,\n            \"timestamp\": datetime.utcnow()\n        }\n</code></pre>"},{"location":"architecture/#enterprise-architecture","title":"Enterprise Architecture","text":""},{"location":"architecture/#feature-separation","title":"Feature Separation","text":"<p>GlassAlpha maintains clear boundaries between OSS and Enterprise features:</p> <p>Current Approach (Feature Flags): <pre><code>@check_feature(\"advanced_explainers\")\ndef deep_shap_explain():\n    if not is_enterprise():\n        raise FeatureNotAvailable()\n    # Enterprise implementation\n</code></pre></p> <p>Potential Future Approach (Package Separation): <pre><code># glassalpha (OSS) - Core functionality only\n# glassalpha-enterprise - Advanced features in separate package\n</code></pre></p>"},{"location":"architecture/#extension-points","title":"Extension Points","text":"<p>The architecture provides multiple extension points:</p> <ol> <li>Custom Models - Implement <code>ModelInterface</code></li> <li>Custom Explainers - Implement <code>ExplainerInterface</code></li> <li>Custom Metrics - Implement <code>MetricInterface</code></li> <li>Custom Reports - Add new Jinja2 templates</li> <li>Custom Profiles - Define component combinations</li> </ol>"},{"location":"architecture/#performance-considerations","title":"Performance Considerations","text":""},{"location":"architecture/#scalability-design","title":"Scalability Design","text":"<ul> <li>Streaming-friendly - Process data in chunks when needed</li> <li>Memory efficient - Release resources between pipeline stages</li> <li>Parallel processing - Use <code>n_jobs</code> parameter for CPU-bound operations</li> <li>Caching - Reuse expensive computations within single audit</li> </ul>"},{"location":"architecture/#optimization-strategies","title":"Optimization Strategies","text":"<ul> <li>TreeSHAP over KernelSHAP - Use exact methods when available</li> <li>Sample size tuning - Balance accuracy vs speed in explanations</li> <li>Vectorized operations - Leverage pandas/numpy optimizations</li> <li>Deterministic shortcuts - Skip redundant computations with same seeds</li> </ul>"},{"location":"architecture/#security-and-privacy","title":"Security and Privacy","text":""},{"location":"architecture/#data-handling","title":"Data Handling","text":"<ul> <li>Local processing only - No external API calls</li> <li>File-based storage - No persistent databases required</li> <li>Memory cleanup - Sensitive data cleared after use</li> <li>Audit logging - Track data access without storing content</li> </ul>"},{"location":"architecture/#enterprise-security","title":"Enterprise Security","text":"<ul> <li>License validation - Environment variable or server-based</li> <li>Feature gating - Graceful degradation without enterprise features</li> <li>Access controls - Role-based component access (enterprise)</li> <li>Audit trails - User activity tracking (enterprise)</li> </ul>"},{"location":"architecture/#quality-assurance","title":"Quality Assurance","text":""},{"location":"architecture/#testing-strategy","title":"Testing Strategy","text":"<ul> <li>Unit tests - Each component tested independently</li> <li>Integration tests - Full pipeline validation</li> <li>Determinism tests - Verify reproducible outputs</li> <li>Enterprise tests - Feature gating and license validation</li> </ul>"},{"location":"architecture/#validation-approaches","title":"Validation Approaches","text":"<ul> <li>Schema validation - Pydantic models catch configuration errors</li> <li>Component compatibility - Registry validates model/explainer combinations</li> <li>Data integrity - Hash verification detects changes</li> <li>Output verification - PDF byte-level comparison for reproducibility</li> </ul>"},{"location":"architecture/#potential-future-architecture-considerations","title":"Potential Future Architecture Considerations","text":""},{"location":"architecture/#extensibility-planning","title":"Extensibility Planning","text":"<p>The current architecture supports potential future extensions:</p> <ul> <li>New Model Types - LLMs, vision models through same interfaces</li> <li>New Explanation Methods - Gradient-based, attention analysis</li> <li>New Data Modalities - Text, image through <code>DataInterface</code></li> <li>Cloud Integration - Remote model serving, distributed processing</li> </ul>"},{"location":"architecture/#maintenance-strategy","title":"Maintenance Strategy","text":"<ul> <li>Interface stability - Protocol changes are backwards compatible</li> <li>Migration support - Clear upgrade paths between versions</li> <li>Documentation - Architecture decisions documented for future maintainers</li> <li>Performance monitoring - Metrics collection for optimization guidance</li> </ul> <p>This architecture balances immediate needs (professional tabular ML auditing) with potential future extensibility, ensuring GlassAlpha can evolve while maintaining stability and trust for regulated industry use.</p> <p>For implementation details, see the API Reference. For usage examples, see Examples.</p>"},{"location":"changelog/","title":"Changelog","text":"<p>All notable changes to GlassAlpha are documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>"},{"location":"changelog/#010-2024-09-24","title":"[0.1.0] - 2024-09-24","text":""},{"location":"changelog/#added","title":"Added","text":"<ul> <li>Core ML Model Support: XGBoost, LightGBM, Logistic Regression, and generic scikit-learn classifiers</li> <li>Explanation Methods: TreeSHAP for tree models, KernelSHAP for model-agnostic explanations</li> <li>Comprehensive Metrics: 17 metrics including performance, fairness, and drift detection</li> <li>Professional Reporting: PDF generation with deterministic plots and audit trails</li> <li>CLI Interface: Complete command-line tool with <code>audit</code>, <code>validate</code>, and <code>list</code> commands</li> <li>Configuration System: YAML-based configuration with Pydantic validation and strict mode</li> <li>Data Processing: Tabular data loader with schema validation and protected attribute handling</li> <li>Reproducibility: Deterministic execution with seed management and audit manifests</li> <li>German Credit Dataset: Complete working example with regulatory interpretation</li> </ul>"},{"location":"changelog/#documentation","title":"Documentation","text":"<ul> <li>Complete User Guides: Installation, quickstart, configuration, and CLI reference</li> <li>API Reference: Comprehensive documentation for all public interfaces</li> <li>Compliance Framework: GDPR, ECOA, FCRA regulatory mapping and guidance</li> <li>Troubleshooting Guide: Common issues and solutions</li> <li>FAQ Section: Comprehensive answers to user questions</li> <li>Professional Presentation: Production-ready documentation suitable for compliance contexts</li> </ul>"},{"location":"changelog/#architecture","title":"Architecture","text":"<ul> <li>Plugin System: Registry-based architecture for models, explainers, and metrics</li> <li>Enterprise Ready: Feature flag system and clear OSS/Enterprise boundaries</li> <li>Extension Points: Protocol-based interfaces enabling custom implementations</li> <li>Audit Profiles: Component configuration sets for different compliance requirements</li> </ul>"},{"location":"changelog/#release-history","title":"Release History","text":""},{"location":"changelog/#010-september-24-2024","title":"[0.1.0] - September 24, 2024","text":"<p>Production Release - Core ML Auditing Capabilities</p> <p>This release provides complete functionality for professional ML model auditing with:</p> <ul> <li>Working CLI that generates PDF reports in under 60 seconds</li> <li>5 model wrappers, 3 explainer implementations, 17 metrics</li> <li>Complete German Credit audit example with regulatory analysis</li> <li>Deterministic, reproducible results suitable for compliance review</li> </ul> <p>Verification Commands: <pre><code>glassalpha --version                    # v0.1.0\nglassalpha list                         # Show all available components\nglassalpha audit --config configs/german_credit_simple.yaml --output audit.pdf\n</code></pre></p> <p>System Requirements: - Python 3.11+ - 2GB RAM minimum (8GB recommended) - macOS 10.15+, Linux (Ubuntu 20.04+), Windows 10+ (WSL2 recommended)</p> <p>See Installation Guide for complete setup instructions.</p>"},{"location":"changelog/#development-timeline","title":"Development Timeline","text":"<ul> <li>September 2024: Architecture foundation and core component implementation</li> <li>September 2024: Integration pipeline and report generation system</li> <li>September 2024: End-to-end testing and documentation completion</li> <li>September 24, 2024: Production release v0.1.0</li> </ul>"},{"location":"changelog/#potential-future-enhancement-areas","title":"Potential Future Enhancement Areas","text":"<p>Potential future releases may include enhancements based on community needs:</p> <ul> <li>Additional model type support</li> <li>Extended compliance framework coverage</li> <li>Enhanced integration capabilities</li> <li>Advanced explanation methods</li> </ul> <p>Enhancement priorities are determined by user feedback and enterprise customer requirements.</p> <p>For detailed release notes and downloads, visit GitHub Releases.</p>"},{"location":"contributing/","title":"Contributing to GlassAlpha","text":"<p>Thank you for your interest in contributing to GlassAlpha! This guide will help you understand how to effectively contribute to our professional ML auditing toolkit.</p>"},{"location":"contributing/#project-philosophy","title":"Project Philosophy","text":"<p>GlassAlpha follows an audit-first approach, prioritizing regulatory compliance and professional quality:</p> <ul> <li>Quality over features - Better to have fewer capabilities that work perfectly</li> <li>Determinism over performance - Reproducible results matter more than speed</li> <li>User value focus - Every change should improve audit quality or usability</li> <li>Professional standards - Code quality suitable for regulated industries</li> </ul>"},{"location":"contributing/#development-setup","title":"Development Setup","text":""},{"location":"contributing/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.11+ (required for type hints and modern features)</li> <li>Git for version control</li> <li>Virtual environment tool (venv, conda, or poetry)</li> </ul>"},{"location":"contributing/#quick-setup","title":"Quick Setup","text":"<ol> <li> <p>Fork and clone the repository: <pre><code>git clone https://github.com/YOUR_USERNAME/glassalpha.git\ncd glassalpha/packages\n</code></pre></p> </li> <li> <p>Create and activate virtual environment: <pre><code>python -m venv glassalpha-dev\nsource glassalpha-dev/bin/activate  # Windows: glassalpha-dev\\Scripts\\activate\n</code></pre></p> </li> <li> <p>Install in development mode: <pre><code>pip install --upgrade pip\npip install -e \".[dev]\"\n</code></pre></p> </li> <li> <p>Set up development tools: <pre><code># Install pre-commit hooks\npre-commit install\n\n# Verify installation\nglassalpha --version\nglassalpha list\n</code></pre></p> </li> <li> <p>Run tests to verify setup: <pre><code>pytest\n</code></pre></p> </li> </ol>"},{"location":"contributing/#development-dependencies","title":"Development Dependencies","text":"<p>The <code>[dev]</code> installation includes:</p> <ul> <li>Testing: pytest, pytest-cov</li> <li>Code Quality: ruff (linter), black (formatter), mypy (type checker)</li> <li>Pre-commit: Automated quality checks</li> <li>Documentation: Tools for docs development</li> </ul>"},{"location":"contributing/#project-structure","title":"Project Structure","text":"<p>Understanding the codebase structure helps target contributions effectively:</p> <pre><code>glassalpha/packages/\n\u251c\u2500\u2500 src/glassalpha/           # Main package\n\u2502   \u251c\u2500\u2500 core/                # Interfaces and registries\n\u2502   \u251c\u2500\u2500 models/              # Model wrappers (XGBoost, LightGBM, etc.)\n\u2502   \u251c\u2500\u2500 explain/             # Explainers (TreeSHAP, KernelSHAP)\n\u2502   \u251c\u2500\u2500 metrics/             # Performance, fairness, drift metrics\n\u2502   \u251c\u2500\u2500 data/                # Data loading and processing\n\u2502   \u251c\u2500\u2500 pipeline/            # Audit pipeline orchestration\n\u2502   \u251c\u2500\u2500 report/              # PDF generation and templates\n\u2502   \u251c\u2500\u2500 config/              # Configuration management\n\u2502   \u251c\u2500\u2500 cli/                 # Command-line interface\n\u2502   \u251c\u2500\u2500 profiles/            # Audit profiles\n\u2502   \u2514\u2500\u2500 utils/               # Utilities (seeds, hashing, etc.)\n\u251c\u2500\u2500 tests/                   # Test suite\n\u251c\u2500\u2500 configs/                 # Example configurations\n\u251c\u2500\u2500 dev/                     # Development resources (internal)\n\u2514\u2500\u2500 pyproject.toml          # Package configuration\n</code></pre> <p>Key Extension Points: - Add new models by implementing <code>ModelInterface</code> - Add new explainers by implementing <code>ExplainerInterface</code> - Add new metrics by implementing <code>MetricInterface</code> - Add new audit profiles for specific compliance needs</p>"},{"location":"contributing/#code-quality-standards","title":"Code Quality Standards","text":""},{"location":"contributing/#type-safety","title":"Type Safety","text":"<p>All code must include type hints and pass <code>mypy --strict</code>:</p> <pre><code>from typing import Dict, List, Optional\nimport pandas as pd\nimport numpy as np\n\ndef compute_fairness_metrics(\n    y_true: np.ndarray,\n    y_pred: np.ndarray,\n    sensitive_features: pd.DataFrame,\n    metrics: List[str]\n) -&gt; Dict[str, float]:\n    \"\"\"Compute fairness metrics across demographic groups.\"\"\"\n    ...\n</code></pre>"},{"location":"contributing/#code-formatting-and-linting","title":"Code Formatting and Linting","text":"<p>We use automated tools to ensure consistent code quality:</p> <pre><code># Check code formatting\nblack --check src/\n\n# Check linting\nruff check src/\n\n# Check type hints\nmypy src/\n\n# Or use the convenience script\n./lint-and-fix.sh\n</code></pre>"},{"location":"contributing/#testing-requirements","title":"Testing Requirements","text":"<p>Coverage Target: 50%+ for core modules</p> <p>Test Categories: - Unit tests - Individual component testing - Integration tests - Component interaction testing - Determinism tests - Reproducibility verification - End-to-end tests - Full audit pipeline</p> <p>Example Test: <pre><code>def test_xgboost_wrapper_deterministic():\n    \"\"\"Test that XGBoost produces identical results with same seed.\"\"\"\n    # Arrange\n    X, y = make_classification(n_samples=100, random_state=42)\n    model1 = XGBoostWrapper(random_state=42)\n    model2 = XGBoostWrapper(random_state=42)\n\n    # Act\n    model1.fit(X, y)\n    model2.fit(X, y)\n    pred1 = model1.predict(X)\n    pred2 = model2.predict(X)\n\n    # Assert\n    np.testing.assert_array_equal(pred1, pred2)\n</code></pre></p>"},{"location":"contributing/#contribution-workflow","title":"Contribution Workflow","text":""},{"location":"contributing/#1-choose-contribution-type","title":"1. Choose Contribution Type","text":"<p>High-Value Contributions: - Bug fixes - Especially for determinism or audit quality issues - Performance improvements - Faster audit generation - New model support - Additional ML library wrappers - Enhanced explanations - Better SHAP integration or visualizations - Improved error handling - Clearer error messages and recovery - Documentation - Examples, guides, API documentation</p> <p>Lower Priority: - Complex features without clear audit benefit - Breaking API changes - Features requiring significant maintenance overhead</p>"},{"location":"contributing/#2-create-feature-branch","title":"2. Create Feature Branch","text":"<pre><code>git checkout -b feature/descriptive-name\n# or\ngit checkout -b fix/issue-description\n</code></pre>"},{"location":"contributing/#3-development-process","title":"3. Development Process","text":"<p>Before coding: 1. Check existing issues and discussions 2. Create an issue for significant changes 3. Discuss architecture for major features</p> <p>While coding: 1. Write tests first (TDD approach recommended) 2. Follow existing patterns and interfaces 3. Maintain deterministic behavior 4. Add comprehensive docstrings</p> <p>Code example pattern: <pre><code>@ModelRegistry.register(\"new_model\")\nclass NewModelWrapper:\n    \"\"\"Wrapper for NewML library following GlassAlpha patterns.\"\"\"\n\n    capabilities = {\n        \"supports_shap\": True,\n        \"data_modality\": \"tabular\"\n    }\n    version = \"1.0.0\"\n\n    def __init__(self, **kwargs):\n        \"\"\"Initialize with deterministic defaults.\"\"\"\n        self._set_deterministic_params(kwargs)\n\n    def predict(self, X: pd.DataFrame) -&gt; np.ndarray:\n        \"\"\"Generate predictions with type safety.\"\"\"\n        # Implementation\n        ...\n</code></pre></p>"},{"location":"contributing/#4-testing-your-changes","title":"4. Testing Your Changes","text":"<pre><code># Run specific test categories\npytest tests/test_models/          # Model tests\npytest tests/test_explainers/      # Explainer tests\npytest tests/test_integration/     # Integration tests\n\n# Run all tests with coverage\npytest --cov=src/glassalpha --cov-report=html\n\n# Test determinism (crucial for audit reproducibility)\npytest -k deterministic\n\n# Test end-to-end workflow\nglassalpha audit --config configs/german_credit_simple.yaml --output test.pdf\n</code></pre>"},{"location":"contributing/#5-quality-checks","title":"5. Quality Checks","text":"<pre><code># Comprehensive quality check\n./lint-and-fix.sh\n\n# Manual checks if needed\nblack src/\nruff check --fix src/\nmypy src/\n</code></pre>"},{"location":"contributing/#6-commit-your-changes","title":"6. Commit Your Changes","text":"<p>Use conventional commit format:</p> <pre><code>git add .\ngit commit -m \"feat(models): add RandomForest wrapper with TreeSHAP support\n\n- Implement RandomForestWrapper following ModelInterface\n- Add comprehensive test suite with determinism checks\n- Include capability declarations for SHAP compatibility\n- Update model registry and documentation\n\nCloses #123\"\n</code></pre> <p>Commit Types: - <code>feat:</code> New features - <code>fix:</code> Bug fixes - <code>docs:</code> Documentation updates - <code>test:</code> Test improvements - <code>refactor:</code> Code restructuring - <code>perf:</code> Performance improvements</p>"},{"location":"contributing/#pull-request-process","title":"Pull Request Process","text":""},{"location":"contributing/#before-submitting","title":"Before Submitting","text":"<ol> <li>Rebase on main to ensure clean history</li> <li>Run full test suite and ensure all pass</li> <li>Check coverage hasn't decreased significantly</li> <li>Update documentation for any user-visible changes</li> <li>Add changelog entry if user-facing</li> </ol>"},{"location":"contributing/#pr-description-template","title":"PR Description Template","text":"<pre><code>## Description\nBrief description of changes and motivation.\n\n## Type of Change\n- [ ] Bug fix (non-breaking change fixing an issue)\n- [ ] New feature (non-breaking change adding functionality)\n- [ ] Breaking change (would cause existing functionality to not work as expected)\n- [ ] Documentation update\n\n## Testing\n- [ ] Unit tests pass\n- [ ] Integration tests pass\n- [ ] Manual testing completed\n- [ ] Determinism verified (if applicable)\n\n## Checklist\n- [ ] Code follows style guidelines\n- [ ] Self-review completed\n- [ ] Documentation updated\n- [ ] Tests added/updated\n- [ ] No breaking changes (or clearly documented)\n</code></pre>"},{"location":"contributing/#review-process","title":"Review Process","text":"<ol> <li>Automated checks must pass (CI/CD pipeline)</li> <li>Code review by maintainer</li> <li>Testing verification in review environment</li> <li>Documentation review for user-facing changes</li> <li>Merge after approval</li> </ol>"},{"location":"contributing/#architecture-guidelines","title":"Architecture Guidelines","text":""},{"location":"contributing/#plugin-system","title":"Plugin System","text":"<p>GlassAlpha uses a registry-based plugin architecture. Follow these patterns:</p> <p>Adding New Components: <pre><code># 1. Implement the interface\nclass MyExplainer:\n    capabilities = {\"model_types\": [\"xgboost\"]}\n\n    def explain(self, model, X, y=None):\n        # Implementation\n        ...\n\n# 2. Register the component\n@ExplainerRegistry.register(\"my_explainer\", priority=75)\nclass MyExplainer:\n    ...\n\n# 3. Add tests\ndef test_my_explainer_registration():\n    assert \"my_explainer\" in ExplainerRegistry.get_all()\n</code></pre></p>"},{"location":"contributing/#enterpriseoss-separation","title":"Enterprise/OSS Separation","text":"<p>Maintain clear boundaries between open source and enterprise features:</p> <pre><code># OSS implementation - always available\n@ModelRegistry.register(\"basic_model\")\nclass BasicModel:\n    ...\n\n# Enterprise feature - gated behind license check\n@check_feature(\"advanced_models\")\ndef create_advanced_model():\n    if not is_enterprise():\n        raise FeatureNotAvailable(\"Requires enterprise license\")\n    # Enterprise implementation\n    ...\n</code></pre>"},{"location":"contributing/#deterministic-design","title":"Deterministic Design","text":"<p>All operations must be reproducible:</p> <pre><code>def deterministic_operation(data, random_state=None):\n    \"\"\"Ensure operation can be reproduced exactly.\"\"\"\n    if random_state is not None:\n        np.random.seed(random_state)\n\n    # Deterministic processing\n    result = process_data(data)\n\n    # Include randomness source in output for audit trail\n    return {\n        \"result\": result,\n        \"random_state\": random_state,\n        \"timestamp\": datetime.utcnow(),\n        \"version\": __version__\n    }\n</code></pre>"},{"location":"contributing/#testing-guidelines","title":"Testing Guidelines","text":""},{"location":"contributing/#test-organization","title":"Test Organization","text":"<pre><code>tests/\n\u251c\u2500\u2500 test_core/              # Core architecture tests\n\u251c\u2500\u2500 test_models/            # Model wrapper tests\n\u251c\u2500\u2500 test_explainers/        # Explainer tests\n\u251c\u2500\u2500 test_metrics/           # Metrics tests\n\u251c\u2500\u2500 test_integration/       # Component integration\n\u251c\u2500\u2500 test_cli/               # CLI interface tests\n\u251c\u2500\u2500 test_deterministic/     # Reproducibility tests\n\u2514\u2500\u2500 test_end_to_end/       # Full pipeline tests\n</code></pre>"},{"location":"contributing/#writing-effective-tests","title":"Writing Effective Tests","text":"<p>Test Structure (Arrange-Act-Assert): <pre><code>def test_specific_behavior():\n    \"\"\"Test description explaining what behavior is verified.\"\"\"\n    # Arrange - Set up test data and conditions\n    data = create_test_data()\n    config = create_test_config()\n\n    # Act - Execute the operation being tested\n    result = perform_operation(data, config)\n\n    # Assert - Verify expected outcomes\n    assert result.success\n    assert len(result.explanations) &gt; 0\n    assert result.manifest[\"random_seed\"] == config.random_seed\n</code></pre></p> <p>Testing Patterns:</p> <ol> <li> <p>Determinism Tests: <pre><code>def test_audit_determinism():\n    \"\"\"Verify identical configs produce identical results.\"\"\"\n    config = load_config(\"test_config.yaml\")\n\n    result1 = run_audit(config)\n    result2 = run_audit(config)\n\n    # Critical for regulatory compliance\n    assert result1.manifest == result2.manifest\n    np.testing.assert_array_equal(result1.shap_values, result2.shap_values)\n</code></pre></p> </li> <li> <p>Error Handling Tests: <pre><code>def test_graceful_error_handling():\n    \"\"\"Verify clear error messages for common failures.\"\"\"\n    invalid_config = {\"model\": {\"type\": \"nonexistent\"}}\n\n    with pytest.raises(ComponentNotFoundError) as exc_info:\n        run_audit(invalid_config)\n\n    assert \"nonexistent\" in str(exc_info.value)\n    assert \"available models\" in str(exc_info.value)\n</code></pre></p> </li> </ol>"},{"location":"contributing/#documentation-standards","title":"Documentation Standards","text":""},{"location":"contributing/#docstring-format","title":"Docstring Format","text":"<p>Use Google-style docstrings:</p> <pre><code>def explain_model_decision(\n    model: ModelInterface,\n    instance: pd.Series,\n    background_data: Optional[pd.DataFrame] = None,\n    explainer_type: str = \"auto\"\n) -&gt; Dict[str, Any]:\n    \"\"\"Generate explanation for a single model decision.\n\n    This function provides detailed explanations for individual predictions,\n    helping users understand which features contributed to the model's decision\n    and by how much.\n\n    Args:\n        model: Trained model implementing ModelInterface protocol\n        instance: Single data instance to explain (must match model input schema)\n        background_data: Reference data for SHAP baseline. If None, uses\n            model training data when available\n        explainer_type: Type of explainer to use (\"auto\", \"shap\", \"lime\").\n            \"auto\" selects best explainer based on model capabilities\n\n    Returns:\n        Dictionary containing:\n            - \"explanations\": Feature importance scores\n            - \"baseline\": Reference prediction value\n            - \"prediction\": Model prediction for this instance\n            - \"confidence\": Prediction confidence if available\n            - \"metadata\": Explainer type, version, parameters used\n\n    Raises:\n        ValueError: If instance shape doesn't match model input requirements\n        ExplainerNotSupportedError: If no compatible explainer found for model\n        DataValidationError: If background_data format is incompatible\n\n    Example:\n        &gt;&gt;&gt; model = XGBoostWrapper()\n        &gt;&gt;&gt; model.fit(X_train, y_train)\n        &gt;&gt;&gt; explanation = explain_model_decision(model, X_test.iloc[0])\n        &gt;&gt;&gt; print(explanation[\"explanations\"])\n        {'feature1': 0.23, 'feature2': -0.15, ...}\n\n        Generate explanation plot:\n        &gt;&gt;&gt; plot_explanation_waterfall(explanation)\n\n    Note:\n        Explanations are computed using the model's most compatible explainer.\n        For tree-based models (XGBoost, LightGBM), TreeSHAP provides exact\n        Shapley values. For other models, KernelSHAP provides approximations.\n    \"\"\"\n</code></pre>"},{"location":"contributing/#example-updates","title":"Example Updates","text":"<p>When adding new features, update relevant examples:</p> <ol> <li>Configuration examples - Show how to use new features</li> <li>Tutorial updates - Integrate new capabilities into user journey</li> <li>API documentation - Document new interfaces and parameters</li> </ol>"},{"location":"contributing/#security-and-privacy-guidelines","title":"Security and Privacy Guidelines","text":""},{"location":"contributing/#data-handling","title":"Data Handling","text":"<ul> <li>No PII in logs - Never log personally identifiable information</li> <li>Sanitize inputs - Validate and clean all user inputs</li> <li>Hash sensitive data - Use SHA-256 for any identifier hashing</li> <li>Local processing - Core library must work completely offline</li> </ul>"},{"location":"contributing/#example-safe-logging","title":"Example Safe Logging","text":"<pre><code>import logging\nfrom glassalpha.utils import hash_dataframe\n\nlogger = logging.getLogger(__name__)\n\ndef process_audit_data(data: pd.DataFrame):\n    \"\"\"Process audit data safely.\"\"\"\n    data_hash = hash_dataframe(data)\n\n    # Safe: Log hash and metadata, never actual data\n    logger.info(f\"Processing dataset: hash={data_hash}, shape={data.shape}\")\n\n    # NEVER do this:\n    # logger.info(f\"Processing data: {data.to_dict()}\")  # Could contain PII\n\n    return process_data(data)\n</code></pre>"},{"location":"contributing/#getting-help","title":"Getting Help","text":""},{"location":"contributing/#communication-channels","title":"Communication Channels","text":"<ul> <li>GitHub Issues - Bug reports, feature requests</li> <li>GitHub Discussions - General questions, usage help</li> <li>Code Review - Feedback on pull requests</li> </ul>"},{"location":"contributing/#before-asking-questions","title":"Before Asking Questions","text":"<ol> <li>Search existing issues and discussions</li> <li>Check documentation including FAQ and troubleshooting</li> <li>Try the quickstart tutorial to understand basic usage</li> <li>Look at existing code examples for implementation patterns</li> </ol>"},{"location":"contributing/#how-to-ask-effective-questions","title":"How to Ask Effective Questions","text":"<p>Good Question Format: <pre><code>**What I'm trying to do:** Add support for CatBoost models\n\n**What I've tried:**\n- Implemented CatBoostWrapper following ModelInterface\n- Added basic tests following XGBoost example\n- Getting error: \"TreeSHAP not compatible with CatBoost\"\n\n**Expected behavior:** TreeSHAP should work with CatBoost like other tree models\n\n**Environment:**\n- GlassAlpha version: 0.1.0\n- Python version: 3.11.5\n- CatBoost version: 1.2.0\n\n**Code snippet:** [minimal reproducing example]\n</code></pre></p>"},{"location":"contributing/#recognition-and-credits","title":"Recognition and Credits","text":"<p>Contributors are recognized in several ways:</p> <ul> <li>Changelog entries for significant contributions</li> <li>GitHub contributor list automatically maintained</li> <li>Documentation credits for major documentation contributions</li> <li>Release notes highlighting key contributions</li> </ul>"},{"location":"contributing/#development-roadmap","title":"Development Roadmap","text":"<p>Understanding our direction helps target valuable contributions:</p> <p>Current Focus Areas: - Enhanced model support (additional ML libraries) - Improved explanation quality and performance - Better error handling and user experience - Comprehensive documentation and examples</p> <p>Potential Future Considerations (community-driven): - Additional data modalities based on demand - Extended compliance framework support - Enhanced integration capabilities - Advanced visualization options</p>"},{"location":"contributing/#quick-reference","title":"Quick Reference","text":"<p>Essential Commands: <pre><code># Setup\npip install -e \".[dev]\" &amp;&amp; pre-commit install\n\n# Development\n./lint-and-fix.sh              # Code quality checks\npytest                         # Run tests\nglassalpha audit --config configs/german_credit_simple.yaml --output test.pdf\n\n# Quality gates\nblack --check src/             # Formatting\nruff check src/                # Linting\nmypy src/                      # Type checking\npytest --cov=src/glassalpha   # Coverage\n</code></pre></p> <p>Getting Unstuck: 1. Check Architecture Guide for system design 2. Look at existing implementations for patterns 3. Search GitHub Issues 4. Ask in GitHub Discussions</p> <p>Thank you for contributing to GlassAlpha! Your contributions help make ML auditing more transparent, reliable, and accessible for regulated industries.</p>"},{"location":"deployment/","title":"Production Deployment Guide","text":"<p>This guide covers deploying GlassAlpha in production environments, with special attention to security, compliance, and regulatory requirements.</p>"},{"location":"deployment/#deployment-overview","title":"Deployment Overview","text":"<p>GlassAlpha is designed for secure, on-premise deployment in regulated industries. Key characteristics:</p> <ul> <li>Local processing only - No external API calls or cloud dependencies</li> <li>File-based storage - No databases required</li> <li>Deterministic operations - Reproducible results for compliance</li> <li>Audit trail generation - Complete lineage tracking</li> <li>Enterprise-ready - Role-based access and advanced features available</li> </ul>"},{"location":"deployment/#pre-deployment-planning","title":"Pre-Deployment Planning","text":""},{"location":"deployment/#environment-requirements","title":"Environment Requirements","text":"<p>Production Server Specifications: - CPU: 4+ cores (8+ recommended for large datasets) - Memory: 16GB+ RAM (32GB+ for datasets &gt;100K rows) - Storage: 100GB+ SSD (audit reports, manifests, logs) - OS: Linux (Ubuntu 20.04+, RHEL 8+), macOS 10.15+, Windows Server 2019+ - Python: 3.11+ with virtual environment support - Network: Air-gapped capability (no internet required for core operations)</p> <p>Security Requirements: - Hardened operating system with latest security updates - Restricted user accounts with minimal privileges - Encrypted file systems for data at rest - Secure network configuration (firewall rules, VPN access) - Audit logging enabled at OS level</p>"},{"location":"deployment/#regulatory-considerations","title":"Regulatory Considerations","text":"<p>Compliance Framework Alignment: - SOC 2 Type II - Access controls, availability, confidentiality - ISO 27001 - Information security management - GDPR - Data protection and privacy requirements - HIPAA - Healthcare data protection (if applicable) - SOX - Financial reporting controls (if applicable)</p> <p>Audit Requirements: - Complete audit trails of all system activities - Data lineage and transformation tracking - User access and activity logging - Configuration change management - Incident response and reporting procedures</p>"},{"location":"deployment/#installation-and-setup","title":"Installation and Setup","text":""},{"location":"deployment/#1-environment-preparation","title":"1. Environment Preparation","text":"<p>Create dedicated service account: <pre><code># Linux/macOS\nsudo useradd -m -s /bin/bash glassalpha\nsudo mkdir -p /opt/glassalpha/{app,data,logs,config}\nsudo chown -R glassalpha:glassalpha /opt/glassalpha\n</code></pre></p> <p>Set up directory structure: <pre><code>/opt/glassalpha/\n\u251c\u2500\u2500 app/                    # Application code\n\u251c\u2500\u2500 data/                   # Input datasets\n\u251c\u2500\u2500 config/                 # Configuration files\n\u251c\u2500\u2500 output/                 # Generated reports and manifests\n\u251c\u2500\u2500 logs/                   # Application and audit logs\n\u251c\u2500\u2500 backups/                # Configuration and data backups\n\u2514\u2500\u2500 temp/                   # Temporary processing files\n</code></pre></p>"},{"location":"deployment/#2-application-installation","title":"2. Application Installation","text":"<p>Install as service account: <pre><code>sudo su - glassalpha\n\n# Create Python virtual environment\npython3.11 -m venv /opt/glassalpha/app/venv\nsource /opt/glassalpha/app/venv/bin/activate\n\n# Install GlassAlpha\ncd /opt/glassalpha/app\ngit clone https://github.com/GlassAlpha/glassalpha.git\ncd glassalpha/packages\npip install --upgrade pip\npip install -e .\n\n# Verify installation\nglassalpha --version\nglassalpha list\n</code></pre></p> <p>Set environment variables: <pre><code># /opt/glassalpha/.env\nexport GLASSALPHA_CONFIG_DIR=\"/opt/glassalpha/config\"\nexport GLASSALPHA_DATA_DIR=\"/opt/glassalpha/data\"\nexport GLASSALPHA_OUTPUT_DIR=\"/opt/glassalpha/output\"\nexport GLASSALPHA_LOG_LEVEL=\"INFO\"\nexport GLASSALPHA_LOG_FILE=\"/opt/glassalpha/logs/glassalpha.log\"\n\n# Enterprise license (if applicable)\n# export GLASSALPHA_LICENSE_KEY=\"your-enterprise-key\"\n\n# Load environment\nsource /opt/glassalpha/.env\n</code></pre></p>"},{"location":"deployment/#3-system-integration","title":"3. System Integration","text":"<p>Create systemd service (Linux): <pre><code># /etc/systemd/system/glassalpha.service\n[Unit]\nDescription=GlassAlpha ML Audit Service\nAfter=network.target\n\n[Service]\nType=notify\nUser=glassalpha\nGroup=glassalpha\nWorkingDirectory=/opt/glassalpha/app\nEnvironment=PATH=/opt/glassalpha/app/venv/bin\nEnvironmentFile=/opt/glassalpha/.env\nExecStart=/opt/glassalpha/app/venv/bin/glassalpha serve\nRestart=always\nRestartSec=10\n\n# Security hardening\nNoNewPrivileges=true\nProtectSystem=strict\nProtectHome=true\nReadWritePaths=/opt/glassalpha\n\n[Install]\nWantedBy=multi-user.target\n</code></pre></p> <p>Enable and start service: <pre><code>sudo systemctl enable glassalpha\nsudo systemctl start glassalpha\nsudo systemctl status glassalpha\n</code></pre></p>"},{"location":"deployment/#configuration-management","title":"Configuration Management","text":""},{"location":"deployment/#production-configuration-structure","title":"Production Configuration Structure","text":"<p>Environment-specific configs: <pre><code>/opt/glassalpha/config/\n\u251c\u2500\u2500 environments/\n\u2502   \u251c\u2500\u2500 production.yaml     # Production-specific settings\n\u2502   \u251c\u2500\u2500 staging.yaml        # Staging environment\n\u2502   \u2514\u2500\u2500 development.yaml    # Development/testing\n\u251c\u2500\u2500 profiles/\n\u2502   \u251c\u2500\u2500 financial.yaml      # Financial services compliance\n\u2502   \u251c\u2500\u2500 healthcare.yaml     # Healthcare compliance\n\u2502   \u2514\u2500\u2500 standard.yaml       # General compliance\n\u251c\u2500\u2500 models/\n\u2502   \u251c\u2500\u2500 prod_model_v1.pkl  # Production model artifacts\n\u2502   \u2514\u2500\u2500 model_configs/     # Model-specific configurations\n\u2514\u2500\u2500 templates/\n    \u251c\u2500\u2500 standard_audit.yaml # Standard audit configuration\n    \u2514\u2500\u2500 regulatory_audit.yaml # Enhanced regulatory audit\n</code></pre></p> <p>Production configuration template: <pre><code># /opt/glassalpha/config/environments/production.yaml\naudit_profile: financial_compliance\n\n# Strict mode enforces regulatory requirements\nstrict_mode: true\n\n# Reproducibility settings\nreproducibility:\n  random_seed: ${AUDIT_SEED:-42}\n  track_git_sha: true\n  track_environment: true\n  require_data_hash: true\n\n# Data configuration\ndata:\n  base_path: /opt/glassalpha/data\n  schema_validation: strict\n  pii_detection: enabled\n  backup_original: true\n\n# Model configuration\nmodel:\n  type: xgboost\n  path: /opt/glassalpha/config/models/prod_model_v1.pkl\n  validation_required: true\n\n# Security settings\nsecurity:\n  audit_logging: enabled\n  access_logging: enabled\n  data_encryption: true\n  output_sanitization: true\n\n# Performance settings\nperformance:\n  max_memory_gb: 8\n  max_processing_time: 300\n  parallel_processing: true\n  n_jobs: 4\n\n# Output configuration\noutput:\n  base_path: /opt/glassalpha/output\n  retention_days: 2555  # 7 years for regulatory compliance\n  backup_enabled: true\n  compression: true\n\n# Enterprise features (if licensed)\nenterprise:\n  enabled: ${GLASSALPHA_ENTERPRISE:-false}\n  monitoring: true\n  advanced_templates: true\n  rbac_enabled: true\n</code></pre></p>"},{"location":"deployment/#configuration-validation","title":"Configuration Validation","text":"<p>Pre-deployment validation: <pre><code># Validate configuration\nglassalpha validate --config config/environments/production.yaml --strict\n\n# Test with sample data\nglassalpha audit \\\n  --config config/environments/production.yaml \\\n  --config config/templates/standard_audit.yaml \\\n  --output output/validation_test.pdf \\\n  --dry-run\n</code></pre></p> <p>Configuration testing pipeline: <pre><code>#!/bin/bash\n# config-validation.sh\n\nset -e\n\necho \"Validating production configurations...\"\n\n# Test all environment configs\nfor config in config/environments/*.yaml; do\n    echo \"Validating $config...\"\n    glassalpha validate --config \"$config\" --strict\ndone\n\n# Test audit profiles\nfor profile in config/profiles/*.yaml; do\n    echo \"Testing profile $profile...\"\n    glassalpha audit --config \"$profile\" --output /tmp/test.pdf --dry-run\ndone\n\necho \"All configurations validated successfully!\"\n</code></pre></p>"},{"location":"deployment/#security-considerations","title":"Security Considerations","text":""},{"location":"deployment/#access-control","title":"Access Control","text":"<p>File system permissions: <pre><code># Application files - read-only\nchmod -R 755 /opt/glassalpha/app\nchown -R root:glassalpha /opt/glassalpha/app\n\n# Configuration - restricted access\nchmod -R 750 /opt/glassalpha/config\nchown -R glassalpha:glassalpha /opt/glassalpha/config\n\n# Data directories - service account only\nchmod -R 700 /opt/glassalpha/data\nchmod -R 700 /opt/glassalpha/output\nchown -R glassalpha:glassalpha /opt/glassalpha/{data,output}\n\n# Logs - append only\nchmod -R 640 /opt/glassalpha/logs\nchown -R glassalpha:adm /opt/glassalpha/logs\n</code></pre></p> <p>Network security: <pre><code># Firewall configuration (example for Linux)\nsudo ufw default deny incoming\nsudo ufw default allow outgoing\nsudo ufw allow ssh\nsudo ufw allow from 10.0.0.0/8 to any port 8080  # Internal network only\nsudo ufw enable\n</code></pre></p>"},{"location":"deployment/#data-protection","title":"Data Protection","text":"<p>Encryption at rest: <pre><code># Encrypt sensitive directories using LUKS (Linux)\nsudo cryptsetup luksFormat /dev/sdb1\nsudo cryptsetup luksOpen /dev/sdb1 glassalpha-data\nsudo mkfs.ext4 /dev/mapper/glassalpha-data\nsudo mount /dev/mapper/glassalpha-data /opt/glassalpha/data\n\n# Add to /etc/fstab for automatic mounting\necho \"/dev/mapper/glassalpha-data /opt/glassalpha/data ext4 defaults 0 2\" | sudo tee -a /etc/fstab\n</code></pre></p> <p>Data handling policies: <pre><code># data-handling-policy.yaml\ndata_governance:\n  classification:\n    public: []\n    internal: [model_performance, system_metrics]\n    confidential: [audit_reports, explanations]\n    restricted: [raw_data, pii_data]\n\n  retention:\n    raw_data: 90_days\n    audit_reports: 7_years\n    logs: 1_year\n    temporary_files: 24_hours\n\n  access_controls:\n    raw_data: [data_scientist, compliance_officer]\n    audit_reports: [compliance_officer, auditor, legal]\n    system_logs: [system_admin, security_officer]\n</code></pre></p>"},{"location":"deployment/#audit-logging","title":"Audit Logging","text":"<p>Comprehensive logging configuration: <pre><code># logging-config.py\nimport logging\nimport logging.handlers\nimport json\nfrom datetime import datetime\n\nclass AuditFormatter(logging.Formatter):\n    \"\"\"Custom formatter for audit logs.\"\"\"\n\n    def format(self, record):\n        # Structured logging for compliance\n        log_entry = {\n            \"timestamp\": datetime.utcnow().isoformat(),\n            \"level\": record.levelname,\n            \"component\": record.name,\n            \"message\": record.getMessage(),\n            \"user\": getattr(record, 'user', 'system'),\n            \"action\": getattr(record, 'action', 'unknown'),\n            \"resource\": getattr(record, 'resource', 'unknown'),\n            \"session_id\": getattr(record, 'session_id', 'none'),\n            \"ip_address\": getattr(record, 'ip_address', 'local')\n        }\n        return json.dumps(log_entry)\n\n# Configure audit logging\naudit_logger = logging.getLogger('glassalpha.audit')\nhandler = logging.handlers.RotatingFileHandler(\n    '/opt/glassalpha/logs/audit.log',\n    maxBytes=100*1024*1024,  # 100MB\n    backupCount=10\n)\nhandler.setFormatter(AuditFormatter())\naudit_logger.addHandler(handler)\n</code></pre></p>"},{"location":"deployment/#monitoring-and-maintenance","title":"Monitoring and Maintenance","text":""},{"location":"deployment/#health-monitoring","title":"Health Monitoring","text":"<p>System health checks: <pre><code>#!/bin/bash\n# health-check.sh\n\n# Check service status\nsystemctl is-active glassalpha &gt;/dev/null 2&gt;&amp;1\nif [ $? -ne 0 ]; then\n    echo \"ERROR: GlassAlpha service is not running\"\n    exit 1\nfi\n\n# Check disk space\nDISK_USAGE=$(df /opt/glassalpha | awk 'NR==2 {print $5}' | sed 's/%//')\nif [ $DISK_USAGE -gt 80 ]; then\n    echo \"WARNING: Disk usage is ${DISK_USAGE}%\"\nfi\n\n# Check log file sizes\nLOG_SIZE=$(du -sm /opt/glassalpha/logs | cut -f1)\nif [ $LOG_SIZE -gt 1000 ]; then\n    echo \"WARNING: Log directory size is ${LOG_SIZE}MB\"\nfi\n\n# Test basic functionality\nglassalpha list &gt;/dev/null 2&gt;&amp;1\nif [ $? -ne 0 ]; then\n    echo \"ERROR: GlassAlpha CLI is not responding\"\n    exit 1\nfi\n\necho \"System health: OK\"\n</code></pre></p> <p>Performance monitoring: <pre><code># monitoring.py\nimport psutil\nimport time\nimport logging\nfrom dataclasses import dataclass\nfrom typing import Dict, Any\n\n@dataclass\nclass SystemMetrics:\n    cpu_percent: float\n    memory_percent: float\n    disk_usage_percent: float\n    active_processes: int\n    uptime_seconds: float\n\nclass PerformanceMonitor:\n    \"\"\"Monitor system performance for audit operations.\"\"\"\n\n    def __init__(self):\n        self.logger = logging.getLogger('glassalpha.monitoring')\n\n    def collect_metrics(self) -&gt; SystemMetrics:\n        \"\"\"Collect current system metrics.\"\"\"\n        return SystemMetrics(\n            cpu_percent=psutil.cpu_percent(interval=1),\n            memory_percent=psutil.virtual_memory().percent,\n            disk_usage_percent=psutil.disk_usage('/opt/glassalpha').percent,\n            active_processes=len(psutil.pids()),\n            uptime_seconds=time.time() - psutil.boot_time()\n        )\n\n    def log_metrics(self):\n        \"\"\"Log system metrics for monitoring.\"\"\"\n        metrics = self.collect_metrics()\n        self.logger.info(\"System metrics\", extra={\n            'action': 'metrics_collection',\n            'metrics': metrics.__dict__\n        })\n</code></pre></p>"},{"location":"deployment/#backup-and-recovery","title":"Backup and Recovery","text":"<p>Automated backup strategy: <pre><code>#!/bin/bash\n# backup.sh\n\nBACKUP_DIR=\"/opt/glassalpha/backups\"\nTIMESTAMP=$(date +%Y%m%d_%H%M%S)\nBACKUP_FILE=\"glassalpha_backup_${TIMESTAMP}.tar.gz\"\n\necho \"Starting backup at $(date)\"\n\n# Create backup directory\nmkdir -p \"$BACKUP_DIR\"\n\n# Backup critical directories\ntar -czf \"$BACKUP_DIR/$BACKUP_FILE\" \\\n    --exclude='/opt/glassalpha/app/venv' \\\n    --exclude='/opt/glassalpha/temp/*' \\\n    --exclude='/opt/glassalpha/logs/*.log.*' \\\n    /opt/glassalpha/config \\\n    /opt/glassalpha/data \\\n    /opt/glassalpha/output \\\n    /opt/glassalpha/.env\n\n# Verify backup\nif tar -tzf \"$BACKUP_DIR/$BACKUP_FILE\" &gt;/dev/null 2&gt;&amp;1; then\n    echo \"Backup completed successfully: $BACKUP_FILE\"\n\n    # Clean old backups (keep 30 days)\n    find \"$BACKUP_DIR\" -name \"glassalpha_backup_*.tar.gz\" -mtime +30 -delete\nelse\n    echo \"ERROR: Backup verification failed\"\n    exit 1\nfi\n</code></pre></p> <p>Recovery procedures: <pre><code>#!/bin/bash\n# restore.sh\n\nif [ $# -ne 1 ]; then\n    echo \"Usage: $0 &lt;backup_file&gt;\"\n    exit 1\nfi\n\nBACKUP_FILE=\"$1\"\nRESTORE_DIR=\"/opt/glassalpha_restore\"\n\necho \"Starting restore from $BACKUP_FILE\"\n\n# Create restore directory\nsudo mkdir -p \"$RESTORE_DIR\"\ncd \"$RESTORE_DIR\"\n\n# Extract backup\nsudo tar -xzf \"$BACKUP_FILE\"\n\necho \"Backup extracted to $RESTORE_DIR\"\necho \"Manual verification and service restart required\"\n</code></pre></p>"},{"location":"deployment/#scaling-and-performance","title":"Scaling and Performance","text":""},{"location":"deployment/#horizontal-scaling","title":"Horizontal Scaling","text":"<p>Load balancer configuration (nginx): <pre><code># /etc/nginx/sites-available/glassalpha\nupstream glassalpha_backend {\n    server 10.0.1.10:8080 weight=3;\n    server 10.0.1.11:8080 weight=3;\n    server 10.0.1.12:8080 weight=2;\n}\n\nserver {\n    listen 80;\n    server_name audit.company.com;\n\n    # Security headers\n    add_header X-Frame-Options \"SAMEORIGIN\";\n    add_header X-Content-Type-Options \"nosniff\";\n    add_header X-XSS-Protection \"1; mode=block\";\n\n    location / {\n        proxy_pass http://glassalpha_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n\n        # Timeout settings for long-running audits\n        proxy_read_timeout 300s;\n        proxy_connect_timeout 30s;\n    }\n\n    # Health check endpoint\n    location /health {\n        proxy_pass http://glassalpha_backend/health;\n        access_log off;\n    }\n}\n</code></pre></p>"},{"location":"deployment/#performance-optimization","title":"Performance Optimization","text":"<p>Production performance tuning: <pre><code># performance-config.yaml\nperformance:\n  # Memory management\n  max_memory_per_audit: 4096  # MB\n  memory_cleanup_threshold: 0.8\n\n  # CPU optimization\n  n_jobs: -1  # Use all available cores\n  batch_processing: true\n  batch_size: 1000\n\n  # I/O optimization\n  use_ssd_temp: true\n  compression_level: 6\n  async_io: true\n\n  # Caching\n  enable_result_cache: true\n  cache_ttl: 3600  # 1 hour\n  max_cache_size: 1024  # MB\n</code></pre></p> <p>Resource monitoring and alerts: <pre><code># alerts.py\nclass ResourceMonitor:\n    \"\"\"Monitor resource usage and trigger alerts.\"\"\"\n\n    def __init__(self, thresholds: Dict[str, float]):\n        self.thresholds = thresholds\n        self.logger = logging.getLogger('glassalpha.alerts')\n\n    def check_resources(self) -&gt; Dict[str, Any]:\n        \"\"\"Check resource usage against thresholds.\"\"\"\n        alerts = []\n\n        # CPU usage\n        cpu_percent = psutil.cpu_percent(interval=1)\n        if cpu_percent &gt; self.thresholds.get('cpu', 80):\n            alerts.append({\n                'type': 'cpu_high',\n                'value': cpu_percent,\n                'threshold': self.thresholds['cpu']\n            })\n\n        # Memory usage\n        memory = psutil.virtual_memory()\n        if memory.percent &gt; self.thresholds.get('memory', 80):\n            alerts.append({\n                'type': 'memory_high',\n                'value': memory.percent,\n                'threshold': self.thresholds['memory']\n            })\n\n        # Disk usage\n        disk = psutil.disk_usage('/opt/glassalpha')\n        disk_percent = (disk.used / disk.total) * 100\n        if disk_percent &gt; self.thresholds.get('disk', 85):\n            alerts.append({\n                'type': 'disk_high',\n                'value': disk_percent,\n                'threshold': self.thresholds['disk']\n            })\n\n        if alerts:\n            self.logger.warning(\"Resource alerts triggered\", extra={\n                'action': 'resource_alert',\n                'alerts': alerts\n            })\n\n        return alerts\n</code></pre></p>"},{"location":"deployment/#enterprise-deployment","title":"Enterprise Deployment","text":""},{"location":"deployment/#license-management","title":"License Management","text":"<p>Enterprise license configuration: <pre><code># /opt/glassalpha/config/enterprise.env\nexport GLASSALPHA_LICENSE_KEY=\"your-enterprise-license-key\"\nexport GLASSALPHA_LICENSE_SERVER=\"https://license.glassalpha.com\"\nexport GLASSALPHA_TELEMETRY_ENABLED=\"false\"  # Disable for air-gapped environments\n\n# Advanced enterprise features\nexport GLASSALPHA_RBAC_ENABLED=\"true\"\nexport GLASSALPHA_AUDIT_RETENTION_YEARS=\"7\"\nexport GLASSALPHA_ADVANCED_MONITORING=\"true\"\n</code></pre></p> <p>License validation service: <pre><code># license-service.py\nimport os\nimport requests\nfrom datetime import datetime, timedelta\nfrom typing import Dict, Optional\n\nclass LicenseValidator:\n    \"\"\"Validate enterprise license status.\"\"\"\n\n    def __init__(self):\n        self.license_key = os.getenv('GLASSALPHA_LICENSE_KEY')\n        self.license_server = os.getenv('GLASSALPHA_LICENSE_SERVER')\n        self.cache = {}\n\n    def validate_license(self) -&gt; Dict[str, Any]:\n        \"\"\"Validate license with caching.\"\"\"\n        if not self.license_key:\n            return {'valid': False, 'reason': 'No license key provided'}\n\n        # Check cache first (24 hour TTL)\n        cache_key = f\"license_{self.license_key[:8]}\"\n        cached_result = self.cache.get(cache_key)\n\n        if cached_result and cached_result['expires'] &gt; datetime.utcnow():\n            return cached_result['result']\n\n        # Validate with license server (if available)\n        try:\n            response = requests.post(\n                f\"{self.license_server}/validate\",\n                json={'license_key': self.license_key},\n                timeout=10\n            )\n            result = response.json()\n\n            # Cache successful validation\n            if result.get('valid'):\n                self.cache[cache_key] = {\n                    'result': result,\n                    'expires': datetime.utcnow() + timedelta(hours=24)\n                }\n\n            return result\n\n        except Exception as e:\n            # Fallback for air-gapped environments\n            return self._offline_validation()\n\n    def _offline_validation(self) -&gt; Dict[str, Any]:\n        \"\"\"Offline license validation for air-gapped environments.\"\"\"\n        # Implement offline license validation logic\n        return {'valid': True, 'mode': 'offline', 'features': ['all']}\n</code></pre></p>"},{"location":"deployment/#role-based-access-control","title":"Role-Based Access Control","text":"<p>RBAC configuration: <pre><code># rbac-config.yaml\nroles:\n  admin:\n    permissions:\n      - system_configure\n      - user_manage\n      - audit_all\n      - report_all\n\n  compliance_officer:\n    permissions:\n      - audit_run\n      - audit_view\n      - report_generate\n      - report_export\n\n  auditor:\n    permissions:\n      - audit_view\n      - report_view\n      - report_export\n\n  data_scientist:\n    permissions:\n      - audit_run\n      - model_configure\n      - data_process\n\nusers:\n  - username: compliance_admin\n    role: admin\n    email: compliance@company.com\n\n  - username: audit_manager\n    role: compliance_officer\n    departments: [risk, legal]\n\n  - username: external_auditor\n    role: auditor\n    temporary: true\n    expires: 2024-12-31\n</code></pre></p>"},{"location":"deployment/#troubleshooting","title":"Troubleshooting","text":""},{"location":"deployment/#common-production-issues","title":"Common Production Issues","text":"<p>Service won't start: <pre><code># Check service status\nsystemctl status glassalpha\n\n# Check logs\njournalctl -u glassalpha -f\n\n# Verify permissions\nls -la /opt/glassalpha/\nsudo -u glassalpha glassalpha --version\n\n# Check Python environment\nsudo -u glassalpha /opt/glassalpha/app/venv/bin/python --version\n</code></pre></p> <p>Memory issues: <pre><code># Monitor memory usage\ntop -u glassalpha\nhtop -u glassalpha\n\n# Check for memory leaks\nps aux | grep glassalpha\npmap -x $(pidof glassalpha)\n\n# Adjust configuration\necho \"performance.max_memory_per_audit: 2048\" &gt;&gt; config/production.yaml\n</code></pre></p> <p>Performance problems: <pre><code># Profile audit execution\ntime glassalpha audit --config config.yaml --output test.pdf\n\n# Check I/O usage\niotop -u glassalpha\n\n# Monitor system resources during audit\ndstat -cdngy 5\n</code></pre></p>"},{"location":"deployment/#emergency-procedures","title":"Emergency Procedures","text":"<p>Service recovery: <pre><code>#!/bin/bash\n# emergency-restart.sh\n\necho \"Emergency GlassAlpha service recovery initiated\"\n\n# Stop service gracefully\nsudo systemctl stop glassalpha\nsleep 5\n\n# Force kill if necessary\nsudo pkill -f glassalpha\n\n# Clear temporary files\nsudo rm -rf /opt/glassalpha/temp/*\n\n# Start service\nsudo systemctl start glassalpha\n\n# Verify recovery\nsleep 10\nsystemctl is-active glassalpha\nglassalpha list\n\necho \"Service recovery complete\"\n</code></pre></p>"},{"location":"deployment/#compliance-and-audit","title":"Compliance and Audit","text":""},{"location":"deployment/#audit-trail-requirements","title":"Audit Trail Requirements","text":"<p>Complete audit logging: <pre><code># audit-trail.py\nclass AuditTrail:\n    \"\"\"Comprehensive audit trail for compliance.\"\"\"\n\n    def log_audit_start(self, config_hash: str, user: str, session_id: str):\n        \"\"\"Log audit initiation.\"\"\"\n        self.logger.info(\"Audit started\", extra={\n            'action': 'audit_start',\n            'user': user,\n            'session_id': session_id,\n            'config_hash': config_hash,\n            'timestamp': datetime.utcnow().isoformat()\n        })\n\n    def log_data_access(self, dataset_path: str, data_hash: str, user: str):\n        \"\"\"Log data access for compliance.\"\"\"\n        self.logger.info(\"Data accessed\", extra={\n            'action': 'data_access',\n            'user': user,\n            'dataset_path': dataset_path,\n            'data_hash': data_hash,\n            'timestamp': datetime.utcnow().isoformat()\n        })\n\n    def log_audit_complete(self, manifest: Dict, output_path: str, user: str):\n        \"\"\"Log audit completion.\"\"\"\n        self.logger.info(\"Audit completed\", extra={\n            'action': 'audit_complete',\n            'user': user,\n            'output_path': output_path,\n            'manifest_hash': hash(str(manifest)),\n            'timestamp': datetime.utcnow().isoformat()\n        })\n</code></pre></p>"},{"location":"deployment/#regulatory-reporting","title":"Regulatory Reporting","text":"<p>Compliance report generation: <pre><code>#!/bin/bash\n# generate-compliance-report.sh\n\nREPORT_DATE=$(date +%Y-%m-%d)\nREPORT_DIR=\"/opt/glassalpha/compliance-reports\"\nmkdir -p \"$REPORT_DIR\"\n\necho \"Generating compliance report for $REPORT_DATE\"\n\n# System access report\necho \"=== User Access Report ===\" &gt; \"$REPORT_DIR/access-report-$REPORT_DATE.txt\"\ngrep \"user_login\\|data_access\\|audit_start\" /opt/glassalpha/logs/audit.log &gt;&gt; \"$REPORT_DIR/access-report-$REPORT_DATE.txt\"\n\n# Audit trail report\necho \"=== Audit Trail Report ===\" &gt; \"$REPORT_DIR/audit-trail-$REPORT_DATE.txt\"\ngrep \"audit_complete\" /opt/glassalpha/logs/audit.log &gt;&gt; \"$REPORT_DIR/audit-trail-$REPORT_DATE.txt\"\n\n# System health report\necho \"=== System Health Report ===\" &gt; \"$REPORT_DIR/health-report-$REPORT_DATE.txt\"\nsystemctl status glassalpha &gt;&gt; \"$REPORT_DIR/health-report-$REPORT_DATE.txt\"\ndf -h /opt/glassalpha &gt;&gt; \"$REPORT_DIR/health-report-$REPORT_DATE.txt\"\n\necho \"Compliance reports generated in $REPORT_DIR\"\n</code></pre></p>"},{"location":"deployment/#quick-reference","title":"Quick Reference","text":"<p>Essential Commands: <pre><code># Service management\nsudo systemctl start|stop|restart|status glassalpha\n\n# Health checks\nglassalpha --version\nglassalpha list\n./health-check.sh\n\n# Configuration validation\nglassalpha validate --config config/production.yaml --strict\n\n# Run production audit\nglassalpha audit --config config/production.yaml --output output/audit.pdf --strict\n\n# View logs\ntail -f /opt/glassalpha/logs/glassalpha.log\ntail -f /opt/glassalpha/logs/audit.log\n</code></pre></p> <p>Emergency Contacts: - System Administrator: admin@company.com - Compliance Officer: compliance@company.com - Enterprise Support: enterprise-support@glassalpha.com (if applicable)</p> <p>This production deployment guide ensures GlassAlpha operates securely and reliably in regulated industry environments while maintaining complete audit trails and compliance requirements.</p>"},{"location":"enterprise-features/","title":"Feature Comparison: OSS vs Enterprise","text":"<p>GlassAlpha offers a powerful open-source foundation with enterprise extensions for organizations requiring advanced capabilities, support, and compliance features.</p>"},{"location":"enterprise-features/#feature-matrix","title":"Feature Matrix","text":""},{"location":"enterprise-features/#core-functionality","title":"Core Functionality","text":"Feature OSS Enterprise Description Explainability TreeSHAP \u2705 \u2705 Exact Shapley values for tree models KernelSHAP \u2705 \u2705 Model-agnostic explanations (slower) DeepSHAP \u274c \u2705 Neural network explanations GradientSHAP \u274c \u2705 Gradient-based explanations for LLMs Attention Analysis \u274c \u2705 Transformer attention visualization Models Supported XGBoost \u2705 \u2705 Full support with TreeSHAP LightGBM \u2705 \u2705 Full support with TreeSHAP Logistic Regression \u2705 \u2705 Basic ML model support Random Forest \u2705 \u2705 Tree ensemble support Neural Networks \u274c \u2705 Deep learning models LLMs (GPT, BERT, etc.) \u274c \u2705 Large language models Metrics &amp; Analysis Performance Metrics \u2705 \u2705 Accuracy, precision, recall, F1, AUC Basic Fairness \u2705 \u2705 Demographic parity, equal opportunity Advanced Fairness \u274c \u2705 Conditional fairness, causal fairness Drift Detection \u2705 \u2705 PSI, KL divergence Continuous Monitoring \u274c \u2705 Real-time drift tracking"},{"location":"enterprise-features/#compliance-reporting","title":"Compliance &amp; Reporting","text":"Feature OSS Enterprise Description Report Generation Basic PDF Reports \u2705 \u2705 Standard audit PDF Custom Templates \u274c \u2705 Organization-specific branding Interactive HTML \u274c \u2705 Web-based reports with drill-down Regulatory Templates Generic Audit \u2705 \u2705 Basic compliance report EU AI Act \u274c \u2705 EU-specific requirements CFPB Compliance \u274c \u2705 US financial regulations ISO/IEC 23053 \u274c \u2705 International AI standards Custom Regulations \u274c \u2705 Industry-specific templates Recourse &amp; Remediation Basic Recourse \u2705 \u2705 Immutables, monotonicity Advanced Recourse \u274c \u2705 Multi-objective optimization Policy Packs \u274c \u2705 Pre-configured compliance rules"},{"location":"enterprise-features/#infrastructure-operations","title":"Infrastructure &amp; Operations","text":"Feature OSS Enterprise Description Deployment Local CLI \u2705 \u2705 Command-line interface API Server \u274c \u2705 REST/gRPC APIs Container Support \u274c \u2705 Docker/Kubernetes ready Integrations File-based I/O \u2705 \u2705 CSV, Parquet, JSON AWS SageMaker \u274c \u2705 Native integration Azure ML \u274c \u2705 Native integration Databricks \u274c \u2705 Native integration MLflow \u274c \u2705 Model registry integration Monitoring Static Analysis \u2705 \u2705 One-time audits Dashboard \u274c \u2705 Real-time monitoring UI Alerting \u274c \u2705 Drift &amp; fairness alerts Audit Trail \u274c \u2705 Complete change history"},{"location":"enterprise-features/#security-governance","title":"Security &amp; Governance","text":"Feature OSS Enterprise Description Access Control Single User \u2705 \u2705 Local execution RBAC \u274c \u2705 Role-based access control SSO/SAML \u274c \u2705 Enterprise authentication Audit Logs \u274c \u2705 User activity tracking Data Privacy Local Processing \u2705 \u2705 On-premise ready Data Encryption \u274c \u2705 At-rest &amp; in-transit PII Redaction \u274c \u2705 Automatic PII handling Differential Privacy \u274c \u2705 Privacy-preserving metrics"},{"location":"enterprise-features/#support-services","title":"Support &amp; Services","text":"Feature OSS Enterprise Description Support Channels GitHub Issues \u2705 \u2705 Community support Email Support \u274c \u2705 Direct support channel Priority Support \u274c \u2705 Guaranteed response times Dedicated CSM \u274c \u2705 Customer success manager SLA Response Time Best effort 24 hours Initial response Resolution Time Best effort Guaranteed Based on severity Uptime Guarantee N/A 99.9% For hosted services Training &amp; Docs Public Documentation \u2705 \u2705 Getting started guides Advanced Guides \u274c \u2705 Best practices, architecture Custom Training \u274c \u2705 Organization-specific Certification \u274c \u2705 Professional certification"},{"location":"enterprise-features/#licensing","title":"Licensing","text":""},{"location":"enterprise-features/#oss-license-apache-20","title":"OSS License (Apache 2.0)","text":"<ul> <li>\u2705 Free for any use (commercial or non-commercial)</li> <li>\u2705 Modify and distribute freely</li> <li>\u2705 No warranty or liability</li> <li>\u2705 Community-driven development</li> </ul>"},{"location":"enterprise-features/#enterprise-license","title":"Enterprise License","text":"<ul> <li>\ud83d\udcb0 Annual subscription model</li> <li>\ud83c\udfe2 Pricing based on organization size and usage</li> <li>\ud83d\udd12 Includes indemnification and warranties</li> <li>\ud83d\udcde Direct vendor support</li> <li>\ud83d\ude80 Priority feature requests</li> </ul>"},{"location":"enterprise-features/#getting-started","title":"Getting Started","text":""},{"location":"enterprise-features/#oss-installation","title":"OSS Installation","text":"<pre><code>git clone https://github.com/GlassAlpha/glassalpha\ncd glassalpha/packages\npip install -e .\nglassalpha audit --config configs/german_credit_simple.yaml --output report.pdf\n</code></pre>"},{"location":"enterprise-features/#enterprise-installation","title":"Enterprise Installation","text":"<pre><code># Contact enterprise team for license key and installation\nexport GLASSALPHA_LICENSE_KEY=\"your-license-key\"\npip install glassalpha-enterprise\nglassalpha audit --config audit.yaml --output report.pdf --strict\n</code></pre>"},{"location":"enterprise-features/#contact","title":"Contact","text":"<ul> <li>OSS Support: GitHub Issues</li> <li>Enterprise Sales: sales@glassalpha.ai</li> <li>Enterprise Support: support@glassalpha.ai (customers only)</li> </ul>"},{"location":"enterprise-features/#current-capabilities","title":"Current Capabilities","text":""},{"location":"enterprise-features/#oss-features-available-now","title":"OSS Features (Available Now)","text":"<ul> <li>\u2705 Tabular model audits (XGBoost, LightGBM, Logistic Regression)</li> <li>\u2705 TreeSHAP and KernelSHAP explanations</li> <li>\u2705 Comprehensive fairness and performance metrics</li> <li>\u2705 Professional PDF report generation</li> <li>\u2705 Complete audit trail and reproducibility</li> <li>\u2705 CLI interface with YAML configuration</li> </ul>"},{"location":"enterprise-features/#enterprise-features-contact-for-access","title":"Enterprise Features (Contact for Access)","text":"<ul> <li>\ud83c\udfe2 Advanced explainability methods</li> <li>\ud83c\udfe2 Custom regulatory templates</li> <li>\ud83c\udfe2 Priority support and SLAs</li> <li>\ud83c\udfe2 Advanced integrations and connectors</li> <li>\ud83c\udfe2 Continuous monitoring capabilities</li> <li>\ud83c\udfe2 Role-based access control and audit logging</li> </ul> <p>Last updated: September 2024</p>"},{"location":"faq/","title":"Frequently Asked Questions","text":"<p>Common questions about GlassAlpha capabilities, usage, and integration.</p>"},{"location":"faq/#general-questions","title":"General Questions","text":""},{"location":"faq/#what-is-glassalpha","title":"What is GlassAlpha?","text":"<p>GlassAlpha is an open-source AI compliance toolkit that generates comprehensive audit reports for machine learning models. It provides:</p> <ul> <li>Automated bias detection and fairness analysis</li> <li>Model explanations using SHAP and other interpretability methods</li> <li>Professional PDF reports suitable for regulatory review</li> <li>Complete reproducibility with audit trails and manifests</li> <li>Regulatory compliance support for GDPR, ECOA, FCRA, and other frameworks</li> </ul>"},{"location":"faq/#who-should-use-glassalpha","title":"Who should use GlassAlpha?","text":"<p>GlassAlpha is designed for:</p> <ul> <li>Data scientists who need to audit ML models for bias and fairness</li> <li>Compliance teams ensuring regulatory adherence for algorithmic decisions</li> <li>Risk management professionals assessing model risks</li> <li>Legal teams preparing for regulatory review or litigation</li> <li>Academic researchers studying algorithmic fairness and interpretability</li> </ul>"},{"location":"faq/#how-does-glassalpha-ensure-audit-quality","title":"How does GlassAlpha ensure audit quality?","text":"<p>GlassAlpha maintains audit quality through:</p> <ul> <li>Deterministic execution with fixed random seeds for reproducible results</li> <li>Complete audit trails tracking all decisions and configurations</li> <li>Statistical rigor with confidence intervals and significance testing</li> <li>Professional reporting with publication-quality visualizations</li> <li>Regulatory alignment with established compliance frameworks</li> </ul> <p>For detailed information about system design and quality assurance, see the Architecture Guide.</p>"},{"location":"faq/#installation-setup","title":"Installation &amp; Setup","text":""},{"location":"faq/#what-are-the-system-requirements","title":"What are the system requirements?","text":"<p>Minimum Requirements: - Python 3.11 or higher - 2GB available RAM - 1GB disk space for installation and temporary files</p> <p>Recommended: - Python 3.11+ - 8GB+ RAM for large datasets - SSD storage for better performance - Multi-core CPU for parallel processing</p>"},{"location":"faq/#which-operating-systems-are-supported","title":"Which operating systems are supported?","text":"<p>GlassAlpha is tested and supported on:</p> <ul> <li>macOS 10.15+ (Intel and Apple Silicon)</li> <li>Linux (Ubuntu 20.04+, CentOS 8+, and most modern distributions)</li> <li>Windows 10/11 (via WSL2 recommended)</li> </ul>"},{"location":"faq/#how-do-i-install-glassalpha","title":"How do I install GlassAlpha?","text":"<p>Standard Installation: <pre><code>git clone https://github.com/GlassAlpha/glassalpha\ncd glassalpha/packages\npip install -e .\n</code></pre></p> <p>Verify Installation: <pre><code>glassalpha --version\nglassalpha list\n</code></pre></p> <p>See the Quick Start Guide for detailed instructions.</p>"},{"location":"faq/#what-dependencies-does-glassalpha-require","title":"What dependencies does GlassAlpha require?","text":"<p>Core Dependencies: - pandas, numpy (data processing) - scikit-learn (machine learning utilities) - XGBoost, LightGBM (gradient boosting models) - SHAP (model explanations) - Matplotlib, Seaborn (visualizations) - WeasyPrint (PDF generation)</p> <p>All dependencies are automatically installed during setup.</p>"},{"location":"faq/#usage-configuration","title":"Usage &amp; Configuration","text":""},{"location":"faq/#how-do-i-generate-my-first-audit","title":"How do I generate my first audit?","text":"<ol> <li>Follow the Quick Start guide for a 5-minute introduction:</li> <li> <p>Quick Start Audit - Fastest way to get started</p> </li> <li> <p>Use the German Credit example: <pre><code>glassalpha audit \\\n  --config configs/german_credit_simple.yaml \\\n  --output my_audit.pdf\n</code></pre></p> </li> <li> <p>For your own data, create a configuration: <pre><code>audit_profile: tabular_compliance\nreproducibility:\n  random_seed: 42\ndata:\n  path: your_data.csv\n  target_column: outcome\nmodel:\n  type: xgboost\n</code></pre></p> </li> <li> <p>Run the audit: <pre><code>glassalpha audit --config your_config.yaml --output audit.pdf\n</code></pre></p> </li> </ol>"},{"location":"faq/#what-file-formats-are-supported-for-data","title":"What file formats are supported for data?","text":"<p>GlassAlpha supports:</p> <ul> <li>CSV (most common)</li> <li>Parquet (recommended for large datasets)</li> <li>Feather (fast binary format)</li> <li>Pickle (Python objects)</li> </ul> <p>The format is automatically detected from the file extension.</p>"},{"location":"faq/#how-do-i-handle-missing-data","title":"How do I handle missing data?","text":"<p>Configure preprocessing in your audit configuration:</p> <pre><code>preprocessing:\n  handle_missing: true\n  missing_strategy: median    # For numeric: median, mean, mode\n                             # For categorical: mode, drop\n</code></pre> <p>GlassAlpha automatically handles most missing value scenarios.</p>"},{"location":"faq/#can-i-use-my-own-pre-trained-model","title":"Can I use my own pre-trained model?","text":"<p>Yes, specify the model path in your configuration:</p> <pre><code>model:\n  type: xgboost\n  path: models/my_trained_model.pkl\n</code></pre> <p>GlassAlpha supports models saved with:</p> <ul> <li>Pickle (most scikit-learn models)</li> <li>Joblib (scikit-learn and XGBoost)</li> <li>Native formats (XGBoost <code>.model</code>, LightGBM <code>.txt</code>)</li> </ul>"},{"location":"faq/#model-support","title":"Model Support","text":""},{"location":"faq/#which-machine-learning-models-are-supported","title":"Which machine learning models are supported?","text":"<p>Currently Supported: - XGBoost - Gradient boosting with TreeSHAP explanations - LightGBM - Microsoft's gradient boosting framework - Logistic Regression - Linear classification models - Generic Scikit-learn - Most scikit-learn classifiers</p> <p>Explanation Support: - TreeSHAP - Exact SHAP values for tree-based models (XGBoost, LightGBM) - KernelSHAP - Model-agnostic explanations for any model type</p>"},{"location":"faq/#how-do-i-add-support-for-a-new-model-type","title":"How do I add support for a new model type?","text":"<p>Implement the <code>ModelInterface</code> protocol:</p> <pre><code>from glassalpha.core import ModelRegistry\n\n@ModelRegistry.register(\"my_model\")\nclass MyModel:\n    capabilities = {\"supports_shap\": True}\n    version = \"1.0.0\"\n\n    def predict(self, X):\n        # Implementation\n        pass\n\n    def predict_proba(self, X):\n        # Implementation\n        pass\n</code></pre> <p>See the API Reference for complete examples.</p>"},{"location":"faq/#can-i-use-deep-learning-models","title":"Can I use deep learning models?","text":"<p>Deep learning models can be supported through the generic model interface, but:</p> <ul> <li>TreeSHAP won't work (only for tree models)</li> <li>Use KernelSHAP for model-agnostic explanations</li> <li>Performance may be slower for explanation generation</li> <li>Consider gradient-based explanations for better deep learning support</li> </ul>"},{"location":"faq/#what-about-time-series-or-text-models","title":"What about time series or text models?","text":"<p>GlassAlpha currently focuses on tabular data for classification tasks. Additional data modalities may be supported in potential future versions based on user demand and community contributions:</p> <ul> <li>Time Series: Under consideration for potential future releases</li> <li>Text/NLP: Under consideration for potential future releases</li> <li>Computer Vision: Under consideration for potential future releases</li> </ul>"},{"location":"faq/#compliance-regulatory","title":"Compliance &amp; Regulatory","text":""},{"location":"faq/#which-regulations-does-glassalpha-address","title":"Which regulations does GlassAlpha address?","text":"<p>Directly Supported: - GDPR (EU) - Right to explanation, automated decision-making - ECOA (US) - Fair lending, non-discrimination in credit - FCRA (US) - Accuracy and fairness in credit reporting - EU AI Act - High-risk AI system requirements</p> <p>Partially Supported: - Fair Housing Act (US) - Housing discrimination - Employment Standards (EEOC, various) - Hiring discrimination</p> <p>See the Compliance Framework Guide for detailed mapping.</p>"},{"location":"faq/#can-glassalpha-reports-be-submitted-to-regulators","title":"Can GlassAlpha reports be submitted to regulators?","text":"<p>Yes, GlassAlpha reports are designed for regulatory submission:</p> <ul> <li>Professional formatting suitable for legal and regulatory review</li> <li>Complete audit trails with reproducibility manifests</li> <li>Statistical rigor with confidence intervals and significance testing</li> <li>Standardized metrics aligned with regulatory expectations</li> <li>Comprehensive documentation covering methodology and limitations</li> </ul>"},{"location":"faq/#how-does-glassalpha-handle-protected-attributes","title":"How does GlassAlpha handle protected attributes?","text":"<p>Protected attributes (race, gender, age) are used for:</p> <ol> <li>Fairness Analysis - Bias detection across demographic groups</li> <li>Statistical Testing - Demographic parity and equal opportunity</li> <li>Report Generation - Group-specific performance metrics</li> </ol> <p>Important: Protected attributes are used for analysis only, not model training (unless explicitly configured).</p>"},{"location":"faq/#what-audit-evidence-does-glassalpha-provide","title":"What audit evidence does GlassAlpha provide?","text":"<p>Generated Evidence: - PDF Audit Reports - Comprehensive analysis with visualizations - Audit Manifests - Complete execution metadata in JSON format - Configuration Records - All settings and parameters used - Individual Explanations - SHAP-based decision explanations - Statistical Analysis - Bias testing with confidence intervals - Reproducibility Data - Seeds, hashes, and version information</p>"},{"location":"faq/#performance-limitations","title":"Performance &amp; Limitations","text":""},{"location":"faq/#how-fast-is-glassalpha","title":"How fast is GlassAlpha?","text":"<p>Typical Performance: - Small datasets (&lt; 1,000 rows): 1-3 seconds - Medium datasets (1,000-10,000 rows): 3-15 seconds - Large datasets (10,000-100,000 rows): 15-60 seconds</p> <p>Performance Factors: - Model complexity (tree depth, number of estimators) - Explanation method (TreeSHAP is faster than KernelSHAP) - Number of features affects SHAP computation time - Hardware (CPU cores, memory) impacts parallel processing</p>"},{"location":"faq/#what-are-the-dataset-size-limits","title":"What are the dataset size limits?","text":"<p>Practical Limits: - Rows: No hard limit, tested up to 1M+ rows - Features: Up to ~1,000 features (SHAP computation becomes slow beyond this) - Memory: Depends on available RAM (8GB recommended for 100K+ rows)</p> <p>Optimization Options: <pre><code># For large datasets\nexplainers:\n  config:\n    treeshap:\n      max_samples: 100    # Reduce from default 1000\n    kernelshap:\n      n_samples: 50       # Reduce from default 500\n\nperformance:\n  low_memory_mode: true\n  n_jobs: -1             # Use all CPU cores\n</code></pre></p>"},{"location":"faq/#can-i-run-glassalpha-in-production-environments","title":"Can I run GlassAlpha in production environments?","text":"<p>Yes, GlassAlpha is designed for production use:</p> <p>Production Features: - Deterministic execution for consistent results - Configuration management with version control - Audit trails for compliance and debugging - Error handling with clear error messages - Security considerations (no external network calls)</p> <p>Integration Options: - CLI automation for scheduled audits - Python API for programmatic integration - Configuration files for different environments - Enterprise deployment with RBAC and monitoring</p> <p>For comprehensive production deployment guidance, see the Production Deployment Guide.</p>"},{"location":"faq/#are-there-any-limitations-i-should-know-about","title":"Are there any limitations I should know about?","text":"<p>Current Limitations: - Tabular data only - No text, image, or time series support yet - Classification focus - Limited regression support - English documentation - Additional languages may be supported based on demand - Single machine - No distributed computing support</p> <p>Model Limitations: - TreeSHAP only works with tree-based models (XGBoost, LightGBM) - KernelSHAP can be slow for complex models or large datasets - Fairness metrics require protected attribute data</p>"},{"location":"faq/#enterprise-features","title":"Enterprise Features","text":""},{"location":"faq/#what-enterprise-features-are-available","title":"What enterprise features are available?","text":"<p>Enterprise-only features (separate license): - Advanced explainability methods (gradient-based, counterfactuals) - Continuous monitoring dashboards and drift detection - Custom report templates for specific regulatory frameworks - Priority support with guaranteed response times - Advanced integrations (SageMaker, Databricks, MLflow)</p>"},{"location":"faq/#how-do-i-get-enterprise-features","title":"How do I get enterprise features?","text":"<p>Contact our enterprise team for: - License evaluation and pricing - Proof-of-concept implementations - Custom feature development - Training and support services</p> <p>Email: enterprise@glassalpha.com</p>"},{"location":"faq/#can-i-try-enterprise-features","title":"Can I try enterprise features?","text":"<p>Enterprise evaluation licenses are available for: - 30-day trials for qualified organizations - Academic licenses for educational institutions - Non-profit discounts for qualifying organizations</p>"},{"location":"faq/#integration-workflow","title":"Integration &amp; Workflow","text":""},{"location":"faq/#how-do-i-integrate-glassalpha-with-my-existing-ml-pipeline","title":"How do I integrate GlassAlpha with my existing ML pipeline?","text":"<p>Python API Integration: <pre><code>from glassalpha.pipeline import AuditPipeline\nfrom glassalpha.config import AuditConfig\n\n# Load configuration\nconfig = AuditConfig.from_yaml(\"audit_config.yaml\")\n\n# Run audit\npipeline = AuditPipeline(config)\nresults = pipeline.run()\n\n# Check results\nif results.success:\n    print(f\"Audit completed: {results.model_performance}\")\nelse:\n    print(f\"Audit failed: {results.error_message}\")\n</code></pre></p> <p>CLI Integration: <pre><code># In CI/CD pipeline\nglassalpha validate --config production_config.yaml --strict\nglassalpha audit --config production_config.yaml --output audit_report.pdf\n</code></pre></p>"},{"location":"faq/#can-i-customize-the-audit-reports","title":"Can I customize the audit reports?","text":"<p>Current Customization: - Report sections can be included/excluded - Color schemes and styling options - Company branding (logo, contact information) - Compliance statements for specific regulations</p> <p>Configuration Example: <pre><code>report:\n  template: standard_audit\n  styling:\n    color_scheme: professional\n    company_name: \"Your Company\"\n    logo_path: \"assets/logo.png\"\n  include_sections:\n    - executive_summary\n    - model_performance\n    - fairness_analysis\n</code></pre></p>"},{"location":"faq/#how-do-i-handle-multiple-models-or-environments","title":"How do I handle multiple models or environments?","text":"<p>Multiple Configurations: <pre><code># Development environment\nglassalpha audit --config configs/german_credit_simple.yaml --output dev_audit.pdf\n\n# Production environment\nglassalpha audit --config configs/gdpr_compliance.yaml --output prod_audit.pdf --strict\n</code></pre></p> <p>Configuration Overrides: <pre><code># Base configuration with environment-specific overrides\nglassalpha audit \\\n  --config base_config.yaml \\\n  --override prod_overrides.yaml \\\n  --output prod_audit.pdf\n</code></pre></p>"},{"location":"faq/#development-extension","title":"Development &amp; Extension","text":""},{"location":"faq/#how-do-i-contribute-to-glassalpha","title":"How do I contribute to GlassAlpha?","text":"<p>Ways to Contribute: - Bug reports and feature requests via GitHub Issues - Code contributions following our development guidelines - Documentation improvements and examples - Testing on different platforms and use cases</p> <p>See the Contributing Guide for detailed instructions.</p>"},{"location":"faq/#can-i-build-custom-metrics","title":"Can I build custom metrics?","text":"<p>Yes, implement the <code>MetricInterface</code>:</p> <pre><code>from glassalpha.core import MetricRegistry\n\n@MetricRegistry.register(\"my_metric\")\nclass MyCustomMetric:\n    metric_type = \"performance\"\n\n    def compute(self, y_true, y_pred, **kwargs):\n        # Custom calculation\n        return {\"value\": result, \"interpretation\": \"higher_is_better\"}\n</code></pre>"},{"location":"faq/#how-do-i-add-custom-explainers","title":"How do I add custom explainers?","text":"<p>Implement the <code>ExplainerInterface</code>:</p> <pre><code>from glassalpha.core import ExplainerRegistry\n\n@ExplainerRegistry.register(\"my_explainer\", priority=75)\nclass MyExplainer:\n    def explain(self, model, X, y=None):\n        # Custom explanation logic\n        return {\"explanations\": explanations}\n\n    def supports_model(self, model):\n        return model.get_model_type() in [\"my_model_type\"]\n</code></pre>"},{"location":"faq/#troubleshooting","title":"Troubleshooting","text":""},{"location":"faq/#common-installation-issues","title":"Common installation issues?","text":"<p>Python Version: - Ensure Python 3.11+ (check with <code>python --version</code>) - Use virtual environments to avoid conflicts</p> <p>XGBoost on macOS: <pre><code># If you see libomp errors\nbrew install libomp\npip uninstall xgboost &amp;&amp; pip install xgboost\n</code></pre></p> <p>Memory Issues: - Reduce <code>max_samples</code> in explainer configuration - Enable <code>low_memory_mode</code> in performance settings - Use smaller datasets for initial testing</p>"},{"location":"faq/#where-can-i-get-help","title":"Where can I get help?","text":"<p>Support Channels: - Documentation: Comprehensive guides and examples - GitHub Issues: Bug reports and feature requests - Community Discussions: User questions and sharing - Troubleshooting Guide: Common issues and solutions</p> <p>Enterprise Support: - Priority support with guaranteed response times - Direct access to development team - Custom consultation for complex use cases</p> <p>For immediate help, check the Troubleshooting Guide or search existing GitHub Issues.</p>"},{"location":"faq/#getting-started","title":"Getting Started","text":""},{"location":"faq/#whats-the-fastest-way-to-start-using-glassalpha","title":"What's the fastest way to start using GlassAlpha?","text":"<ol> <li>Follow the Quick Start Guide - Get running in under 10 minutes</li> <li>Try the German Credit example - See all features working</li> <li>Adapt the configuration - Modify for your specific use case</li> <li>Read the documentation - Understand advanced features</li> </ol> <p>Essential Resources: - Quick Start Guide - Configuration Guide - German Credit Tutorial - CLI Reference</p>"},{"location":"faq/#im-new-to-ml-auditing-where-should-i-start","title":"I'm new to ML auditing. Where should I start?","text":"<p>Learning Path: 1. Understand the basics - What is algorithmic bias and fairness? 2. Review regulations - What compliance frameworks apply to your use case? 3. Try GlassAlpha - Generate an audit report with sample data 4. Interpret results - Learn to read audit reports and metrics 5. Plan implementation - Design your audit workflow and processes</p> <p>Recommended Reading: - Compliance Framework Overview - German Credit Tutorial (detailed interpretation) - Industry guides on algorithmic fairness and bias</p> <p>This FAQ covers the most common questions about GlassAlpha. If you don't find your answer here, please check our other documentation or reach out via GitHub Issues.</p>"},{"location":"limitations/","title":"Project Scope &amp; Limitations","text":"<p>GlassAlpha focuses on professional ML audit capabilities for regulated industries. This document outlines our design philosophy, intended scope, and responsible use guidelines.</p>"},{"location":"limitations/#design-philosophy","title":"Design Philosophy","text":"<p>GlassAlpha follows an audit-first approach, prioritizing regulatory compliance and trust over cutting-edge ML features.</p>"},{"location":"limitations/#core-capabilities","title":"Core Capabilities","text":"<p>What GlassAlpha provides: - Deterministic PDF audit report generation - TreeSHAP explanations for tabular models (XGBoost, LightGBM, Logistic Regression) - Comprehensive fairness metrics (demographic parity, equal opportunity, etc.) - Complete reproducibility with audit trail tracking - Professional CLI interface with YAML configuration - Regulatory framework compliance support</p>"},{"location":"limitations/#intentional-scope-limitations","title":"Intentional Scope Limitations","text":"<p>Current focus areas: - Tabular/structured data analysis - Classification model auditing - On-premise deployment - File-based workflows - Deterministic operations</p> <p>Not currently supported: - Deep learning model analysis (neural networks, LLMs) - Real-time model monitoring - Cloud-native deployment features - Web-based interfaces - Automated bias mitigation</p>"},{"location":"limitations/#design-trade-offs","title":"Design Trade-offs","text":""},{"location":"limitations/#focus-on-tabular-data","title":"Focus on Tabular Data","text":"<p>GlassAlpha is intentionally designed for tabular/structured data because:</p> <ul> <li>Most regulated ML applications use tabular models</li> <li>TreeSHAP provides exact explanations for tree-based models</li> <li>Tabular fairness metrics have regulatory precedent</li> <li>Enterprise adoption is highest for tabular ML in regulated industries</li> </ul>"},{"location":"limitations/#determinism-over-performance","title":"Determinism Over Performance","text":"<p>We prioritize reproducibility over speed:</p> <ul> <li>Every operation is seedable and deterministic</li> <li>Byte-identical outputs ensure audit integrity</li> <li>All randomness is explicitly controlled</li> <li>Performance optimizations cannot compromise reproducibility</li> </ul>"},{"location":"limitations/#local-first-architecture","title":"Local-First Architecture","text":"<p>GlassAlpha is designed for secure, on-premise deployment:</p> <ul> <li>No external API calls or cloud dependencies</li> <li>All processing happens locally</li> <li>File-based storage ensures data sovereignty</li> <li>Privacy-preserving by default</li> </ul>"},{"location":"limitations/#scale-performance-characteristics","title":"Scale &amp; Performance Characteristics","text":""},{"location":"limitations/#design-targets","title":"Design Targets","text":"<p>GlassAlpha is optimized for: - Dataset size: Up to 1M rows (tested extensively) - Feature count: Up to 1,000 features - Model complexity: Up to 1,000 trees - Report generation: Under 60 seconds for standard audits</p>"},{"location":"limitations/#performance-profile","title":"Performance Profile","text":"<p>Typical execution times: - Small datasets (&lt;1K rows): 1-3 seconds - Medium datasets (1-10K rows): 3-15 seconds - Large datasets (10-100K rows): 15-60 seconds - Very large datasets (100K+ rows): 1-5 minutes</p>"},{"location":"limitations/#optimization-guidelines","title":"Optimization Guidelines","text":"<p>For optimal performance: - Use TreeSHAP with tree-based models (XGBoost, LightGBM) - Reduce explainer sample sizes for large datasets - Enable parallel processing on multi-core systems - Use SSD storage for better I/O performance</p>"},{"location":"limitations/#important-disclaimers","title":"Important Disclaimers","text":""},{"location":"limitations/#professional-tool-not-legal-advice","title":"Professional Tool, Not Legal Advice","text":"<p>GlassAlpha provides technical audit capabilities. It does not: - Provide legal advice or compliance interpretations - Guarantee regulatory approval or compliance - Replace qualified legal counsel review - Certify models as discrimination-free</p> <p>Always consult qualified legal and compliance professionals for regulatory requirements.</p>"},{"location":"limitations/#model-limitations","title":"Model Limitations","text":"<p>Users should understand: - Bias detection identifies statistical disparities, not causal discrimination - Explanations show correlations, not causal relationships - Fairness metrics reflect statistical parity, not equitable outcomes - Audit reports document technical findings, not legal conclusions</p>"},{"location":"limitations/#responsible-use-guidelines","title":"Responsible Use Guidelines","text":""},{"location":"limitations/#appropriate-use-cases","title":"Appropriate Use Cases","text":"<p>GlassAlpha is designed for: - Compliance documentation - Generating audit reports for regulatory review - Model validation - Testing for bias and performance issues - Decision support - Augmenting human decision-making processes - Development workflows - Understanding model behavior during development</p>"},{"location":"limitations/#important-limitations","title":"Important Limitations","text":"<p>GlassAlpha should NOT be used as: - Sole basis for deployment decisions without human review - Substitute for human judgment in high-stakes decisions - Real-time system component requiring sub-second responses - Adversarial defense where explanations might be exploited</p>"},{"location":"limitations/#risk-considerations","title":"Risk Considerations","text":"<p>Be aware of: - Model limitations affecting fairness and accuracy - Data quality issues that impact audit validity - Explanation limitations in complex or adversarial scenarios - Regulatory interpretation requiring legal expertise</p>"},{"location":"limitations/#technical-limitations","title":"Technical Limitations","text":""},{"location":"limitations/#model-support","title":"Model Support","text":"<p>Fully Supported: - XGBoost (with native TreeSHAP) - LightGBM (with native TreeSHAP) - Logistic Regression (with KernelSHAP) - Generic scikit-learn classifiers (with KernelSHAP)</p> <p>Not Currently Supported: - Neural networks and deep learning models - Large language models (LLMs) - Computer vision models - Time series models - Multi-output or structured prediction models</p>"},{"location":"limitations/#explanation-methods","title":"Explanation Methods","text":"<p>Available: - TreeSHAP - Exact Shapley values for tree models (fast, accurate) - KernelSHAP - Model-agnostic explanations (slower, approximate)</p> <p>Limitations: - TreeSHAP only works with tree-based models - KernelSHAP can be slow for complex models - Explanations show feature importance, not causal impact - Local explanations may not represent global model behavior</p>"},{"location":"limitations/#data-requirements","title":"Data Requirements","text":"<p>Supported Formats: - CSV, Parquet, Feather, Pickle - Tabular data with mixed data types - Missing values (with preprocessing options)</p> <p>Requirements: - Well-defined target variable for supervised learning - Protected attributes identifiable in data - Sufficient sample sizes for statistical testing - Reasonable feature-to-sample ratios</p>"},{"location":"limitations/#potential-future-enhancement-areas","title":"Potential Future Enhancement Areas","text":"<p>GlassAlpha may evolve to include: - Enhanced model type support based on user needs - Additional explanation methods for specialized use cases - Extended compliance framework coverage - Integration capabilities with enterprise workflows</p> <p>These enhancements depend on community contributions and enterprise customer requirements.</p>"},{"location":"limitations/#support-and-community","title":"Support and Community","text":""},{"location":"limitations/#getting-help","title":"Getting Help","text":"<ul> <li>Documentation: Comprehensive guides and examples</li> <li>Community: GitHub Discussions for user questions</li> <li>Issues: GitHub Issues for bug reports</li> <li>Enterprise: Dedicated support for commercial users</li> </ul>"},{"location":"limitations/#contributing","title":"Contributing","text":"<p>Help improve GlassAlpha: - Code contributions: See Contributing Guide - Bug reports: GitHub Issues - Feature suggestions: GitHub Discussions - Documentation: Help improve clarity and coverage</p>"},{"location":"limitations/#professional-standards","title":"Professional Standards","text":"<p>GlassAlpha maintains professional standards appropriate for regulated industries:</p> <ul> <li>Quality assurance through comprehensive testing</li> <li>Documentation standards for regulatory review</li> <li>Reproducibility guarantees for audit integrity</li> <li>Security practices for sensitive data handling</li> <li>Compliance focus aligned with regulatory requirements</li> </ul> <p>This ensures GlassAlpha serves as a reliable foundation for ML governance and compliance in professional environments.</p> <p>GlassAlpha: Professional ML auditing for regulated industries.</p>"},{"location":"security/","title":"Security Policy","text":"<p>Do not create public issues for security vulnerabilities, instead contact us at security@glassalpha.com</p>"},{"location":"security/#our-security-commitment","title":"Our Security Commitment","text":"<p>GlassAlpha is designed for regulated industries requiring high trust and transparency. Security is fundamental to our mission of providing audit-ready ML compliance tools.</p>"},{"location":"security/#reporting-security-vulnerabilities","title":"Reporting Security Vulnerabilities","text":"<p>If you discover a security vulnerability in GlassAlpha, please help us protect our users by reporting it responsibly:</p>"},{"location":"security/#how-to-report","title":"How to Report","text":"<ul> <li>Email: security@glassalpha.com</li> <li>Response Time: We aim to acknowledge reports within 48 hours</li> <li>Process: We will investigate all reports and provide updates on our progress</li> </ul>"},{"location":"security/#what-to-include","title":"What to Include","text":"<ul> <li>Description of the vulnerability and its potential impact</li> <li>Steps to reproduce the issue</li> <li>Your assessment of severity</li> <li>Any suggested fixes or mitigations</li> </ul>"},{"location":"security/#what-not-to-do","title":"What NOT to Do","text":"<ul> <li>Do not create public GitHub issues for security vulnerabilities</li> <li>Do not publicly disclose the vulnerability before we've had a chance to address it</li> </ul>"},{"location":"security/#supported-versions","title":"Supported Versions","text":"Version Supported 0.1.x :white_check_mark: (Pre-alpha development)"},{"location":"security/#security-design-principles","title":"Security Design Principles","text":"<p>GlassAlpha follows these security principles:</p> <ul> <li>On-Premise First: No external network calls or cloud dependencies by design</li> <li>Privacy by Default: No telemetry collection (opt-in only via <code>GLASSALPHA_TELEMETRY=on</code>)</li> <li>Data Protection: Never logs raw PII; all identifiers are hashed</li> <li>Reproducible Security: All operations are deterministic and auditable</li> </ul>"},{"location":"security/#security-features","title":"Security Features","text":"<ul> <li>Local Processing: All model analysis happens on your infrastructure</li> <li>No Data Transmission: Your data never leaves your environment</li> <li>Audit Trail: Complete lineage tracking with cryptographic hashes</li> <li>Deterministic Output: Identical results for compliance verification</li> </ul>"},{"location":"security/#reporting-security-vulnerabilities_1","title":"Reporting Security Vulnerabilities","text":"<p>Please report security vulnerabilities to us at security@glassalpha.com</p>"},{"location":"security/#questions","title":"Questions?","text":"<p>Contact us: security@glassalpha.com</p>"},{"location":"blog/","title":"Updates","text":"<p>Updates on our progress building the open-source AI compliance toolkit.</p>"},{"location":"blog/#recent-posts","title":"Recent Posts","text":""},{"location":"blog/2025/09/21/hello-world/","title":"Hello world","text":"<p>Hello, world. More to come...</p>"},{"location":"compliance/overview/","title":"Compliance Framework Overview","text":"<p>GlassAlpha addresses key regulatory frameworks governing AI and algorithmic decision-making. This guide explains how specific features map to regulatory requirements and provides configuration guidance for compliance.</p>"},{"location":"compliance/overview/#supported-regulatory-frameworks","title":"Supported Regulatory Frameworks","text":""},{"location":"compliance/overview/#eu-general-data-protection-regulation-gdpr","title":"EU General Data Protection Regulation (GDPR)","text":"<p>Jurisdiction: European Union Effective: May 25, 2018 Key Requirements: Data protection, consent, right to explanation</p>"},{"location":"compliance/overview/#equal-credit-opportunity-act-ecoa","title":"Equal Credit Opportunity Act (ECOA)","text":"<p>Jurisdiction: United States Effective: 1974 (amended multiple times) Key Requirements: Fair lending, non-discrimination in credit decisions</p>"},{"location":"compliance/overview/#fair-credit-reporting-act-fcra","title":"Fair Credit Reporting Act (FCRA)","text":"<p>Jurisdiction: United States Effective: 1970 (amended multiple times) Key Requirements: Accuracy, fairness, privacy in credit reporting</p>"},{"location":"compliance/overview/#eu-ai-act","title":"EU AI Act","text":"<p>Jurisdiction: European Union Status: Adopted April 2024, phased implementation through 2027 Key Requirements: Risk classification, transparency, human oversight, quality management</p> <p>Implementation Timeline: - August 2024: Prohibited practices banned - February 2025: General purpose AI model obligations - August 2026: High-risk AI system requirements - August 2027: Full implementation for all provisions</p>"},{"location":"compliance/overview/#fair-housing-act-fha","title":"Fair Housing Act (FHA)","text":"<p>Jurisdiction: United States Effective: 1968 Key Requirements: Non-discrimination in housing decisions</p>"},{"location":"compliance/overview/#employment-standards","title":"Employment Standards","text":"<p>Jurisdiction: Various (EEOC, state laws) Key Requirements: Non-discrimination in hiring and promotion</p>"},{"location":"compliance/overview/#gdpr-compliance","title":"GDPR Compliance","text":""},{"location":"compliance/overview/#article-22-automated-decision-making","title":"Article 22: Automated Decision-Making","text":"<p>Requirement: Individuals have the right not to be subject to decisions based solely on automated processing that produce legal or similarly significant effects.</p> <p>GlassAlpha Implementation:</p> <pre><code># GDPR-compliant configuration\naudit_profile: gdpr_compliance\n\n# Enable comprehensive explanation generation\nexplainers:\n  strategy: first_compatible\n  priority:\n    - treeshap      # Provides detailed feature attributions\n    - kernelshap    # Model-agnostic explanations\n  config:\n    treeshap:\n      max_samples: 1000\n      include_individual_explanations: true\n\n# Generate human-readable explanations\nreport:\n  include_sections:\n    - individual_explanations  # Article 22 requirement\n    - processing_logic         # Algorithm transparency\n    - data_sources             # Data provenance\n    - decision_factors         # Key decision factors\n</code></pre> <p>Key Features: - Individual Explanations: SHAP waterfall plots show how each feature contributed to specific decisions - Transparent Logic: Reports document the decision-making process in human-readable language - Data Provenance: Complete audit trail of data sources and transformations - Contestation Support: Detailed explanations enable individuals to challenge decisions</p>"},{"location":"compliance/overview/#article-13-14-information-to-data-subjects","title":"Article 13-14: Information to Data Subjects","text":"<p>Requirement: Provide meaningful information about automated decision-making logic.</p> <p>GlassAlpha Implementation: - Model Documentation: Comprehensive model cards with algorithm details - Feature Documentation: Clear explanations of input variables and their business meaning - Decision Boundaries: Visualizations of how decisions are made - Statistical Metrics: Performance statistics in accessible format</p>"},{"location":"compliance/overview/#ecoa-compliance-fair-lending","title":"ECOA Compliance (Fair Lending)","text":""},{"location":"compliance/overview/#regulatory-context","title":"Regulatory Context","text":"<p>The Equal Credit Opportunity Act prohibits credit discrimination and establishes specific requirements for credit decision-making. Regulation B (12 CFR 1002) implements ECOA with detailed compliance obligations.</p> <p>Prohibited Bases (15 USC 1691(a)): Creditors may not discriminate on the basis of: - Race or color - Religion - National origin - Sex or gender identity - Marital status - Age (with exceptions for legal capacity) - Receipt of public assistance - Good faith exercise of Consumer Credit Protection Act rights</p> <p>Disparate Impact Standard: Under ECOA, practices that have a disparate impact on protected classes may be unlawful even without discriminatory intent, unless the practice serves legitimate business needs that cannot reasonably be achieved by less discriminatory means.</p>"},{"location":"compliance/overview/#prohibition-of-discrimination","title":"Prohibition of Discrimination","text":"<p>Requirement: Creditors may not discriminate against applicants based on race, color, religion, national origin, sex, marital status, age, or public assistance status.</p> <p>GlassAlpha Implementation:</p> <pre><code># ECOA compliance configuration\naudit_profile: ecoa_compliance\n\ndata:\n  protected_attributes:\n    - race\n    - gender\n    - age_group\n    - marital_status\n    - national_origin\n\n# Strict bias detection thresholds\nmetrics:\n  fairness:\n    metrics:\n      - demographic_parity\n      - equal_opportunity\n      - equalized_odds\n    config:\n      demographic_parity:\n        threshold: 0.02          # 2% maximum disparity\n      equal_opportunity:\n        threshold: 0.02\n\ncompliance:\n  frameworks:\n    - ecoa\n  fairness_thresholds:\n    demographic_parity: 0.02   # Stricter than typical research (5%)\n    equal_opportunity: 0.02\n    statistical_significance: 0.01\n</code></pre> <p>Key Compliance Features:</p> <ol> <li>Disparate Impact Analysis</li> <li>Automated calculation of approval rate ratios by protected class</li> <li>Statistical significance testing with confidence intervals</li> <li> <p>Visual representations of disparities across demographic groups</p> </li> <li> <p>Adverse Action Reasons</p> </li> <li>SHAP explanations provide specific reasons for denials</li> <li>Feature importance rankings identify key decision factors</li> <li> <p>Individual prediction explanations support adverse action notices</p> </li> <li> <p>Model Monitoring</p> </li> <li>Ongoing bias detection across protected characteristics</li> <li>Statistical tests for demographic parity and equal opportunity</li> <li>Drift detection to identify changing discriminatory patterns</li> </ol>"},{"location":"compliance/overview/#documentation-requirements","title":"Documentation Requirements","text":"<p>ECOA Section 1002.13: Maintain records demonstrating compliance.</p> <p>GlassAlpha Evidence: - Audit Reports: Comprehensive bias analysis with statistical testing - Model Documentation: Detailed methodology and validation procedures - Decision Records: Individual prediction explanations and confidence scores - Monitoring Reports: Ongoing performance tracking across demographic groups</p>"},{"location":"compliance/overview/#configuration-patterns-by-framework","title":"Configuration Patterns by Framework","text":""},{"location":"compliance/overview/#financial-services-ecoafcra","title":"Financial Services (ECOA/FCRA)","text":"<pre><code>audit_profile: financial_compliance\n\ndata:\n  protected_attributes:\n    - race\n    - gender\n    - age_group\n    - marital_status\n\nmodel:\n  type: xgboost\n  validation:\n    cross_validation: true\n    bootstrap_confidence: true\n\nmetrics:\n  fairness:\n    metrics: [demographic_parity, equal_opportunity, equalized_odds]\n    config:\n      demographic_parity: { threshold: 0.02 }\n      statistical_tests: true\n      confidence_intervals: true\n\ncompliance:\n  frameworks: [ecoa, fcra]\n  documentation:\n    adverse_action_reasons: true\n    accuracy_statements: true\n    fairness_analysis: true\n</code></pre>"},{"location":"compliance/overview/#healthcare-gdprfdamedical-device-regulations","title":"Healthcare (GDPR/FDA/Medical Device Regulations)","text":"<pre><code>audit_profile: healthcare_compliance\n\ndata:\n  protected_attributes:\n    - age_group\n    - gender\n    - race\n    - disability_status\n\nexplainers:\n  priority: [treeshap, kernelshap]\n  config:\n    individual_explanations: true\n    clinical_interpretability: true\n\ncompliance:\n  frameworks: [gdpr, medical_device_regulation]\n  risk_assessment: high\n  human_oversight: required\n</code></pre>"},{"location":"compliance/overview/#employment-eeocgdpr","title":"Employment (EEOC/GDPR)","text":"<pre><code>audit_profile: employment_compliance\n\ndata:\n  protected_attributes:\n    - race\n    - gender\n    - age_group\n    - disability_status\n    - national_origin\n\nmetrics:\n  fairness:\n    metrics: [demographic_parity, equal_opportunity]\n    config:\n      four_fifths_rule: true    # 80% rule for adverse impact\n      statistical_significance: true\n\ncompliance:\n  frameworks: [eeoc_uniform_guidelines, gdpr]\n</code></pre>"},{"location":"compliance/overview/#best-practices","title":"Best Practices","text":""},{"location":"compliance/overview/#development-phase","title":"Development Phase","text":"<ol> <li>Early Compliance Integration</li> <li>Define regulatory requirements before model development</li> <li>Build fairness constraints into model training</li> <li> <p>Establish bias testing procedures from day one</p> </li> <li> <p>Documentation Standards</p> </li> <li>Maintain comprehensive model development records</li> <li>Document all design decisions and trade-offs</li> <li>Create audit trails for all data and model changes</li> </ol>"},{"location":"compliance/overview/#production-deployment","title":"Production Deployment","text":"<ol> <li>Ongoing Monitoring</li> <li>Implement continuous bias detection</li> <li>Monitor model performance across demographic groups</li> <li> <p>Track individual decision outcomes for patterns</p> </li> <li> <p>Incident Response</p> </li> <li>Establish procedures for bias detection alerts</li> <li>Maintain capability to explain any historical decision</li> <li>Document remediation actions and their effectiveness</li> </ol> <p>This compliance framework overview provides the foundation for using GlassAlpha in regulated environments. For specific regulatory guidance, consult with legal counsel and compliance experts familiar with your jurisdiction and use case.</p>"},{"location":"examples/ccpa-compliance-audit/","title":"CCPA Compliance Audit Tutorial","text":"<p>Complete walkthrough of performing a comprehensive ML audit on an automated decision-making system using GlassAlpha. This tutorial demonstrates how to audit consumer consent prediction models for compliance with the California Consumer Privacy Act and consumer rights protection.</p>"},{"location":"examples/ccpa-compliance-audit/#overview","title":"Overview","text":"<p>Businesses use machine learning models to predict consumer consent for automated decision-making and data processing activities. These models must comply with:</p> <ul> <li>CCPA Consumer Rights: Right to know, delete, opt-out of data sales, and non-discrimination</li> <li>Automated Decision-Making Transparency: Clear explanations of algorithmic decisions</li> <li>Data Minimization: Collection and use of only necessary personal information</li> <li>Non-Discrimination: Equal treatment regardless of privacy choices</li> </ul>"},{"location":"examples/ccpa-compliance-audit/#what-youll-learn","title":"What You'll Learn","text":"<ul> <li>How to configure GlassAlpha for CCPA compliance auditing</li> <li>Interpreting performance metrics for automated decision-making systems</li> <li>Understanding SHAP explanations for consumer consent transparency</li> <li>Identifying bias in automated decisions across demographic groups</li> <li>Generating regulatory-ready audit reports for California privacy compliance</li> </ul>"},{"location":"examples/ccpa-compliance-audit/#regulatory-context","title":"Regulatory Context","text":"<p>CCPA compliance requires:</p> <ul> <li>Consumer Privacy Rights: Right to know, access, delete, and opt-out of data sales</li> <li>Automated Decision-Making: Transparency and human intervention capabilities</li> <li>Non-Discrimination: Equal treatment regardless of privacy exercise</li> <li>Data Processing Transparency: Clear information about data collection and use</li> </ul>"},{"location":"examples/ccpa-compliance-audit/#prerequisites","title":"Prerequisites","text":"<ul> <li>GlassAlpha installed (Installation Guide)</li> <li>Basic understanding of CCPA and California consumer privacy law</li> <li>Familiarity with automated decision-making and consumer rights systems</li> </ul>"},{"location":"examples/ccpa-compliance-audit/#step-1-understanding-the-ccpa-compliance-dataset","title":"Step 1: Understanding the CCPA Compliance Dataset","text":""},{"location":"examples/ccpa-compliance-audit/#dataset-characteristics","title":"Dataset Characteristics","text":"<p>The CCPA compliance dataset contains:</p> <ul> <li>8,000 synthetic California consumer records</li> <li>14 features covering demographics, privacy preferences, and behavior</li> <li>Binary target: Consent for automated decisions (1) vs Opt-out (0)</li> <li>Protected attributes: Gender, age groups, income brackets</li> <li>CCPA-specific fields: Consumer rights exercised, profiling categories</li> </ul>"},{"location":"examples/ccpa-compliance-audit/#consumer-demographics","title":"Consumer Demographics","text":"<p>Age Distribution: - Young (18-24): 12% of consumers - Young Adult (25-34): 25% of consumers - Middle Age (35-49): 35% of consumers - Senior (50-64): 20% of consumers - Elderly (65+): 8% of consumers</p> <p>California Regions: - Los Angeles: 35% - San Francisco: 25% - San Diego: 15% - Sacramento: 10% - Other California: 15%</p> <p>Consumer Rights Exercised: - Do Not Sell Requests: 10% - Data Deletion Requests: 2% - Data Portability Requests: 5%</p>"},{"location":"examples/ccpa-compliance-audit/#key-features","title":"Key Features","text":"<p>Demographic Information: - <code>age</code> - Consumer age (18-85) - <code>gender</code> - Consumer gender (protected attribute) - <code>age_group</code> - Age categorization (protected attribute) - <code>income_bracket</code> - Income categorization (socioeconomic analysis) - <code>california_region</code> - Geographic region within California</p> <p>Privacy Preferences: - <code>marketing_consent_given</code> - Explicit marketing consent status - <code>data_sharing_opt_out</code> - Data sharing opt-out status - <code>tracking_cookies_accepted</code> - Cookie consent status - <code>location_services_enabled</code> - Location data consent</p> <p>Behavioral Indicators: - <code>online_purchase_frequency</code> - Online shopping frequency (0-60 purchases/year) - <code>subscription_services</code> - Subscription count (0-12 services) - <code>social_media_activity</code> - Social media engagement (0-100) - <code>mobile_app_usage</code> - App interaction frequency (0-200 sessions)</p> <p>CCPA Compliance Fields: - <code>automated_decision_consent</code> - Consent for automated decision-making - <code>data_portability_requested</code> - Data export requests - <code>data_deletion_requested</code> - Data deletion requests - <code>do_not_sell_requested</code> - Data sales opt-out requests - <code>profiling_category</code> - Type of automated profiling (marketing, credit, employment, insurance)</p>"},{"location":"examples/ccpa-compliance-audit/#step-2-configuration-setup","title":"Step 2: Configuration Setup","text":"<p>Create a configuration file for the CCPA compliance audit:</p> <pre><code># ccpa_compliance_audit.yaml\naudit_profile: ccpa_compliance\n\n# Reproducibility for regulatory compliance\nreproducibility:\n  random_seed: 42\n\n# Data configuration\ndata:\n  path: ~/.glassalpha/data/ccpa_compliance.csv\n  target_column: automated_decision_consent\n  protected_attributes:\n    - gender\n    - age_group\n    - income_bracket\n\n# XGBoost model for automated decision consent prediction\nmodel:\n  type: xgboost\n  params:\n    objective: binary:logistic\n    eval_metric: logloss\n    n_estimators: 100\n    max_depth: 6\n    learning_rate: 0.1\n    subsample: 0.8\n    colsample_bytree: 0.8\n    random_state: 42\n\n# Explanation configuration\nexplainers:\n  strategy: first_compatible\n  priority:\n    - treeshap    # XGBoost supports TreeSHAP for CCPA transparency\n    - kernelshap  # Fallback for any model type\n\n# CCPA-specific metrics\nmetrics:\n  performance:\n    metrics:\n      - accuracy\n      - precision    # Important for consent accuracy\n      - recall       # Important for consumer rights\n      - f1\n      - auc_roc     # Overall discriminative ability\n\n  fairness:\n    metrics:\n      - demographic_parity    # Equal consent rates across groups\n      - equal_opportunity     # Equal TPR for consent prediction\n      - predictive_parity      # Equal precision across demographic groups\n    config:\n      # CCPA-compliant thresholds\n      demographic_parity:\n        threshold: 0.05  # Maximum 5% difference\n      equal_opportunity:\n        threshold: 0.05\n      predictive_parity:\n        threshold: 0.05\n\n# Professional CCPA audit report\nreport:\n  template: standard_audit\n  styling:\n    color_scheme: professional\n    compliance_statement: true\n</code></pre>"},{"location":"examples/ccpa-compliance-audit/#step-3-running-the-audit","title":"Step 3: Running the Audit","text":"<p>Execute the CCPA compliance audit:</p> <pre><code># Generate comprehensive audit\nglassalpha audit \\\n  --config ccpa_compliance_audit.yaml \\\n  --output ccpa_compliance_audit.pdf \\\n  --strict\n</code></pre>"},{"location":"examples/ccpa-compliance-audit/#expected-execution","title":"Expected Execution","text":"<pre><code>GlassAlpha Audit Generation\n========================================\nLoading configuration from: ccpa_compliance_audit.yaml\nAudit profile: ccpa_compliance\nStrict mode: ENABLED\n\u26a0\ufe0f Strict mode enabled - enforcing regulatory compliance\n\nRunning audit pipeline...\n  Loading data and initializing components...\n\u2713 Audit pipeline completed in 3.45s\n\n\ud83d\udcca Audit Summary:\n  \u2705 Performance metrics: 5 computed\n     \u2705 accuracy: 81.2%\n  \u2696\ufe0f Fairness metrics: 9/9 computed\n     \u2705 demographic_parity: 0.018 (within 5% threshold)\n  \ud83d\udd0d Explanations: \u2705 Global feature importance\n     Most important: marketing_consent_given (+0.298)\n  \ud83d\udccb Dataset: 8,000 samples, 14 features\n  \ud83d\udd27 Components: 3 selected\n     Model: xgboost\n\nGenerating PDF report: ccpa_compliance_audit.pdf\n\u2713 Saved plot to /tmp/plots/shap_importance.png\n\u2713 Saved plot to /tmp/plots/performance_summary.png\n\u2713 Saved plot to /tmp/plots/fairness_analysis.png\n\u2713 Saved plot to /tmp/plots/confusion_matrix.png\n\n\ud83c\udf89 Audit Report Generated Successfully!\n==================================================\n\ud83d\udcc1 Output: /path/to/ccpa_compliance_audit.pdf\n\ud83d\udcca Size: 1,234,567 bytes (1.2 MB)\n\u23f1\ufe0f Total time: 4.67s\n   \u2022 Pipeline: 3.45s\n   \u2022 PDF generation: 1.22s\n\n\ud83d\udee1\ufe0f Strict mode: Report meets regulatory compliance requirements\n</code></pre>"},{"location":"examples/ccpa-compliance-audit/#step-4-interpreting-the-results","title":"Step 4: Interpreting the Results","text":""},{"location":"examples/ccpa-compliance-audit/#model-performance-analysis","title":"Model Performance Analysis","text":"<p>Overall Performance: - Accuracy: 81.2% - Model correctly predicts 81% of automated decision consent - AUC-ROC: 0.873 - Strong discriminative ability for consent prediction - Precision: 79.4% - Of predicted consents, 79% are actually granted - Recall: 74.8% - Model identifies 75% of all actual consent grants</p> <p>CCPA Compliance Interpretation: - Consumer Rights Accuracy: 81% accuracy supports consumer choice respect - False Positive Rate: 21% of predicted consents are actually opt-outs - False Negative Rate: 25% of actual consents are missed - Non-Discrimination: Model respects consumer privacy choices</p>"},{"location":"examples/ccpa-compliance-audit/#shap-explanations","title":"SHAP Explanations","text":"<p>Global Feature Importance (Top 5):</p> <ol> <li><code>marketing_consent_given</code> (+0.298)</li> <li>Most important CCPA compliance factor</li> <li>Explicit marketing consent strongly predicts automated decision consent</li> <li> <p>Demonstrates respect for consumer privacy preferences</p> </li> <li> <p><code>online_purchase_frequency</code> (+0.267)</p> </li> <li>Purchase behavior strongly correlates with consent likelihood</li> <li>Engaged customers more willing to consent to automated decisions</li> <li> <p>Indicates legitimate interest basis for processing</p> </li> <li> <p><code>subscription_services</code> (+0.234)</p> </li> <li>Subscription engagement predicts consent willingness</li> <li>Ongoing service relationships increase consent probability</li> <li> <p>Supports relationship-based consent justification</p> </li> <li> <p><code>tracking_cookies_accepted</code> (+0.198)</p> </li> <li>Cookie consent status influences automated decision consent</li> <li>Privacy-aware consumers show consistent behavior patterns</li> <li> <p>Important for understanding consumer privacy preferences</p> </li> <li> <p><code>california_region</code> (+0.156)</p> </li> <li>Geographic location within California affects consent patterns</li> <li>May reflect regional privacy awareness differences</li> <li>Requires monitoring for geographic discrimination</li> </ol> <p>Individual Consumer Example: For a 32-year-old consumer in Los Angeles with high engagement:</p> <ul> <li>Base consent probability: 0.68 (68% population average)</li> <li>Marketing consent (given): +0.16 probability increase</li> <li>Online purchases (25/year): +0.14 probability increase</li> <li>Subscriptions (4 services): +0.12 probability increase</li> <li>Cookies accepted (yes): +0.08 probability increase</li> <li>California region (LA): +0.04 probability increase</li> <li>Final consent probability: 0.92 (92% - high confidence in consent)</li> </ul>"},{"location":"examples/ccpa-compliance-audit/#fairness-analysis-results","title":"Fairness Analysis Results","text":"<p>Demographic Parity Analysis:</p> <p>Age Group Consent Rates: - Young (18-24): 64.5% predicted consent rate - Young Adult (25-34): 72.1% predicted consent rate - Middle Age (35-49): 78.3% predicted consent rate - Senior (50-64): 82.7% predicted consent rate - Elderly (65+): 85.2% predicted consent rate - Maximum difference: 20.7% (Young vs. Elderly) - Conclusion: \u26a0\ufe0f Significant age-based disparities detected</p> <p>Income Bracket Analysis: - Low Income: 71.8% predicted consent rate - Middle Income: 76.4% predicted consent rate - Upper Middle: 79.2% predicted consent rate - High Income: 81.6% predicted consent rate - Maximum difference: 9.8% (exceeds 5% threshold) - Conclusion: \u26a0\ufe0f Income-based disparities detected</p> <p>Predictive Parity Analysis: - Young: 71.2% precision (of flagged young consumers, 71% actually consent) - High Income: 83.4% precision - Difference: 12.2% (exceeds 5% threshold) - Conclusion: \u26a0\ufe0f Socioeconomic accuracy disparity in consent prediction</p>"},{"location":"examples/ccpa-compliance-audit/#risk-assessment","title":"Risk Assessment","text":"<p>High Risk Findings:</p> <ol> <li>Age and Income-Based Disparities</li> <li>20.7% difference in consent rates across age groups</li> <li>9.8% difference across income brackets</li> <li>May indicate discrimination in automated decision-making</li> <li> <p>Could result in CCPA non-discrimination violations</p> </li> <li> <p>Consumer Rights Impact</p> </li> <li>10% of consumers have exercised \"Do Not Sell\" rights</li> <li>Model must respect these privacy choices</li> <li>Requires enhanced transparency for automated decisions</li> </ol> <p>Medium Risk Findings:</p> <ol> <li>Consent Prediction Accuracy</li> <li>19% false positive rate may lead to unwanted automated decisions</li> <li>25% false negative rate misses consent opportunities</li> <li>Balance needed between automation efficiency and consumer rights</li> </ol> <p>Compliance Assessment:</p> <ul> <li>CCPA Consumer Rights: \u26a0\ufe0f REVIEW - Disparities require attention</li> <li>Automated Decision-Making: \u2705 PASS - Transparency mechanisms in place</li> <li>Non-Discrimination: \u274c FAIL - Age and income bias detected</li> <li>Data Processing Transparency: \u2705 PASS - Clear data usage documentation</li> </ul>"},{"location":"examples/ccpa-compliance-audit/#step-5-regulatory-recommendations","title":"Step 5: Regulatory Recommendations","text":""},{"location":"examples/ccpa-compliance-audit/#immediate-actions-required","title":"Immediate Actions Required","text":"<ol> <li> <p>Address Demographic Disparities <pre><code># Consider CCPA-compliant approaches:\n# - Demographic-stratified consent prediction models\n# - Enhanced consumer rights verification\n# - Human oversight for high-risk automated decisions\n</code></pre></p> </li> <li> <p>Enhance Consumer Rights Mechanisms</p> </li> <li>Implement clear opt-out mechanisms for automated decisions</li> <li>Provide meaningful explanations for algorithmic decisions</li> <li> <p>Ensure non-discrimination regardless of privacy choices</p> </li> <li> <p>Transparency Enhancement</p> </li> <li>Develop consumer-friendly automated decision explanations</li> <li>Implement right to human intervention processes</li> <li>Document legitimate interest basis for processing</li> </ol>"},{"location":"examples/ccpa-compliance-audit/#long-term-compliance-strategy","title":"Long-term Compliance Strategy","text":"<ol> <li>Ongoing CCPA Monitoring</li> <li>Regular bias audits on automated decision-making models</li> <li>Consumer rights exercise tracking and analysis</li> <li> <p>Model performance monitoring across demographic groups</p> </li> <li> <p>Consumer Rights Management</p> </li> <li>Automated consumer rights request processing</li> <li>Regular privacy preference verification</li> <li> <p>Enhanced transparency for data processing activities</p> </li> <li> <p>Regulatory Documentation</p> </li> <li>Maintain comprehensive consumer rights documentation</li> <li>Document non-discrimination measures</li> <li>Prepare regulatory examination materials</li> </ol>"},{"location":"examples/ccpa-compliance-audit/#step-6-business-impact-analysis","title":"Step 6: Business Impact Analysis","text":""},{"location":"examples/ccpa-compliance-audit/#ccpa-compliance-impact","title":"CCPA Compliance Impact","text":"<p>Current Model: - Automated decision consent prediction: 81% accuracy - Consumer rights support: Enables privacy choice respect - Business efficiency: Automated consent management at scale - Regulatory compliance: Supports CCPA requirements</p> <p>Consumer Rights Benefits: - Privacy protection: Respects consumer data choices - Transparency: Clear automated decision-making explanations - Non-discrimination: Equal treatment regardless of privacy preferences - Trust building: Demonstrates commitment to consumer rights</p>"},{"location":"examples/ccpa-compliance-audit/#regulatory-risk-mitigation","title":"Regulatory Risk Mitigation","text":"<p>Before Audit: - Potential CCPA violations if bias undetected - Consumer rights non-compliance without transparency - Regulatory scrutiny without proper consumer protections</p> <p>After Audit: - Documented compliance with CCPA consumer rights requirements - Demonstrated fairness across demographic groups - Clear audit trail for California Attorney General review</p>"},{"location":"examples/ccpa-compliance-audit/#step-7-next-steps-and-recommendations","title":"Step 7: Next Steps and Recommendations","text":""},{"location":"examples/ccpa-compliance-audit/#technical-improvements","title":"Technical Improvements","text":"<ol> <li>Model Enhancement</li> <li>Demographic-aware consent prediction modeling</li> <li>Integration with consumer rights management systems</li> <li> <p>Enhanced transparency mechanisms for automated decisions</p> </li> <li> <p>CCPA Compliance Features</p> </li> <li>Automated consumer rights request processing</li> <li>Consent withdrawal tracking and implementation</li> <li> <p>Data processing necessity and proportionality assessments</p> </li> <li> <p>Advanced Analytics</p> </li> <li>Consumer rights exercise pattern analysis</li> <li>Automated decision impact assessment</li> <li>Privacy preference trend monitoring</li> </ol>"},{"location":"examples/ccpa-compliance-audit/#operational-changes","title":"Operational Changes","text":"<ol> <li>Consumer Rights Integration</li> <li>Real-time consumer rights dashboard</li> <li>Automated privacy preference processing</li> <li> <p>Consumer education on automated decision rights</p> </li> <li> <p>CCPA Program Management</p> </li> <li>California Attorney General reporting</li> <li>Consumer rights exercise tracking</li> <li> <p>Privacy impact assessment maintenance</p> </li> <li> <p>Transparency Enhancement</p> </li> <li>Consumer-friendly automated decision explanations</li> <li>Right to human intervention implementation</li> <li>Clear privacy policy communications</li> </ol>"},{"location":"examples/ccpa-compliance-audit/#conclusion","title":"Conclusion","text":"<p>This CCPA compliance audit revealed an effective automated decision consent model with important demographic disparities that require immediate attention for full California consumer privacy compliance. The audit demonstrated:</p> <p>Strengths: - Good overall performance (81% accuracy) for consent management - Strong correlation between privacy preferences and consent behavior - Comprehensive bias detection across multiple demographic dimensions - CCPA-compliant transparency through SHAP explanations</p> <p>Critical Issues: - Age and income discrimination exceeding regulatory thresholds - Need for enhanced consumer rights mechanisms - Consumer non-discrimination requirements</p> <p>Action Plan: 1. Address demographic disparities through model refinement 2. Implement enhanced consumer rights transparency 3. Conduct comprehensive CCPA compliance review 4. Deploy with ongoing consumer rights monitoring</p> <p>This tutorial demonstrates how GlassAlpha enables thorough, regulatory-ready ML auditing for automated decision-making systems, providing the detailed analysis necessary for responsible AI deployment under California consumer privacy law.</p>"},{"location":"examples/ccpa-compliance-audit/#additional-resources","title":"Additional Resources","text":"<ul> <li>Configuration Guide - Detailed configuration options</li> <li>CLI Reference - Complete command documentation</li> <li>Compliance Overview - CCPA regulatory framework guidance</li> <li>Troubleshooting Guide - Common issues and solutions</li> </ul> <p>For questions or support, please visit our GitHub repository or contact our team.</p>"},{"location":"examples/configuration-comparison/","title":"Configuration Comparison: Audit Profiles and Options","text":"<p>This example demonstrates how different GlassAlpha configurations affect audit outcomes, helping you choose the right settings for your use case and regulatory requirements.</p>"},{"location":"examples/configuration-comparison/#overview","title":"Overview","text":"<p>Understanding configuration impact is crucial for:</p> <ul> <li>Compliance requirements - Different regulations need different approaches</li> <li>Performance optimization - Balancing speed vs comprehensiveness</li> <li>Audit quality - Selecting appropriate metrics and explanations</li> <li>Organizational needs - Matching audit depth to stakeholder requirements</li> </ul> <p>We'll compare four configuration approaches using the same German Credit dataset:</p> <ol> <li>Minimal Configuration - Fastest execution, basic audit</li> <li>Standard Compliance - Balanced approach for general use</li> <li>Strict Regulatory - Comprehensive audit for regulated industries</li> <li>Performance Optimized - Speed-focused for large-scale operations</li> </ol>"},{"location":"examples/configuration-comparison/#configuration-comparison-matrix","title":"Configuration Comparison Matrix","text":"Aspect Minimal Standard Strict Performance Execution Time ~10 seconds ~30 seconds ~60 seconds ~15 seconds Explainer Depth Basic SHAP Full SHAP Multiple methods Sampled SHAP Metrics Coverage Core only Comprehensive All + custom Performance focus Validation Level Basic Standard Comprehensive Minimal Reproducibility Basic Full Auditable Full Report Detail Summary Complete Regulatory Streamlined Use Case Learning Production Compliance Scale operations"},{"location":"examples/configuration-comparison/#1-minimal-configuration","title":"1. Minimal Configuration","text":"<p>File: <code>configs/german_credit_simple.yaml</code></p> <pre><code># Minimal configuration for quick testing\naudit_profile: tabular_basic\nreproducibility:\n  random_seed: 42\n\ndata:\n  path: german_credit_data.csv\n  target_column: credit_risk\n  protected_attributes: [gender]\n\nmodel:\n  type: xgboost\n\nexplainers:\n  priority: [treeshap]\n  config:\n    treeshap:\n      max_samples: 100  # Fast execution\n\nmetrics:\n  performance: [accuracy, auc_roc]\n  fairness: [demographic_parity]\n\nreport:\n  template: summary\n</code></pre> <p>Command: <pre><code>glassalpha audit --config configs/german_credit_simple.yaml --output minimal_audit.pdf\n</code></pre></p> <p>Results: - Execution: ~10 seconds - Report size: 8 pages - Key findings: Basic performance (77% accuracy) and simple bias check - Use case: Quick validation, learning, proof-of-concept</p> <p>Trade-offs: - \u2705 Fast execution for rapid iteration - \u2705 Simple results easy to understand - \u274c Limited compliance value for regulations - \u274c Shallow analysis may miss important biases</p>"},{"location":"examples/configuration-comparison/#2-standard-compliance-configuration","title":"2. Standard Compliance Configuration","text":"<p>File: <code>configs/example_audit.yaml</code></p> <pre><code># Standard configuration for production use\naudit_profile: tabular_compliance\nstrict_mode: false\nreproducibility:\n  random_seed: 42\n  track_git_sha: true\n\ndata:\n  path: german_credit_data.csv\n  target_column: credit_risk\n  protected_attributes: [gender, age_group]\n  feature_columns: auto  # Auto-detect features\n\nmodel:\n  type: xgboost\n  params:\n    n_estimators: 100\n    max_depth: 6\n    learning_rate: 0.1\n  validation:\n    cross_validation: true\n    folds: 5\n\nexplainers:\n  priority: [treeshap, kernelshap]\n  config:\n    treeshap:\n      max_samples: 500\n      include_individual_explanations: true\n    kernelshap:\n      n_samples: 100\n\nmetrics:\n  performance: [accuracy, precision, recall, f1, auc_roc]\n  fairness: [demographic_parity, equal_opportunity, equalized_odds]\n  drift: [psi, kl_divergence]\n\nreport:\n  template: standard_audit\n  include_sections:\n    - executive_summary\n    - model_performance\n    - fairness_analysis\n    - explanations\n    - reproducibility\n\nvalidation:\n  schema_validation: true\n  data_quality_checks: true\n</code></pre> <p>Command: <pre><code>glassalpha audit --config configs/example_audit.yaml --output standard_audit.pdf\n</code></pre></p> <p>Results: - Execution: ~30 seconds - Report size: 18 pages - Key findings: Comprehensive analysis with 77% accuracy, gender bias detected - Use case: Production deployments, general compliance</p> <p>Analysis: - \u2705 Balanced approach between speed and depth - \u2705 Good compliance coverage for most use cases - \u2705 Comprehensive metrics without overwhelming detail - \u26a0\ufe0f May not meet strictest regulatory requirements</p>"},{"location":"examples/configuration-comparison/#3-strict-regulatory-configuration","title":"3. Strict Regulatory Configuration","text":"<p>File: <code>configs/gdpr_compliance.yaml</code></p> <pre><code># Strict configuration for regulatory compliance\naudit_profile: financial_compliance\nstrict_mode: true  # Enforces regulatory requirements\nreproducibility:\n  random_seed: 42\n  track_git_sha: true\n  track_environment: true\n  require_data_hash: true\n\ndata:\n  path: german_credit_data.csv\n  target_column: credit_risk\n  protected_attributes: [gender, age_group, personal_status]\n  feature_columns: auto\n  schema_validation: strict\n\nmodel:\n  type: xgboost\n  params:\n    n_estimators: 100\n    max_depth: 6\n    learning_rate: 0.1\n    random_state: 42\n  validation:\n    cross_validation: true\n    folds: 10  # More robust validation\n    stratified: true\n    bootstrap_confidence: true\n\nexplainers:\n  strategy: first_compatible\n  priority: [treeshap, kernelshap]\n  config:\n    treeshap:\n      max_samples: 1000  # Maximum accuracy\n      include_individual_explanations: true\n      check_additivity: true\n    kernelshap:\n      n_samples: 500\n      background_size: 200\n\nmetrics:\n  performance: [accuracy, precision, recall, f1, auc_roc, classification_report]\n  fairness: [demographic_parity, equal_opportunity, equalized_odds, predictive_parity]\n  drift: [psi, kl_divergence, ks_test, js_divergence]\n  fairness_thresholds:\n    demographic_parity: 0.02  # Strict threshold\n    statistical_significance: 0.01\n\ncompliance:\n  frameworks: [gdpr, ecoa, fcra]\n  documentation:\n    model_cards: true\n    dataset_cards: true\n    bias_assessment: true\n    audit_trail: complete\n\nreport:\n  template: regulatory_compliance\n  audience: regulators\n  include_sections:\n    - executive_summary\n    - regulatory_assessment\n    - model_performance\n    - bias_analysis\n    - individual_explanations\n    - risk_assessment\n    - mitigation_recommendations\n    - technical_appendix\n    - reproducibility\n    - manifest\n\nvalidation:\n  schema_validation: strict\n  data_quality_checks: comprehensive\n  statistical_tests: true\n  confidence_intervals: true\n\nmanifest:\n  include_config_hash: true\n  include_data_hash: true\n  include_model_hash: true\n  include_environment: true\n</code></pre> <p>Command: <pre><code>glassalpha audit --config configs/gdpr_compliance.yaml --output regulatory_audit.pdf --strict\n</code></pre></p> <p>Results: - Execution: ~60 seconds - Report size: 28 pages - Key findings: Comprehensive regulatory analysis, detailed bias assessment, complete audit trail - Use case: Regulatory submissions, legal compliance, auditor review</p> <p>Regulatory Features: - \u2705 Complete audit trail with all hashes and environment info - \u2705 Strict validation catching configuration errors - \u2705 Comprehensive bias testing across multiple protected attributes - \u2705 Statistical rigor with confidence intervals and significance tests - \u2705 Regulatory alignment with GDPR, ECOA, FCRA requirements - \u274c Slower execution due to comprehensive analysis</p>"},{"location":"examples/configuration-comparison/#4-performance-optimized-configuration","title":"4. Performance Optimized Configuration","text":"<p>File: <code>configs/fraud_detection.yaml</code></p> <pre><code># Performance-optimized configuration for scale\naudit_profile: tabular_performance\nreproducibility:\n  random_seed: 42\n\ndata:\n  path: german_credit_data.csv\n  target_column: credit_risk\n  protected_attributes: [gender]\n\nmodel:\n  type: xgboost\n  params:\n    n_estimators: 50  # Fewer trees for speed\n    max_depth: 4      # Lower complexity\n    learning_rate: 0.2 # Faster convergence\n  validation:\n    cross_validation: false  # Skip CV for speed\n\nexplainers:\n  priority: [treeshap]\n  config:\n    treeshap:\n      max_samples: 50   # Minimal sampling\n      approximate: true # Use approximations\n\nmetrics:\n  performance: [accuracy, auc_roc]  # Essential metrics only\n  fairness: [demographic_parity]\n\nperformance:\n  n_jobs: -1          # Use all CPU cores\n  low_memory_mode: false\n  parallel_processing: true\n\nreport:\n  template: performance_summary\n  include_sections:\n    - executive_summary\n    - key_metrics\n    - basic_explanations\n\nvalidation:\n  schema_validation: false  # Skip for speed\n  data_quality_checks: false\n</code></pre> <p>Command: <pre><code>glassalpha audit --config configs/fraud_detection.yaml --output performance_audit.pdf\n</code></pre></p> <p>Results: - Execution: ~15 seconds - Report size: 10 pages - Key findings: Core performance metrics, basic bias check - Use case: High-volume processing, monitoring pipelines, quick checks</p> <p>Optimization Features: - \u2705 Fast execution suitable for automated pipelines - \u2705 Resource efficient for large-scale operations - \u2705 Core insights without overwhelming detail - \u274c Limited depth for thorough compliance analysis - \u274c Reduced validation may miss data issues</p>"},{"location":"examples/configuration-comparison/#side-by-side-results-comparison","title":"Side-by-Side Results Comparison","text":""},{"location":"examples/configuration-comparison/#model-performance-consistency","title":"Model Performance Consistency","text":"<p>All configurations train on the same data with similar parameters:</p> Configuration Accuracy AUC-ROC Precision Recall F1 Minimal 77.0% 0.758 0.65 0.42 0.51 Standard 76.8% 0.761 0.64 0.43 0.52 Regulatory 76.9% 0.760 0.64 0.43 0.51 Performance 76.2% 0.752 0.63 0.41 0.50 <p>Key Insight: Model performance remains consistent across configurations. Differences come from validation depth and reporting detail.</p>"},{"location":"examples/configuration-comparison/#bias-detection-results","title":"Bias Detection Results","text":"<p>Gender bias analysis across configurations:</p> Configuration Demographic Parity Statistical Significance Confidence Interval Minimal 0.089 Not tested Not provided Standard 0.087 p &lt; 0.05 [0.042, 0.132] Regulatory 0.089 p &lt; 0.001 [0.051, 0.127] Performance 0.088 Not tested Not provided <p>Key Insight: All configurations detect the same underlying bias, but regulatory provides the statistical rigor needed for compliance.</p>"},{"location":"examples/configuration-comparison/#execution-time-analysis","title":"Execution Time Analysis","text":"Configuration Data Loading Model Training Explanations Metrics Report Gen Total Minimal 2s 3s 3s 1s 1s 10s Standard 3s 5s 15s 4s 3s 30s Regulatory 4s 8s 35s 8s 5s 60s Performance 2s 2s 2s 1s 1s 8s <p>Key Insight: Explanation generation is the primary time driver. SHAP sampling levels directly impact execution time.</p>"},{"location":"examples/configuration-comparison/#configuration-selection-guide","title":"Configuration Selection Guide","text":""},{"location":"examples/configuration-comparison/#choose-minimal-when","title":"Choose Minimal when:","text":"<ul> <li>Learning GlassAlpha capabilities</li> <li>Rapid prototyping and iteration</li> <li>Basic proof-of-concept demonstrations</li> <li>Resource-constrained environments</li> <li>Quick validation of data/model setup</li> </ul>"},{"location":"examples/configuration-comparison/#choose-standard-when","title":"Choose Standard when:","text":"<ul> <li>Production model deployment</li> <li>General compliance requirements</li> <li>Balanced speed/comprehensiveness needs</li> <li>Regular audit reporting</li> <li>Stakeholder presentations</li> </ul>"},{"location":"examples/configuration-comparison/#choose-regulatory-when","title":"Choose Regulatory when:","text":"<ul> <li>Regulatory submission required</li> <li>Legal compliance critical</li> <li>External auditor review</li> <li>High-risk applications (finance, healthcare)</li> <li>Complete documentation needed</li> </ul>"},{"location":"examples/configuration-comparison/#choose-performance-when","title":"Choose Performance when:","text":"<ul> <li>High-volume automated processing</li> <li>Monitoring pipelines</li> <li>Resource optimization critical</li> <li>Quick bias checks needed</li> <li>Large-scale model validation</li> </ul>"},{"location":"examples/configuration-comparison/#advanced-configuration-patterns","title":"Advanced Configuration Patterns","text":""},{"location":"examples/configuration-comparison/#environment-specific-overrides","title":"Environment-Specific Overrides","text":"<pre><code># Base configuration with environment-specific overrides\nglassalpha audit \\\n  --config configs/example_audit.yaml \\\n  --override configs/gdpr_compliance.yaml \\\n  --output production_audit.pdf \\\n  --strict\n\n# Dynamic configuration for different models\nglassalpha audit \\\n  --config configs/example_audit.yaml \\\n  --override '{\"model\": {\"type\": \"lightgbm\", \"params\": {\"num_leaves\": 31}}}' \\\n  --output lightgbm_comparison.pdf\n</code></pre>"},{"location":"examples/configuration-comparison/#profile-switching","title":"Profile Switching","text":"<pre><code># Switch between audit profiles for same data\nglassalpha audit --config config.yaml --profile basic_compliance --output basic.pdf\nglassalpha audit --config config.yaml --profile strict_compliance --output strict.pdf\nglassalpha audit --config config.yaml --profile performance --output fast.pdf\n</code></pre>"},{"location":"examples/configuration-comparison/#configuration-testing","title":"Configuration Testing","text":"<pre><code># Validate configuration before full run\nglassalpha validate --config configs/german_credit.yaml --strict\n\n# Dry run to check configuration\nglassalpha audit --config configs/gdpr_compliance.yaml --output test.pdf --dry-run\n</code></pre>"},{"location":"examples/configuration-comparison/#best-practices","title":"Best Practices","text":""},{"location":"examples/configuration-comparison/#development-workflow","title":"Development Workflow","text":"<ol> <li>Start with minimal configuration for initial validation</li> <li>Use standard for iterative development and testing</li> <li>Apply regulatory for final compliance verification</li> <li>Optimize performance for production deployment</li> </ol>"},{"location":"examples/configuration-comparison/#configuration-management","title":"Configuration Management","text":"<pre><code># Version control configurations\ngit add configs/\ngit commit -m \"Add regulatory audit configuration v1.2\"\ngit tag audit-config-v1.2\n\n# Environment-specific configs\nconfigs/\n\u251c\u2500\u2500 environments/\n\u2502   \u251c\u2500\u2500 development.yaml\n\u2502   \u251c\u2500\u2500 staging.yaml\n\u2502   \u2514\u2500\u2500 production.yaml\n\u251c\u2500\u2500 profiles/\n\u2502   \u251c\u2500\u2500 basic.yaml\n\u2502   \u251c\u2500\u2500 standard.yaml\n\u2502   \u2514\u2500\u2500 regulatory.yaml\n\u2514\u2500\u2500 overrides/\n    \u251c\u2500\u2500 lightgbm.yaml\n    \u2514\u2500\u2500 strict_mode.yaml\n</code></pre>"},{"location":"examples/configuration-comparison/#testing-strategy","title":"Testing Strategy","text":"<pre><code># Test all configurations for consistency\nfor config in configs/*.yaml; do\n  echo \"Testing $config...\"\n  glassalpha audit --config \"$config\" --output \"test_$(basename $config .yaml).pdf\" --dry-run\ndone\n\n# Compare results across configurations\nglassalpha compare \\\n  --reports minimal_audit.pdf standard_audit.pdf regulatory_audit.pdf \\\n  --output comparison_report.pdf\n</code></pre>"},{"location":"examples/configuration-comparison/#conclusion","title":"Conclusion","text":"<p>Configuration choice significantly impacts audit outcomes:</p> <ul> <li>Execution time varies 6x between performance and regulatory configurations</li> <li>Report depth ranges from 8 to 28 pages depending on configuration</li> <li>Compliance value increases substantially with comprehensive configurations</li> <li>Resource usage scales with analysis depth and validation level</li> </ul> <p>Recommendation: Start with standard configuration and adjust based on specific requirements. Use regulatory configuration for compliance-critical applications and performance configuration for high-volume operations.</p> <p>The key is matching configuration complexity to your actual needs - over-engineering wastes resources while under-engineering risks missing critical biases or failing compliance requirements.</p> <p>For specific configuration guidance, see the Configuration Guide or consult regulatory experts for compliance-critical applications.</p>"},{"location":"examples/customer-segmentation-audit/","title":"Customer Segmentation Audit Tutorial","text":"<p>Complete walkthrough of performing a comprehensive ML audit on a multi-class customer segmentation model using GlassAlpha. This tutorial demonstrates how to audit automated customer classification systems for compliance with marketing regulations and consumer privacy laws.</p>"},{"location":"examples/customer-segmentation-audit/#overview","title":"Overview","text":"<p>Companies use machine learning models to segment customers for targeted marketing campaigns. These models must balance:</p> <ul> <li>Marketing Effectiveness: Accurate customer grouping for relevant messaging</li> <li>Privacy Compliance: Respect for consumer data protection rights</li> <li>Fairness: Avoid discriminatory segmentation practices</li> <li>Transparency: Ability to explain segmentation decisions to consumers</li> </ul>"},{"location":"examples/customer-segmentation-audit/#what-youll-learn","title":"What You'll Learn","text":"<ul> <li>How to configure GlassAlpha for multi-class classification problems</li> <li>Interpreting performance metrics for customer segmentation</li> <li>Understanding SHAP explanations for customer grouping decisions</li> <li>Identifying bias in marketing segmentation across demographic groups</li> <li>Generating regulatory-ready audit reports for marketing compliance</li> </ul>"},{"location":"examples/customer-segmentation-audit/#regulatory-context","title":"Regulatory Context","text":"<p>Customer segmentation models must comply with:</p> <ul> <li>Consumer Privacy Laws: GDPR, CCPA data processing requirements</li> <li>Marketing Regulations: CAN-SPAM, TCPA opt-out requirements</li> <li>Anti-Discrimination Laws: Fair treatment across protected groups</li> <li>Transparency Requirements: Right to explanation for automated decisions</li> </ul>"},{"location":"examples/customer-segmentation-audit/#prerequisites","title":"Prerequisites","text":"<ul> <li>GlassAlpha installed (Installation Guide)</li> <li>Basic understanding of customer segmentation and marketing analytics</li> <li>Familiarity with privacy and fairness concepts in consumer data usage</li> </ul>"},{"location":"examples/customer-segmentation-audit/#step-1-understanding-the-customer-segmentation-dataset","title":"Step 1: Understanding the Customer Segmentation Dataset","text":""},{"location":"examples/customer-segmentation-audit/#dataset-characteristics","title":"Dataset Characteristics","text":"<p>The customer segmentation dataset contains:</p> <ul> <li>20,000 synthetic customers</li> <li>18 features covering demographics, behavior, and financial indicators</li> <li>4 customer segments: High-Value, Regular, Occasional, At-Risk</li> <li>Protected attributes: Gender, age groups for fairness analysis</li> </ul>"},{"location":"examples/customer-segmentation-audit/#customer-segments","title":"Customer Segments","text":"<p>Segment 0: High-Value Customers - High income, frequent purchases, loyalty program members - Premium product preferences, high engagement - Most profitable customer group</p> <p>Segment 1: Regular Customers - Moderate income, consistent purchasing patterns - Standard product preferences, moderate engagement - Steady, reliable customer base</p> <p>Segment 2: Occasional Customers - Variable income, sporadic purchasing behavior - Discount-driven purchases, low engagement - Growth opportunity segment</p> <p>Segment 3: At-Risk Customers - Declining engagement, potential churn risk - Price-sensitive, low loyalty program participation - Retention focus required</p>"},{"location":"examples/customer-segmentation-audit/#key-features","title":"Key Features","text":"<p>Demographic Information: - <code>age</code> - Customer age (18-80) - <code>gender</code> - Customer gender (protected attribute) - <code>age_group</code> - Age categorization (protected attribute) - <code>marital_status</code> - Relationship status indicator - <code>household_size</code> - Number of people in household - <code>children_count</code> - Number of children</p> <p>Financial Indicators: - <code>income</code> - Annual household income (\\(20,000-\\)200,000) - <code>income_bracket</code> - Income categorization - <code>education_years</code> - Years of formal education - <code>education_level</code> - Education attainment level - <code>home_ownership</code> - Housing situation - <code>credit_score</code> - Financial health indicator</p> <p>Behavioral Metrics: - <code>purchase_frequency</code> - Annual purchase count (0-100) - <code>avg_order_value</code> - Average transaction amount (\\(10-\\)1,000) - <code>category_preferences</code> - Product category interests (0-10) - <code>loyalty_program_member</code> - Program participation status - <code>social_media_engagement</code> - Social platform activity (0-100) - <code>mobile_app_usage</code> - App interaction level (0-100)</p>"},{"location":"examples/customer-segmentation-audit/#step-2-configuration-setup","title":"Step 2: Configuration Setup","text":"<p>Create a configuration file for the customer segmentation audit:</p> <pre><code># customer_segmentation_audit.yaml\naudit_profile: customer_segmentation\n\n# Reproducibility for regulatory compliance\nreproducibility:\n  random_seed: 42\n\n# Data configuration\ndata:\n  path: ~/.glassalpha/data/customer_segmentation.csv\n  target_column: customer_segment\n  protected_attributes:\n    - gender\n    - age_group\n\n# Random Forest model for multi-class segmentation\nmodel:\n  type: sklearn_generic\n  params:\n    model_type: RandomForestClassifier\n    n_estimators: 100\n    max_depth: 10\n    random_state: 42\n\n# Explanation configuration (Random Forest needs KernelSHAP)\nexplainers:\n  strategy: first_compatible\n  priority:\n    - kernelshap  # Random Forest requires model-agnostic explanations\n  config:\n    kernelshap:\n      n_samples: 1000\n      background_size: 100\n\n# Multi-class specific metrics\nmetrics:\n  performance:\n    metrics:\n      - accuracy\n      - precision_macro    # Average precision across all segments\n      - recall_macro       # Average recall across all segments\n      - f1_macro          # Macro-averaged F1 score\n\n  fairness:\n    metrics:\n      - demographic_parity    # Equal representation in each segment\n      - equal_opportunity     # Equal classification accuracy across groups\n    config:\n      demographic_parity:\n        threshold: 0.05  # Maximum 5% difference in segment distribution\n      equal_opportunity:\n        threshold: 0.05\n\n# Professional audit report\nreport:\n  template: standard_audit\n  styling:\n    color_scheme: professional\n    compliance_statement: true\n</code></pre>"},{"location":"examples/customer-segmentation-audit/#step-3-running-the-audit","title":"Step 3: Running the Audit","text":"<p>Execute the customer segmentation audit:</p> <pre><code># Generate comprehensive audit\nglassalpha audit \\\n  --config customer_segmentation_audit.yaml \\\n  --output customer_segmentation_audit.pdf \\\n  --strict\n</code></pre>"},{"location":"examples/customer-segmentation-audit/#expected-execution","title":"Expected Execution","text":"<pre><code>GlassAlpha Audit Generation\n========================================\nLoading configuration from: customer_segmentation_audit.yaml\nAudit profile: customer_segmentation\nStrict mode: ENABLED\n\u26a0\ufe0f Strict mode enabled - enforcing regulatory compliance\n\nRunning audit pipeline...\n  Loading data and initializing components...\n\u2713 Audit pipeline completed in 8.45s\n\n\ud83d\udcca Audit Summary:\n  \u2705 Performance metrics: 4 computed\n     \u2705 accuracy: 76.2%\n  \u2696\ufe0f Fairness metrics: 8/8 computed\n     \u26a0\ufe0f Bias detected in: age_group.equal_opportunity\n  \ud83d\udd0d Explanations: \u2705 Global feature importance\n     Most important: purchase_frequency (+0.287)\n  \ud83d\udccb Dataset: 20,000 samples, 18 features\n  \ud83d\udd27 Components: 3 selected\n     Model: sklearn_generic (RandomForestClassifier)\n\nGenerating PDF report: customer_segmentation_audit.pdf\n\u2713 Saved plot to /tmp/plots/shap_importance.png\n\u2713 Saved plot to /tmp/plots/performance_summary.png\n\u2713 Saved plot to /tmp/plots/fairness_analysis.png\n\u2713 Saved plot to /tmp/plots/confusion_matrix.png\n\n\ud83c\udf89 Audit Report Generated Successfully!\n==================================================\n\ud83d\udcc1 Output: /path/to/customer_segmentation_audit.pdf\n\ud83d\udcca Size: 1,523,847 bytes (1.5 MB)\n\u23f1\ufe0f Total time: 9.87s\n   \u2022 Pipeline: 8.45s\n   \u2022 PDF generation: 1.42s\n\n\ud83d\udee1\ufe0f Strict mode: Report meets regulatory compliance requirements\n</code></pre>"},{"location":"examples/customer-segmentation-audit/#step-4-interpreting-the-results","title":"Step 4: Interpreting the Results","text":""},{"location":"examples/customer-segmentation-audit/#model-performance-analysis","title":"Model Performance Analysis","text":"<p>Overall Performance: - Accuracy: 76.2% - Model correctly classifies 76% of customers - Macro Precision: 74.8% - Average precision across all segments - Macro Recall: 75.1% - Average recall across all segments - Macro F1: 74.9% - Balanced performance across segments</p> <p>Multi-Class Business Interpretation: - Segment Balance: Model performs consistently across all customer segments - Marketing Impact: 76% accuracy enables reasonably targeted campaigns - Error Analysis: 24% misclassification rate requires business consideration - Segment Distribution: High-Value (28%), Regular (32%), Occasional (25%), At-Risk (15%)</p>"},{"location":"examples/customer-segmentation-audit/#shap-explanations","title":"SHAP Explanations","text":"<p>Global Feature Importance (Top 5):</p> <ol> <li><code>purchase_frequency</code> (+0.287)</li> <li>Most important segmentation factor</li> <li>Frequent purchasers clearly separated into high-value segments</li> <li> <p>Strong behavioral indicator of customer value</p> </li> <li> <p><code>income</code> (+0.234)</p> </li> <li>Income level strongly influences segment assignment</li> <li>Higher income customers more likely in high-value segments</li> <li> <p>Requires monitoring for socioeconomic bias</p> </li> <li> <p><code>loyalty_program_member</code> (+0.198)</p> </li> <li>Program participation strongly correlated with high-value segments</li> <li>Self-selection bias in loyalty program membership</li> <li> <p>Important for understanding customer engagement</p> </li> <li> <p><code>avg_order_value</code> (+0.156)</p> </li> <li>Transaction size indicates customer value orientation</li> <li>Higher-value customers make larger purchases</li> <li> <p>Correlates with willingness to pay premium prices</p> </li> <li> <p><code>social_media_engagement</code> (+0.142)</p> </li> <li>Digital engagement level influences segmentation</li> <li>Higher engagement associated with active customer segments</li> <li>May correlate with younger demographics</li> </ol> <p>Individual Customer Example: For a 35-year-old customer with $85,000 income, purchasing 45 times per year:</p> <ul> <li>Base segment probability: High-Value (0.35), Regular (0.30), Occasional (0.25), At-Risk (0.10)</li> <li>Purchase frequency (45): +0.12 shift toward High-Value</li> <li>Income ($85,000): +0.08 shift toward High-Value</li> <li>Loyalty program member: +0.06 shift toward High-Value</li> <li>Average order value ($150): +0.04 shift toward High-Value</li> <li>Final segment: High-Value (0.65 probability)</li> </ul>"},{"location":"examples/customer-segmentation-audit/#fairness-analysis-results","title":"Fairness Analysis Results","text":"<p>Demographic Parity Analysis:</p> <p>Age Group Representation: - Young (18-24): 12% High-Value, 28% Regular, 35% Occasional, 25% At-Risk - Young Adult (25-34): 22% High-Value, 32% Regular, 28% Occasional, 18% At-Risk - Middle Age (35-49): 35% High-Value, 30% Regular, 22% Occasional, 13% At-Risk - Senior (50-64): 28% High-Value, 35% Regular, 25% Occasional, 12% At-Risk - Elderly (65+): 18% High-Value, 38% Regular, 28% Occasional, 16% At-Risk - Conclusion: Age groups represented proportionally in segments</p> <p>Gender Analysis: - Male: 26% High-Value, 32% Regular, 26% Occasional, 16% At-Risk - Female: 24% High-Value, 31% Regular, 27% Occasional, 18% At-Risk - Difference: 2% maximum (within acceptable range) - Conclusion: \u2705 No significant gender bias in segment distribution</p> <p>Equal Opportunity Analysis: - Young: 71.2% accuracy in segment classification - Middle Age: 78.4% accuracy in segment classification - Difference: 7.2% (exceeds 5% threshold) - Conclusion: \u26a0\ufe0f Slight accuracy disparity across age groups</p>"},{"location":"examples/customer-segmentation-audit/#risk-assessment","title":"Risk Assessment","text":"<p>Medium Risk Findings:</p> <ol> <li>Age-Based Accuracy Disparity</li> <li>7.2% difference in classification accuracy across age groups</li> <li>May indicate model difficulty with younger customer patterns</li> <li> <p>Consider age-specific model tuning or feature adjustments</p> </li> <li> <p>Income Correlation</p> </li> <li>Income strongly influences segment assignment</li> <li>May create socioeconomic segmentation bias</li> <li>Monitor for equitable treatment across income levels</li> </ol> <p>Low Risk Findings: 1. Overall Model Performance: 76% accuracy is reasonable for marketing segmentation 2. Demographic Parity: Balanced representation across protected groups 3. Interpretability: Clear feature importance provides business insights</p> <p>Compliance Assessment: - Privacy Compliance: \u2705 PASS - Data processing respects consumer rights - Marketing Regulations: \u2705 PASS - No discriminatory segmentation detected - Transparency: \u2705 PASS - SHAP explanations provide clear rationale - Fairness: \u26a0\ufe0f REVIEW - Minor age-based accuracy differences noted</p>"},{"location":"examples/customer-segmentation-audit/#step-5-regulatory-recommendations","title":"Step 5: Regulatory Recommendations","text":""},{"location":"examples/customer-segmentation-audit/#immediate-actions-required","title":"Immediate Actions Required","text":"<ol> <li>Address Age Accuracy Disparity</li> <li>Investigate why younger customers are harder to classify accurately</li> <li>Consider age-specific model parameters or additional features</li> <li> <p>Validate with diverse age group test data</p> </li> <li> <p>Income Feature Review</p> </li> <li>Ensure income-based segmentation doesn't create unfair outcomes</li> <li>Consider income normalization or alternative value indicators</li> <li>Monitor for socioeconomic bias in marketing campaigns</li> </ol>"},{"location":"examples/customer-segmentation-audit/#long-term-compliance-strategy","title":"Long-term Compliance Strategy","text":"<ol> <li>Ongoing Monitoring</li> <li>Regular bias audits on new customer data</li> <li>Performance tracking across demographic groups</li> <li> <p>Model drift detection for changing customer behaviors</p> </li> <li> <p>Privacy Compliance</p> </li> <li>Regular privacy impact assessments</li> <li>Consumer opt-out mechanism validation</li> <li> <p>Data minimization principle adherence</p> </li> <li> <p>Marketing Governance</p> </li> <li>Segmentation model review board</li> <li>Campaign fairness impact assessments</li> <li>Consumer complaint monitoring and response</li> </ol>"},{"location":"examples/customer-segmentation-audit/#step-6-business-impact-analysis","title":"Step 6: Business Impact Analysis","text":""},{"location":"examples/customer-segmentation-audit/#marketing-impact","title":"Marketing Impact","text":"<p>Current Model: - Segmentation accuracy: 76% enables targeted marketing - Customer insights: Clear behavioral patterns identified - Campaign optimization: Data-driven customer group targeting - ROI improvement: Better matching of offers to customer preferences</p> <p>Optimization Opportunities: - Accuracy improvement: 5-10% accuracy gain through model tuning - Segment refinement: Better distinction between Regular and Occasional customers - Personalization: More precise individual customer recommendations</p>"},{"location":"examples/customer-segmentation-audit/#privacy-risk-mitigation","title":"Privacy Risk Mitigation","text":"<p>Before Audit: - Potential privacy violations if segmentation criteria unclear - Regulatory scrutiny without proper documentation - Consumer trust issues without transparency</p> <p>After Audit: - Documented compliance with privacy regulations - Clear data processing justification - Consumer explanation capabilities</p>"},{"location":"examples/customer-segmentation-audit/#step-7-next-steps-and-recommendations","title":"Step 7: Next Steps and Recommendations","text":""},{"location":"examples/customer-segmentation-audit/#technical-improvements","title":"Technical Improvements","text":"<ol> <li>Model Enhancement</li> <li>Feature engineering for better age group representation</li> <li>Alternative model architectures for multi-class problems</li> <li> <p>Ensemble methods combining multiple segmentation approaches</p> </li> <li> <p>Data Quality</p> </li> <li>Additional behavioral data sources</li> <li>Customer feedback integration</li> <li> <p>External data validation</p> </li> <li> <p>Advanced Analytics</p> </li> <li>Customer lifetime value modeling</li> <li>Churn prediction within segments</li> <li>Dynamic segmentation based on behavior changes</li> </ol>"},{"location":"examples/customer-segmentation-audit/#operational-changes","title":"Operational Changes","text":"<ol> <li>Marketing Integration</li> <li>Real-time segmentation updates</li> <li>Campaign performance tracking by segment</li> <li> <p>A/B testing for segmentation strategies</p> </li> <li> <p>Consumer Experience</p> </li> <li>Transparent segmentation explanations</li> <li>Opt-out mechanisms for targeted marketing</li> <li> <p>Personalized privacy controls</p> </li> <li> <p>Regulatory Compliance</p> </li> <li>Regular privacy impact assessments</li> <li>Consumer data rights implementation</li> <li>Regulatory reporting and documentation</li> </ol>"},{"location":"examples/customer-segmentation-audit/#conclusion","title":"Conclusion","text":"<p>This customer segmentation audit revealed a solid multi-class classification model that effectively groups customers while maintaining reasonable fairness across demographic groups. The audit demonstrated:</p> <p>Strengths: - Good overall performance (76% accuracy) for marketing applications - Balanced segment representation across protected groups - Clear interpretability of segmentation factors - Privacy-compliant data processing</p> <p>Areas for Enhancement: - Minor age-based accuracy differences requiring attention - Income correlation monitoring for socioeconomic fairness - Enhanced model tuning for better segment distinction</p> <p>Compliance Status: - \u2705 Privacy regulation compliance - \u2705 Marketing regulation adherence - \u2705 Transparency requirements met - \u26a0\ufe0f Minor fairness considerations noted</p> <p>This tutorial demonstrates how GlassAlpha enables thorough, regulatory-ready ML auditing for multi-class problems, providing the detailed analysis necessary for responsible AI deployment in consumer marketing and segmentation systems.</p>"},{"location":"examples/customer-segmentation-audit/#additional-resources","title":"Additional Resources","text":"<ul> <li>Configuration Guide - Detailed configuration options</li> <li>CLI Reference - Complete command documentation</li> <li>Compliance Overview - Consumer privacy regulatory framework guidance</li> <li>Troubleshooting Guide - Common issues and solutions</li> </ul> <p>For questions or support, please visit our GitHub repository or contact our team.</p>"},{"location":"examples/fraud-detection-audit/","title":"Financial Fraud Detection Audit Tutorial","text":"<p>Complete walkthrough of performing a comprehensive ML audit on a credit card fraud detection model using GlassAlpha. This tutorial demonstrates how to audit automated fraud detection systems for compliance with payment card industry standards and anti-money laundering regulations.</p>"},{"location":"examples/fraud-detection-audit/#overview","title":"Overview","text":"<p>Financial institutions use machine learning models to detect fraudulent credit card transactions in real-time. These models must balance:</p> <ul> <li>False Positive Minimization: Avoid blocking legitimate transactions</li> <li>Fraud Detection Maximization: Catch actual fraudulent activity</li> <li>Regulatory Compliance: Meet PCI DSS and AML requirements</li> <li>Fairness: Avoid bias against protected demographic groups</li> </ul>"},{"location":"examples/fraud-detection-audit/#what-youll-learn","title":"What You'll Learn","text":"<ul> <li>How to configure GlassAlpha for fraud detection models</li> <li>Interpreting performance metrics for fraud detection systems</li> <li>Understanding SHAP explanations for transaction risk assessment</li> <li>Identifying bias in fraud detection across demographic groups</li> <li>Generating regulatory-ready audit reports for financial compliance</li> </ul>"},{"location":"examples/fraud-detection-audit/#regulatory-context","title":"Regulatory Context","text":"<p>Fraud detection models must comply with:</p> <ul> <li>Payment Card Industry Data Security Standard (PCI DSS): Security and fraud monitoring requirements</li> <li>Bank Secrecy Act (BSA)/Anti-Money Laundering (AML): Suspicious activity reporting</li> <li>Fair Credit Reporting Act (FCRA): Accuracy in consumer reporting</li> <li>Equal Credit Opportunity Act (ECOA): Non-discrimination in credit decisions</li> </ul>"},{"location":"examples/fraud-detection-audit/#prerequisites","title":"Prerequisites","text":"<ul> <li>GlassAlpha installed (Installation Guide)</li> <li>Basic understanding of fraud detection systems and payment processing</li> <li>Familiarity with bias and fairness concepts in financial services</li> </ul>"},{"location":"examples/fraud-detection-audit/#step-1-understanding-the-fraud-detection-dataset","title":"Step 1: Understanding the Fraud Detection Dataset","text":""},{"location":"examples/fraud-detection-audit/#dataset-characteristics","title":"Dataset Characteristics","text":"<p>The fraud detection dataset contains:</p> <ul> <li>50,000 synthetic credit card transactions</li> <li>20 features covering transaction details, customer behavior, and risk factors</li> <li>Binary target: Fraudulent transaction (1) vs Legitimate (0)</li> <li>1% fraud rate (realistic for credit card fraud)</li> <li>Protected attributes: Gender, age groups for fairness analysis</li> </ul>"},{"location":"examples/fraud-detection-audit/#key-features","title":"Key Features","text":"<p>Transaction Information: - <code>amount</code> - Transaction amount ($1 - $10,000) - <code>merchant_category</code> - Merchant type (0-15 categories) - <code>transaction_hour</code> - Hour of transaction (0-23) - <code>transaction_day</code> - Day of week (0-6, Monday-Sunday) - <code>transaction_type</code> - Online, in-store, or ATM transaction</p> <p>Customer Behavior: - <code>cardholder_age</code> - Customer age (18-85) - <code>account_age_months</code> - Account tenure (0-120 months) - <code>transaction_count_24h</code> - Transactions in last 24 hours (0-50) - <code>amount_avg_24h</code> - Average transaction amount in last 24 hours - <code>time_since_last_txn</code> - Minutes since last transaction (0-1440)</p> <p>Risk Indicators: - <code>location_distance</code> - Distance from customer's home location (0-1000 miles) - <code>device_fingerprint_risk</code> - Device identification risk score (0-100) - <code>ip_geolocation_risk</code> - IP address risk assessment (0-100) - <code>merchant_country_risk</code> - Merchant location risk score (0-100) - <code>velocity_check_failed</code> - Failed transaction velocity checks - <code>amount_deviation_score</code> - Unusual amount pattern score (0-100) - <code>weekend_transaction</code> - Weekend vs. weekday indicator - <code>international_transaction</code> - Domestic vs. international</p>"},{"location":"examples/fraud-detection-audit/#step-2-configuration-setup","title":"Step 2: Configuration Setup","text":"<p>Create a configuration file for the fraud detection audit:</p> <pre><code># fraud_detection_audit.yaml\naudit_profile: fraud_detection\n\n# Reproducibility for regulatory compliance\nreproducibility:\n  random_seed: 42\n\n# Data configuration\ndata:\n  path: ~/.glassalpha/data/fraud_detection.csv\n  target_column: is_fraud\n  protected_attributes:\n    - gender\n    - age_group\n\n# XGBoost model optimized for fraud detection\nmodel:\n  type: xgboost\n  params:\n    objective: binary:logistic\n    eval_metric: logloss\n    n_estimators: 100\n    max_depth: 6\n    learning_rate: 0.1\n    subsample: 0.8\n    colsample_bytree: 0.8\n    scale_pos_weight: 99  # Handle 1% fraud rate\n    random_state: 42\n\n# Explanation configuration\nexplainers:\n  strategy: first_compatible\n  priority:\n    - treeshap    # XGBoost supports TreeSHAP\n    - kernelshap  # Universal fallback\n\n# Fraud-specific metrics\nmetrics:\n  performance:\n    metrics:\n      - accuracy\n      - precision    # Minimize false positives\n      - recall       # Maximize fraud detection\n      - f1          # Balance precision and recall\n      - auc_roc     # Overall model quality\n\n  fairness:\n    metrics:\n      - demographic_parity    # Equal fraud detection rates\n      - equal_opportunity     # Equal TPR for fraud detection\n      - predictive_parity      # Equal precision across groups\n    config:\n      # Stricter thresholds for fraud detection\n      demographic_parity:\n        threshold: 0.02  # Maximum 2% difference\n      equal_opportunity:\n        threshold: 0.02\n      predictive_parity:\n        threshold: 0.02\n\n# Professional audit report\nreport:\n  template: standard_audit\n  styling:\n    color_scheme: professional\n    compliance_statement: true\n</code></pre>"},{"location":"examples/fraud-detection-audit/#step-3-running-the-audit","title":"Step 3: Running the Audit","text":"<p>Execute the fraud detection audit:</p> <pre><code># Generate comprehensive audit\nglassalpha audit \\\n  --config fraud_detection_audit.yaml \\\n  --output fraud_detection_audit.pdf \\\n  --strict\n</code></pre>"},{"location":"examples/fraud-detection-audit/#expected-execution","title":"Expected Execution","text":"<pre><code>GlassAlpha Audit Generation\n========================================\nLoading configuration from: fraud_detection_audit.yaml\nAudit profile: fraud_detection\nStrict mode: ENABLED\n\u26a0\ufe0f Strict mode enabled - enforcing regulatory compliance\n\nRunning audit pipeline...\n  Loading data and initializing components...\n\u2713 Audit pipeline completed in 4.23s\n\n\ud83d\udcca Audit Summary:\n  \u2705 Performance metrics: 5 computed\n     \u2705 accuracy: 98.7%\n  \u2696\ufe0f Fairness metrics: 9/9 computed\n     \u2705 demographic_parity: 0.008 (within 2% threshold)\n  \ud83d\udd0d Explanations: \u2705 Global feature importance\n     Most important: amount_deviation_score (+0.342)\n  \ud83d\udccb Dataset: 50,000 samples, 20 features\n  \ud83d\udd27 Components: 3 selected\n     Model: xgboost\n\nGenerating PDF report: fraud_detection_audit.pdf\n\u2713 Saved plot to /tmp/plots/shap_importance.png\n\u2713 Saved plot to /tmp/plots/performance_summary.png\n\u2713 Saved plot to /tmp/plots/fairness_analysis.png\n\u2713 Saved plot to /tmp/plots/confusion_matrix.png\n\n\ud83c\udf89 Audit Report Generated Successfully!\n==================================================\n\ud83d\udcc1 Output: /path/to/fraud_detection_audit.pdf\n\ud83d\udcca Size: 1,287,654 bytes (1.3 MB)\n\u23f1\ufe0f Total time: 5.18s\n   \u2022 Pipeline: 4.23s\n   \u2022 PDF generation: 0.95s\n\n\ud83d\udee1\ufe0f Strict mode: Report meets regulatory compliance requirements\n</code></pre>"},{"location":"examples/fraud-detection-audit/#step-4-interpreting-the-results","title":"Step 4: Interpreting the Results","text":""},{"location":"examples/fraud-detection-audit/#model-performance-analysis","title":"Model Performance Analysis","text":"<p>Overall Performance: - Accuracy: 98.7% - Model correctly classifies 99% of transactions - AUC-ROC: 0.923 - Excellent discriminative ability for fraud detection - Precision: 87.4% - Of flagged transactions, 87% are actually fraudulent - Recall: 79.2% - Model catches 79% of all fraudulent transactions</p> <p>Fraud Detection Business Interpretation: - False Positive Rate: 13% of legitimate transactions incorrectly flagged - False Negative Rate: 21% of fraudulent transactions missed - Business Impact: Balance between fraud losses and customer friction - Regulatory Impact: Must justify false positive rates to card networks</p>"},{"location":"examples/fraud-detection-audit/#shap-explanations","title":"SHAP Explanations","text":"<p>Global Feature Importance (Top 5):</p> <ol> <li><code>amount_deviation_score</code> (+0.342)</li> <li>Most important fraud indicator</li> <li>Measures how unusual the transaction amount is for this customer</li> <li> <p>Critical for detecting anomalous spending patterns</p> </li> <li> <p><code>velocity_check_failed</code> (+0.287)</p> </li> <li>Transaction velocity violations (too many transactions too quickly)</li> <li>Strong indicator of card testing or account takeover</li> <li> <p>Real-time fraud prevention mechanism</p> </li> <li> <p><code>location_distance</code> (+0.234)</p> </li> <li>Distance from customer's normal geographic area</li> <li>Indicates potential card-not-present fraud</li> <li> <p>Must be monitored for legitimate travel patterns</p> </li> <li> <p><code>merchant_country_risk</code> (+0.198)</p> </li> <li>Risk assessment of merchant location</li> <li>Higher risk for international or high-risk countries</li> <li> <p>Balances security with legitimate international commerce</p> </li> <li> <p><code>transaction_hour</code> (-0.156)</p> </li> <li>Time of day patterns (negative = unusual timing)</li> <li>Fraud often occurs during off-hours</li> <li>Must account for legitimate late-night transactions</li> </ol> <p>Individual Transaction Example: For a $2,500 international transaction at 3 AM from 500 miles away:</p> <ul> <li>Base fraud probability: 0.012 (1.2% population rate)</li> <li>Amount deviation (high): +0.15 probability increase</li> <li>Velocity check (failed): +0.12 probability increase</li> <li>Location distance (far): +0.08 probability increase</li> <li>International transaction: +0.06 probability increase</li> <li>Transaction hour (unusual): +0.04 probability increase</li> <li>Final fraud probability: 0.452 (45.2% - flag for review)</li> </ul>"},{"location":"examples/fraud-detection-audit/#fairness-analysis-results","title":"Fairness Analysis Results","text":"<p>Demographic Parity Analysis:</p> <p>Age Group Analysis: - Young (18-24): 1.2% fraud detection rate - Young Adult (25-34): 1.1% fraud detection rate - Middle Age (35-49): 0.9% fraud detection rate - Senior (50-64): 0.8% fraud detection rate - Elderly (65+): 0.7% fraud detection rate - Maximum difference: 0.5% (Young vs. Elderly) - Conclusion: \u2705 Within 2% threshold, no significant age bias</p> <p>Gender Analysis: - Male: 1.0% fraud detection rate - Female: 0.9% fraud detection rate - Difference: 0.1% (well within acceptable range) - Conclusion: \u2705 No gender bias detected</p> <p>Predictive Parity Analysis: - Young: 86.2% precision (of flagged young customers, 86% actually fraudulent) - Middle Age: 87.8% precision - Difference: 1.6% (within acceptable range) - Conclusion: \u2705 Consistent fraud detection accuracy across age groups</p>"},{"location":"examples/fraud-detection-audit/#risk-assessment","title":"Risk Assessment","text":"<p>Low Risk Findings: 1. Model Performance: Excellent overall accuracy with appropriate precision/recall balance 2. Fairness Compliance: All demographic groups within acceptable thresholds 3. Feature Interpretability: Clear business logic in top risk factors</p> <p>Medium Risk Findings: 1. False Positive Impact: 13% false positive rate may cause customer friction 2. Geographic Bias: Location-based features could disadvantage rural customers 3. International Transactions: Higher scrutiny may impact legitimate global commerce</p> <p>Compliance Assessment: - PCI DSS Compliance: \u2705 PASS - Appropriate fraud monitoring implemented - BSA/AML Compliance: \u2705 PASS - Suspicious activity detection in place - FCRA Accuracy: \u2705 PASS - 99% accuracy meets standards - ECOA Compliance: \u2705 PASS - No demographic discrimination detected</p>"},{"location":"examples/fraud-detection-audit/#step-5-regulatory-recommendations","title":"Step 5: Regulatory Recommendations","text":""},{"location":"examples/fraud-detection-audit/#immediate-actions-required","title":"Immediate Actions Required","text":"<ol> <li>Monitor False Positive Rates</li> <li>Track customer complaints about blocked legitimate transactions</li> <li>Consider customer communication about fraud prevention measures</li> <li> <p>Implement appeals process for declined transactions</p> </li> <li> <p>Geographic Feature Review</p> </li> <li>Analyze location risk factors for potential rural/urban bias</li> <li>Consider normalizing by local economic factors</li> <li> <p>Validate with diverse geographic test sets</p> </li> <li> <p>International Transaction Handling</p> </li> <li>Ensure legitimate international commerce isn't overly burdened</li> <li>Consider customer travel pattern analysis</li> <li>Implement graduated response based on risk level</li> </ol>"},{"location":"examples/fraud-detection-audit/#long-term-compliance-strategy","title":"Long-term Compliance Strategy","text":"<ol> <li>Ongoing Monitoring</li> <li>Regular bias audits on new transaction patterns</li> <li>Performance monitoring across demographic groups</li> <li> <p>Model drift detection for changing fraud patterns</p> </li> <li> <p>Regulatory Reporting</p> </li> <li>Maintain fraud detection effectiveness metrics</li> <li>Document bias mitigation measures</li> <li> <p>Prepare regulatory examination materials</p> </li> <li> <p>Model Governance</p> </li> <li>Establish fraud detection accuracy standards</li> <li>Implement model validation procedures</li> <li>Create change management processes</li> </ol>"},{"location":"examples/fraud-detection-audit/#step-6-business-impact-analysis","title":"Step 6: Business Impact Analysis","text":""},{"location":"examples/fraud-detection-audit/#financial-impact","title":"Financial Impact","text":"<p>Current Model: - Fraud detection rate: 79% (catches 79% of fraud) - False positive rate: 13% (13% of legitimate transactions flagged) - Estimated fraud losses prevented: $2.3M annually - Estimated customer friction costs: $180K annually</p> <p>Optimization Opportunities: - Precision improvement: Could reduce false positives by 20% - Recall improvement: Could catch additional 5% of fraud - Net benefit: $300K+ annual improvement potential</p>"},{"location":"examples/fraud-detection-audit/#regulatory-risk-mitigation","title":"Regulatory Risk Mitigation","text":"<p>Before Audit: - Potential compliance violations if bias undetected - Regulatory scrutiny without proper documentation - Customer complaints without clear appeals process</p> <p>After Audit: - Documented compliance with PCI DSS requirements - Demonstrated fairness across demographic groups - Clear audit trail for regulatory examinations</p>"},{"location":"examples/fraud-detection-audit/#step-7-next-steps-and-recommendations","title":"Step 7: Next Steps and Recommendations","text":""},{"location":"examples/fraud-detection-audit/#technical-improvements","title":"Technical Improvements","text":"<ol> <li>Model Optimization</li> <li>Feature engineering for better fraud signal extraction</li> <li>Ensemble methods combining multiple detection approaches</li> <li> <p>Real-time model updating based on new fraud patterns</p> </li> <li> <p>Customer Experience Enhancement</p> </li> <li>Personalized fraud thresholds based on customer history</li> <li>Clear communication about why transactions were flagged</li> <li> <p>Streamlined appeals process for legitimate transactions</p> </li> <li> <p>Advanced Analytics</p> </li> <li>Customer segmentation for risk-based approaches</li> <li>Network analysis for organized fraud rings</li> <li>Temporal pattern analysis for seasonal fraud trends</li> </ol>"},{"location":"examples/fraud-detection-audit/#operational-changes","title":"Operational Changes","text":"<ol> <li>Fraud Team Integration</li> <li>Real-time model performance dashboards</li> <li>Analyst feedback loop for model improvement</li> <li> <p>Investigation workflow integration</p> </li> <li> <p>Customer Communication</p> </li> <li>Transparent fraud prevention messaging</li> <li>Educational materials about fraud indicators</li> <li> <p>Clear policies for transaction disputes</p> </li> <li> <p>Regulatory Engagement</p> </li> <li>Regular reporting to payment card networks</li> <li>Participation in industry fraud prevention initiatives</li> <li>Collaboration with law enforcement on fraud trends</li> </ol>"},{"location":"examples/fraud-detection-audit/#conclusion","title":"Conclusion","text":"<p>This fraud detection audit revealed a highly effective model that successfully balances fraud prevention with customer experience while maintaining regulatory compliance. The audit demonstrated:</p> <p>Strengths: - Excellent overall performance (99% accuracy, 92% AUC) - Appropriate precision/recall balance for fraud detection - No demographic bias detected across protected groups - Clear interpretability of fraud risk factors</p> <p>Areas for Enhancement: - Optimization of false positive rates - Enhanced geographic risk factor analysis - Improved international transaction handling</p> <p>Compliance Status: - \u2705 PCI DSS compliance requirements met - \u2705 BSA/AML suspicious activity monitoring in place - \u2705 FCRA accuracy standards satisfied - \u2705 ECOA non-discrimination requirements fulfilled</p> <p>This tutorial demonstrates how GlassAlpha enables thorough, regulatory-ready ML auditing that identifies both technical performance strengths and compliance risks, providing the detailed analysis necessary for responsible AI deployment in regulated financial fraud detection systems.</p>"},{"location":"examples/fraud-detection-audit/#additional-resources","title":"Additional Resources","text":"<ul> <li>Configuration Guide - Detailed configuration options</li> <li>CLI Reference - Complete command documentation</li> <li>Compliance Overview - Financial regulatory framework guidance</li> <li>Troubleshooting Guide - Common issues and solutions</li> </ul> <p>For questions or support, please visit our GitHub repository or contact our team.</p>"},{"location":"examples/gdpr-compliance-audit/","title":"GDPR Compliance Audit Tutorial","text":"<p>Complete walkthrough of performing a comprehensive ML audit on an automated decision-making system using GlassAlpha. This tutorial demonstrates how to audit consent prediction models for compliance with EU GDPR Article 22 and data protection impact assessment requirements.</p>"},{"location":"examples/gdpr-compliance-audit/#overview","title":"Overview","text":"<p>Organizations use machine learning models to predict customer consent for marketing communications and data processing activities. These models must comply with:</p> <ul> <li>GDPR Article 22: Rights regarding automated decision-making including profiling</li> <li>Data Protection Impact Assessments (DPIA): Systematic assessment of processing risks</li> <li>Consent Management: Freely given, specific, informed, and unambiguous consent</li> <li>Transparency: Right to explanation for automated decisions</li> </ul>"},{"location":"examples/gdpr-compliance-audit/#what-youll-learn","title":"What You'll Learn","text":"<ul> <li>How to configure GlassAlpha for GDPR Article 22 compliance auditing</li> <li>Interpreting performance metrics for automated decision-making systems</li> <li>Understanding SHAP explanations for consent prediction transparency</li> <li>Identifying bias in consent decisions across demographic groups</li> <li>Generating regulatory-ready audit reports for EU data protection compliance</li> </ul>"},{"location":"examples/gdpr-compliance-audit/#regulatory-context","title":"Regulatory Context","text":"<p>GDPR Article 22 compliance requires:</p> <ul> <li>Automated Decision-Making Rights: Individuals have rights regarding automated decisions</li> <li>Profiling Restrictions: Special protections for decisions based on profiling</li> <li>Transparency Requirements: Clear information about automated processing</li> <li>Data Protection Impact Assessments: Systematic risk assessment for high-risk processing</li> </ul>"},{"location":"examples/gdpr-compliance-audit/#prerequisites","title":"Prerequisites","text":"<ul> <li>GlassAlpha installed (Installation Guide)</li> <li>Basic understanding of GDPR and EU data protection law</li> <li>Familiarity with automated decision-making and consent management systems</li> </ul>"},{"location":"examples/gdpr-compliance-audit/#step-1-understanding-the-gdpr-compliance-dataset","title":"Step 1: Understanding the GDPR Compliance Dataset","text":""},{"location":"examples/gdpr-compliance-audit/#dataset-characteristics","title":"Dataset Characteristics","text":"<p>The GDPR compliance dataset contains:</p> <ul> <li>12,000 synthetic EU customer records</li> <li>16 features covering demographics, behavior, and consent indicators</li> <li>Binary target: Marketing consent granted (1) vs Denied (0)</li> <li>Protected attributes: Gender, age groups, EU citizenship status</li> <li>GDPR-specific fields: Automated decision subjects, profiling categories</li> </ul>"},{"location":"examples/gdpr-compliance-audit/#customer-demographics","title":"Customer Demographics","text":"<p>Age Distribution: - Young (18-24): 15% of customers - Young Adult (25-34): 28% of customers - Middle Age (35-49): 32% of customers - Senior (50-64): 18% of customers - Elderly (65+): 7% of customers</p> <p>EU Citizenship: - EU Citizens: 85% (GDPR fully applicable) - Non-EU Residents: 15% (GDPR may apply based on processing location)</p> <p>Profiling Categories: - Marketing: 45% - Credit Scoring: 25% - Insurance Risk: 20% - Employment Screening: 10%</p>"},{"location":"examples/gdpr-compliance-audit/#key-features","title":"Key Features","text":"<p>Demographic Information: - <code>age</code> - Customer age (18-80) - <code>gender</code> - Customer gender (protected attribute) - <code>age_group</code> - Age categorization (protected attribute) - <code>eu_citizenship</code> - EU citizenship status (GDPR applicability) - <code>dpa_region</code> - Data Protection Authority region (Germany, France, etc.)</p> <p>Behavioral Indicators: - <code>marketing_emails_opened</code> - Email engagement rate (0-100%) - <code>website_visits_monthly</code> - Monthly website visits (0-150) - <code>purchase_frequency</code> - Annual purchase count (0-50) - <code>avg_order_value_eur</code> - Average transaction value (\u20ac5-\u20ac500) - <code>customer_since_years</code> - Customer relationship duration (0-20 years)</p> <p>Digital Engagement: - <code>social_media_engagement</code> - Social platform activity (0-100) - <code>mobile_app_sessions</code> - App usage frequency (0-200 sessions) - <code>newsletter_subscriptions</code> - Newsletter subscription count (0-8) - <code>loyalty_program_tier</code> - Program membership level (0-4)</p> <p>GDPR Compliance Fields: - <code>data_processing_consent</code> - Explicit consent for data processing - <code>automated_decision_subject</code> - Subject to automated decisions - <code>profiling_category</code> - Type of automated profiling activity</p>"},{"location":"examples/gdpr-compliance-audit/#step-2-configuration-setup","title":"Step 2: Configuration Setup","text":"<p>Create a configuration file for the GDPR compliance audit:</p> <pre><code># gdpr_compliance_audit.yaml\naudit_profile: gdpr_compliance\n\n# Reproducibility for regulatory compliance\nreproducibility:\n  random_seed: 42\n\n# Data configuration\ndata:\n  path: ~/.glassalpha/data/gdpr_compliance.csv\n  target_column: marketing_consent_granted\n  protected_attributes:\n    - gender\n    - age_group\n    - eu_citizenship\n\n# LightGBM model for consent prediction\nmodel:\n  type: lightgbm\n  params:\n    objective: binary\n    metric: binary_logloss\n    n_estimators: 100\n    max_depth: 6\n    learning_rate: 0.1\n    subsample: 0.8\n    colsample_bytree: 0.8\n    random_state: 42\n\n# Explanation configuration\nexplainers:\n  strategy: first_compatible\n  priority:\n    - treeshap    # LightGBM supports TreeSHAP for GDPR transparency\n    - kernelshap  # Fallback for any model type\n\n# GDPR-specific metrics\nmetrics:\n  performance:\n    metrics:\n      - accuracy\n      - precision    # Important for consent accuracy\n      - recall       # Important for consent completeness\n      - f1\n      - auc_roc     # Overall discriminative ability\n\n  fairness:\n    metrics:\n      - demographic_parity    # Equal consent rates across groups\n      - equal_opportunity     # Equal TPR for consent prediction\n      - predictive_parity      # Equal precision across demographic groups\n    config:\n      # GDPR-compliant thresholds\n      demographic_parity:\n        threshold: 0.05  # Maximum 5% difference\n      equal_opportunity:\n        threshold: 0.05\n      predictive_parity:\n        threshold: 0.05\n\n# Professional GDPR audit report\nreport:\n  template: standard_audit\n  styling:\n    color_scheme: professional\n    compliance_statement: true\n</code></pre>"},{"location":"examples/gdpr-compliance-audit/#step-3-running-the-audit","title":"Step 3: Running the Audit","text":"<p>Execute the GDPR compliance audit:</p> <pre><code># Generate comprehensive audit\nglassalpha audit \\\n  --config gdpr_compliance_audit.yaml \\\n  --output gdpr_compliance_audit.pdf \\\n  --strict\n</code></pre>"},{"location":"examples/gdpr-compliance-audit/#expected-execution","title":"Expected Execution","text":"<pre><code>GlassAlpha Audit Generation\n========================================\nLoading configuration from: gdpr_compliance_audit.yaml\nAudit profile: gdpr_compliance\nStrict mode: ENABLED\n\u26a0\ufe0f Strict mode enabled - enforcing regulatory compliance\n\nRunning audit pipeline...\n  Loading data and initializing components...\n\u2713 Audit pipeline completed in 4.12s\n\n\ud83d\udcca Audit Summary:\n  \u2705 Performance metrics: 5 computed\n     \u2705 accuracy: 78.9%\n  \u2696\ufe0f Fairness metrics: 9/9 computed\n     \u2705 demographic_parity: 0.023 (within 5% threshold)\n  \ud83d\udd0d Explanations: \u2705 Global feature importance\n     Most important: data_processing_consent (+0.312)\n  \ud83d\udccb Dataset: 12,000 samples, 16 features\n  \ud83d\udd27 Components: 3 selected\n     Model: lightgbm\n\nGenerating PDF report: gdpr_compliance_audit.pdf\n\u2713 Saved plot to /tmp/plots/shap_importance.png\n\u2713 Saved plot to /tmp/plots/performance_summary.png\n\u2713 Saved plot to /tmp/plots/fairness_analysis.png\n\u2713 Saved plot to /tmp/plots/confusion_matrix.png\n\n\ud83c\udf89 Audit Report Generated Successfully!\n==================================================\n\ud83d\udcc1 Output: /path/to/gdpr_compliance_audit.pdf\n\ud83d\udcca Size: 1,345,672 bytes (1.3 MB)\n\u23f1\ufe0f Total time: 5.34s\n   \u2022 Pipeline: 4.12s\n   \u2022 PDF generation: 1.22s\n\n\ud83d\udee1\ufe0f Strict mode: Report meets regulatory compliance requirements\n</code></pre>"},{"location":"examples/gdpr-compliance-audit/#step-4-interpreting-the-results","title":"Step 4: Interpreting the Results","text":""},{"location":"examples/gdpr-compliance-audit/#model-performance-analysis","title":"Model Performance Analysis","text":"<p>Overall Performance: - Accuracy: 78.9% - Model correctly predicts 79% of consent decisions - AUC-ROC: 0.856 - Good discriminative ability for consent prediction - Precision: 76.3% - Of predicted consents, 76% are actually granted - Recall: 72.1% - Model identifies 72% of all actual consent grants</p> <p>GDPR Compliance Interpretation: - Consent Accuracy: 79% accuracy meets reasonable standards for automated consent prediction - False Positive Rate: 24% of predicted consents are actually denied - False Negative Rate: 28% of actual consents are missed - Business Impact: Balance between consent acquisition and regulatory compliance</p>"},{"location":"examples/gdpr-compliance-audit/#shap-explanations","title":"SHAP Explanations","text":"<p>Global Feature Importance (Top 5):</p> <ol> <li><code>data_processing_consent</code> (+0.312)</li> <li>Most important GDPR compliance factor</li> <li>Explicit consent for data processing strongly predicts marketing consent</li> <li> <p>Demonstrates importance of clear consent mechanisms</p> </li> <li> <p><code>marketing_emails_opened</code> (+0.287)</p> </li> <li>Email engagement strongly correlates with marketing consent</li> <li>Indicates active interest in brand communications</li> <li> <p>Important behavioral indicator of consent likelihood</p> </li> <li> <p><code>purchase_frequency</code> (+0.234)</p> </li> <li>Frequent customers more likely to grant marketing consent</li> <li>Transactional relationship strength predicts consent willingness</li> <li> <p>Demonstrates legitimate interest basis for processing</p> </li> <li> <p><code>customer_since_years</code> (+0.198)</p> </li> <li>Longer customer relationships correlate with consent likelihood</li> <li>Trust and familiarity increase consent probability</li> <li> <p>Important for relationship-based consent justification</p> </li> <li> <p><code>loyalty_program_tier</code> (+0.156)</p> </li> <li>Higher loyalty program participation predicts consent</li> <li>Engagement level indicates marketing communication preferences</li> <li>Supports legitimate interest legal basis</li> </ol> <p>Individual Customer Example: For a 35-year-old customer with high engagement and loyalty program membership:</p> <ul> <li>Base consent probability: 0.65 (65% population average)</li> <li>Data processing consent (yes): +0.18 probability increase</li> <li>Marketing emails opened (85%): +0.15 probability increase</li> <li>Purchase frequency (25/year): +0.12 probability increase</li> <li>Customer tenure (8 years): +0.08 probability increase</li> <li>Loyalty program tier (3): +0.06 probability increase</li> <li>Final consent probability: 0.94 (94% - high confidence in consent)</li> </ul>"},{"location":"examples/gdpr-compliance-audit/#fairness-analysis-results","title":"Fairness Analysis Results","text":"<p>Demographic Parity Analysis:</p> <p>Age Group Consent Rates: - Young (18-24): 62.3% predicted consent rate - Young Adult (25-34): 68.7% predicted consent rate - Middle Age (35-49): 74.2% predicted consent rate - Senior (50-64): 78.9% predicted consent rate - Elderly (65+): 82.1% predicted consent rate - Maximum difference: 19.8% (Young vs. Elderly) - Conclusion: \u26a0\ufe0f Significant age-based disparities detected</p> <p>EU Citizenship Analysis: - EU Citizens: 74.2% predicted consent rate - Non-EU Residents: 71.8% predicted consent rate - Difference: 2.4% (within acceptable range) - Conclusion: \u2705 No significant citizenship bias detected</p> <p>Predictive Parity Analysis: - Young: 73.2% precision (of flagged young customers, 73% actually consent) - Elderly: 84.7% precision - Difference: 11.5% (exceeds 5% threshold) - Conclusion: \u26a0\ufe0f Age-based accuracy disparity in consent prediction</p>"},{"location":"examples/gdpr-compliance-audit/#risk-assessment","title":"Risk Assessment","text":"<p>High Risk Findings:</p> <ol> <li>Age-Based Consent Disparities</li> <li>19.8% difference in predicted consent rates across age groups</li> <li>May indicate age discrimination in consent prediction</li> <li>Could result in GDPR Article 22 violations</li> <li> <p>Requires immediate review and model adjustment</p> </li> <li> <p>Automated Decision-Making Concerns</p> </li> <li>30% of customers subject to automated consent decisions</li> <li>Requires enhanced transparency and human oversight</li> <li>Must ensure meaningful human intervention capabilities</li> </ol> <p>Medium Risk Findings:</p> <ol> <li>Consent Prediction Accuracy</li> <li>21% false positive rate may lead to unwanted marketing</li> <li>28% false negative rate misses consent opportunities</li> <li>Balance needed between consent accuracy and customer experience</li> </ol> <p>Compliance Assessment:</p> <ul> <li>GDPR Article 22: \u26a0\ufe0f REVIEW - Age bias requires attention</li> <li>Data Protection Impact Assessment: \u2705 PASS - Comprehensive risk analysis</li> <li>Consent Management: \u2705 PASS - Explicit consent tracking</li> <li>Transparency: \u2705 PASS - SHAP explanations provide clear rationale</li> </ul>"},{"location":"examples/gdpr-compliance-audit/#step-5-regulatory-recommendations","title":"Step 5: Regulatory Recommendations","text":""},{"location":"examples/gdpr-compliance-audit/#immediate-actions-required","title":"Immediate Actions Required","text":"<ol> <li> <p>Address Age Discrimination <pre><code># Consider GDPR-compliant approaches:\n# - Age-stratified consent prediction models\n# - Enhanced transparency for automated decisions\n# - Human oversight for high-risk consent predictions\n</code></pre></p> </li> <li> <p>Enhance Automated Decision Transparency</p> </li> <li>Implement clear explanations for automated consent decisions</li> <li>Provide meaningful human intervention mechanisms</li> <li> <p>Document legitimate interest basis for processing</p> </li> <li> <p>Data Protection Impact Assessment</p> </li> <li>Conduct systematic assessment of processing risks</li> <li>Evaluate necessity and proportionality of data use</li> <li>Implement data minimization principles</li> </ol>"},{"location":"examples/gdpr-compliance-audit/#long-term-compliance-strategy","title":"Long-term Compliance Strategy","text":"<ol> <li>Ongoing GDPR Monitoring</li> <li>Regular bias audits on consent prediction models</li> <li>Performance monitoring across demographic groups</li> <li> <p>Model drift detection for changing consent patterns</p> </li> <li> <p>Consent Management Enhancement</p> </li> <li>Implement granular consent management systems</li> <li>Regular consent renewal and verification processes</li> <li> <p>Enhanced consumer control over data processing</p> </li> <li> <p>Regulatory Documentation</p> </li> <li>Maintain comprehensive DPIA documentation</li> <li>Document legitimate interest assessments</li> <li>Prepare regulatory examination materials</li> </ol>"},{"location":"examples/gdpr-compliance-audit/#step-6-business-impact-analysis","title":"Step 6: Business Impact Analysis","text":""},{"location":"examples/gdpr-compliance-audit/#gdpr-compliance-impact","title":"GDPR Compliance Impact","text":"<p>Current Model: - Consent prediction accuracy: 79% enables efficient marketing - Regulatory compliance: Supports GDPR Article 22 requirements - Business efficiency: Automated consent management at scale - Risk management: Systematic bias detection and mitigation</p> <p>Compliance Benefits: - Legal certainty: Documented compliance with EU data protection law - Consumer trust: Transparent automated decision-making - Operational efficiency: Scalable consent management - Risk reduction: Proactive bias detection and mitigation</p>"},{"location":"examples/gdpr-compliance-audit/#regulatory-risk-mitigation","title":"Regulatory Risk Mitigation","text":"<p>Before Audit: - Potential GDPR violations if bias undetected - Article 22 non-compliance without transparency - Regulatory scrutiny without proper DPIA documentation</p> <p>After Audit: - Documented compliance with GDPR Article 22 requirements - Demonstrated fairness across demographic groups - Clear audit trail for data protection authority review</p>"},{"location":"examples/gdpr-compliance-audit/#step-7-next-steps-and-recommendations","title":"Step 7: Next Steps and Recommendations","text":""},{"location":"examples/gdpr-compliance-audit/#technical-improvements","title":"Technical Improvements","text":"<ol> <li>Model Enhancement</li> <li>Age-stratified consent prediction modeling</li> <li>Integration with consent management platforms</li> <li> <p>Enhanced transparency mechanisms for automated decisions</p> </li> <li> <p>GDPR Compliance Features</p> </li> <li>Automated DPIA documentation generation</li> <li>Consent withdrawal tracking and processing</li> <li> <p>Data processing necessity assessments</p> </li> <li> <p>Advanced Analytics</p> </li> <li>Consent pattern analysis across demographics</li> <li>Automated decision impact assessment</li> <li>Consumer rights exercise tracking</li> </ol>"},{"location":"examples/gdpr-compliance-audit/#operational-changes","title":"Operational Changes","text":"<ol> <li>GDPR Program Integration</li> <li>Real-time consent prediction dashboards</li> <li>Integration with customer relationship management</li> <li> <p>Automated regulatory reporting</p> </li> <li> <p>Consumer Experience</p> </li> <li>Transparent consent prediction explanations</li> <li>Easy consent withdrawal mechanisms</li> <li> <p>Personalized privacy control interfaces</p> </li> <li> <p>Regulatory Engagement</p> </li> <li>Data Protection Authority consultation</li> <li>GDPR compliance certification preparation</li> <li>Industry best practice adoption</li> </ol>"},{"location":"examples/gdpr-compliance-audit/#conclusion","title":"Conclusion","text":"<p>This GDPR compliance audit revealed an effective consent prediction model with important age-based disparities that require immediate attention for full GDPR Article 22 compliance. The audit demonstrated:</p> <p>Strengths: - Good overall performance (79% accuracy) for consent management - Strong correlation between explicit consent and prediction accuracy - Comprehensive bias detection across multiple demographic dimensions - GDPR-compliant transparency through SHAP explanations</p> <p>Critical Issues: - Age discrimination exceeding regulatory thresholds - Need for enhanced automated decision-making transparency - Data protection impact assessment requirements</p> <p>Action Plan: 1. Address age-based disparities through model refinement 2. Implement enhanced transparency for automated decisions 3. Conduct comprehensive GDPR compliance review 4. Deploy with ongoing consent pattern monitoring</p> <p>This tutorial demonstrates how GlassAlpha enables thorough, regulatory-ready ML auditing for automated decision-making systems, providing the detailed analysis necessary for responsible AI deployment under EU GDPR requirements.</p>"},{"location":"examples/gdpr-compliance-audit/#additional-resources","title":"Additional Resources","text":"<ul> <li>Configuration Guide - Detailed configuration options</li> <li>CLI Reference - Complete command documentation</li> <li>Compliance Overview - GDPR regulatory framework guidance</li> <li>Troubleshooting Guide - Common issues and solutions</li> </ul> <p>For questions or support, please visit our GitHub repository or contact our team.</p>"},{"location":"examples/german-credit-audit/","title":"German Credit Audit Tutorial","text":"<p>Complete walkthrough of performing a comprehensive ML audit on the German Credit dataset using GlassAlpha. This tutorial demonstrates credit risk model evaluation with fairness analysis for regulatory compliance.</p>"},{"location":"examples/german-credit-audit/#overview","title":"Overview","text":"<p>The German Credit dataset is a classic benchmark for credit risk assessment, containing 1,000 loan applications with demographic and financial attributes. This tutorial shows how to audit an XGBoost credit scoring model for bias and compliance violations.</p>"},{"location":"examples/german-credit-audit/#what-youll-learn","title":"What You'll Learn","text":"<ul> <li>How to configure GlassAlpha for credit risk models</li> <li>Interpreting model performance metrics</li> <li>Understanding SHAP explanations for credit decisions</li> <li>Identifying bias in credit scoring</li> <li>Generating regulatory-ready audit reports</li> </ul>"},{"location":"examples/german-credit-audit/#use-case-context","title":"Use Case Context","text":"<p>Credit scoring models must comply with fair lending laws including:</p> <ul> <li>Equal Credit Opportunity Act (ECOA) - Prohibits discrimination based on protected characteristics</li> <li>Fair Credit Reporting Act (FCRA) - Requires accuracy and fairness in credit reporting</li> <li>GDPR Article 22 - Right to explanation for automated decision-making</li> </ul>"},{"location":"examples/german-credit-audit/#prerequisites","title":"Prerequisites","text":"<ul> <li>GlassAlpha installed (Installation Guide)</li> <li>Basic understanding of credit risk modeling</li> <li>Familiarity with bias and fairness concepts</li> </ul>"},{"location":"examples/german-credit-audit/#step-1-understanding-the-dataset","title":"Step 1: Understanding the Dataset","text":""},{"location":"examples/german-credit-audit/#dataset-characteristics","title":"Dataset Characteristics","text":"<p>The German Credit dataset contains:</p> <ul> <li>1,000 loan applications</li> <li>21 features (financial, demographic, and historical)</li> <li>Binary target: Good credit risk (70%) vs Bad credit risk (30%)</li> <li>Protected attributes: Gender, age, foreign worker status</li> </ul>"},{"location":"examples/german-credit-audit/#key-features","title":"Key Features","text":"<p>Financial Attributes:</p> <ul> <li><code>credit_amount</code> - Loan amount requested</li> <li><code>duration_months</code> - Loan duration</li> <li><code>checking_account_status</code> - Current account balance</li> <li><code>savings_account</code> - Savings account balance</li> <li><code>employment_duration</code> - Length of current employment</li> </ul> <p>Demographic Attributes (Protected):</p> <ul> <li><code>gender</code> - Extracted from personal status (Male/Female)</li> <li><code>age_group</code> - Categorized age ranges (Young/Middle/Senior)</li> <li><code>foreign_worker</code> - Nationality/residency status</li> </ul> <p>Risk Factors:</p> <ul> <li><code>credit_history</code> - Past credit performance</li> <li><code>purpose</code> - Loan purpose (car, furniture, etc.)</li> <li><code>existing_credits_count</code> - Number of existing credits</li> </ul>"},{"location":"examples/german-credit-audit/#step-2-configuration-setup","title":"Step 2: Configuration Setup","text":"<p>Create a configuration file for the German Credit audit:</p> <pre><code># german_credit.yaml\naudit_profile: tabular_compliance\n\n# Reproducibility for consistent results\nreproducibility:\n  random_seed: 42\n\n# Data configuration\ndata:\n  # GlassAlpha automatically downloads and processes the dataset\n  path: ~/.glassalpha/data/german_credit_processed.csv\n  target_column: credit_risk\n  protected_attributes:\n    - gender\n    - age_group\n    - foreign_worker\n\n# XGBoost model optimized for credit risk\nmodel:\n  type: xgboost\n  params:\n    objective: binary:logistic\n    eval_metric: logloss\n    n_estimators: 100\n    max_depth: 6\n    learning_rate: 0.1\n    min_child_weight: 1\n    subsample: 0.8\n    colsample_bytree: 0.8\n\n# Explanation configuration\nexplainers:\n  strategy: first_compatible\n  priority:\n    - treeshap    # Exact SHAP values for XGBoost\n  config:\n    treeshap:\n      max_samples: 1000\n      check_additivity: true\n\n# Comprehensive metrics for credit risk\nmetrics:\n  performance:\n    metrics:\n      - accuracy\n      - precision\n      - recall\n      - f1\n      - auc_roc\n      - classification_report\n\n  fairness:\n    metrics:\n      - demographic_parity\n      - equal_opportunity\n      - equalized_odds\n      - predictive_parity\n    config:\n      # Stricter thresholds for financial services\n      demographic_parity:\n        threshold: 0.05  # Maximum 5% difference between groups\n      equal_opportunity:\n        threshold: 0.05\n\n# Professional audit report\nreport:\n  template: standard_audit\n  styling:\n    color_scheme: professional\n    compliance_statement: true\n</code></pre>"},{"location":"examples/german-credit-audit/#step-3-running-the-audit","title":"Step 3: Running the Audit","text":"<p>Execute the audit with regulatory compliance mode enabled:</p> <pre><code># Generate comprehensive audit\nglassalpha audit \\\n  --config configs/german_credit.yaml \\\n  --output german_credit_audit.pdf \\\n  --strict\n</code></pre>"},{"location":"examples/german-credit-audit/#expected-execution","title":"Expected Execution","text":"<pre><code>GlassAlpha Audit Generation\n========================================\nLoading configuration from: configs/german_credit.yaml\nAudit profile: tabular_compliance\nStrict mode: ENABLED\n\u26a0\ufe0f Strict mode enabled - enforcing regulatory compliance\n\nRunning audit pipeline...\n  Loading data and initializing components...\n\u2713 Audit pipeline completed in 4.23s\n\n\ud83d\udcca Audit Summary:\n  \u2705 Performance metrics: 6 computed\n     \u2705 accuracy: 75.2%\n  \u2696\ufe0f Fairness metrics: 12/12 computed\n     \u26a0\ufe0f Bias detected in: gender.demographic_parity\n  \ud83d\udd0d Explanations: \u2705 Global feature importance\n     Most important: checking_account_status (+0.234)\n  \ud83d\udccb Dataset: 1,000 samples, 21 features\n  \ud83d\udd27 Components: 3 selected\n     Model: xgboost\n\nGenerating PDF report: german_credit_audit.pdf\n\u2713 Saved plot to /tmp/plots/shap_importance.png\n\u2713 Saved plot to /tmp/plots/performance_summary.png\n\u2713 Saved plot to /tmp/plots/fairness_analysis.png\n\u2713 Saved plot to /tmp/plots/confusion_matrix.png\n\n\ud83c\udf89 Audit Report Generated Successfully!\n==================================================\n\ud83d\udcc1 Output: /path/to/german_credit_audit.pdf\n\ud83d\udcca Size: 1,247,832 bytes (1.2 MB)\n\u23f1\ufe0f Total time: 5.67s\n   \u2022 Pipeline: 4.23s\n   \u2022 PDF generation: 1.44s\n\n\ud83d\udee1\ufe0f Strict mode: Report meets regulatory compliance requirements\n\nThe audit report is ready for review and regulatory submission.\n</code></pre>"},{"location":"examples/german-credit-audit/#step-4-interpreting-the-results","title":"Step 4: Interpreting the Results","text":""},{"location":"examples/german-credit-audit/#model-performance-analysis","title":"Model Performance Analysis","text":"<p>Overall Performance:</p> <ul> <li>Accuracy: 75.2% - Model correctly classifies 3 out of 4 loan applications</li> <li>AUC-ROC: 0.821 - Strong discriminative ability</li> <li>Precision: 82.1% - Of approved loans, 82% are actually good risks</li> <li>Recall: 71.4% - Model identifies 71% of all good credit risks</li> </ul> <p>Business Interpretation:</p> <ul> <li>Model performance is reasonable for credit risk assessment</li> <li>Conservative approach with higher precision than recall (safer lending)</li> <li>False positive rate (approving bad risks) is 18% - acceptable for many lenders</li> </ul>"},{"location":"examples/german-credit-audit/#shap-explanations","title":"SHAP Explanations","text":"<p>Global Feature Importance (Top 5):</p> <ol> <li><code>checking_account_status</code> (+0.234)</li> <li>Most predictive feature</li> <li>Higher account balances strongly indicate good credit risk</li> <li> <p>Aligns with traditional banking wisdom</p> </li> <li> <p><code>credit_history</code> (+0.187)</p> </li> <li>Past credit performance is highly predictive</li> <li>Good credit history significantly improves approval odds</li> <li> <p>Critical factor in credit underwriting</p> </li> <li> <p><code>duration_months</code> (-0.156)</p> </li> <li>Longer loan terms increase risk</li> <li>Model correctly identifies duration as risk factor</li> <li> <p>Consistent with increased default probability over time</p> </li> <li> <p><code>credit_amount</code> (-0.142)</p> </li> <li>Larger loan amounts increase risk</li> <li>Higher stakes loans have higher default rates</li> <li> <p>Model appropriately weights loan size</p> </li> <li> <p><code>age_years</code> (+0.098)</p> </li> <li>Older applicants generally have lower risk</li> <li>Reflects financial stability with age</li> <li>Note: Age is correlated with protected attribute</li> </ol> <p>Individual Prediction Example:</p> <p>For a 35-year-old male requesting \u20ac2,000 for a car:</p> <ul> <li>Base probability: 0.70 (population average)</li> <li>Checking account (positive): +0.15</li> <li>Good credit history: +0.12</li> <li>Car purchase purpose: +0.08</li> <li>Age (35): +0.04</li> <li>Final probability: 0.89 (strong approval recommendation)</li> </ul>"},{"location":"examples/german-credit-audit/#fairness-analysis-results","title":"Fairness Analysis Results","text":"<p>Demographic Parity Analysis:</p> <p>Gender Bias (DETECTED):</p> <ul> <li>Male approval rate: 72.3%</li> <li>Female approval rate: 66.1%</li> <li>Difference: 6.2% (exceeds 5% threshold)</li> <li>Statistical significance: p &lt; 0.05</li> <li>Conclusion: Potential gender discrimination</li> </ul> <p>Age Group Analysis:</p> <ul> <li>Young (18-30): 68.4% approval rate</li> <li>Middle (31-50): 74.2% approval rate</li> <li>Senior (51+): 78.9% approval rate</li> <li>Maximum difference: 10.5% (Young vs Senior)</li> <li>Conclusion: Age-based disparities detected</li> </ul> <p>Foreign Worker Status:</p> <ul> <li>German workers: 73.1% approval rate</li> <li>Foreign workers: 71.8% approval rate</li> <li>Difference: 1.3% (within acceptable range)</li> <li>Conclusion: No significant bias detected</li> </ul>"},{"location":"examples/german-credit-audit/#equal-opportunity-analysis","title":"Equal Opportunity Analysis","text":"<p>True Positive Rate Parity:</p> <ul> <li>Measures whether qualified applicants are approved equally across groups</li> <li>Gender: Males 89.2% vs Females 84.7% (4.5% difference - borderline)</li> <li>Age: Varies from 82.1% to 91.3% across age groups</li> <li>Foreign worker: No significant difference</li> </ul>"},{"location":"examples/german-credit-audit/#risk-assessment","title":"Risk Assessment","text":"<p>High Risk Findings:</p> <ol> <li>Gender Discrimination Risk</li> <li>6.2% approval rate difference violates ECOA guidelines</li> <li>Could result in regulatory action or lawsuits</li> <li> <p>Requires immediate model adjustment or feature engineering</p> </li> <li> <p>Age-Based Disparities</p> </li> <li>10.5% difference across age groups may violate age discrimination laws</li> <li>Consider removing age-correlated features</li> <li>Evaluate business justification for age-related patterns</li> </ol> <p>Medium Risk Findings:</p> <ol> <li>Correlated Protected Attributes</li> <li>Several features correlate with protected characteristics</li> <li>May create indirect discrimination</li> <li>Consider fairness-aware modeling techniques</li> </ol> <p>Compliance Assessment:</p> <ul> <li>ECOA Compliance: \u274c FAIL (gender bias detected)</li> <li>FCRA Accuracy: \u2705 PASS (75% accuracy meets standards)</li> <li>GDPR Article 22: \u26a0\ufe0f REVIEW (explanations available but bias concerns)</li> </ul>"},{"location":"examples/german-credit-audit/#step-5-regulatory-recommendations","title":"Step 5: Regulatory Recommendations","text":""},{"location":"examples/german-credit-audit/#immediate-actions-required","title":"Immediate Actions Required","text":"<ol> <li> <p>Address Gender Bias <pre><code># Consider preprocessing approaches:\n# - Remove gender-correlated features\n# - Apply fairness constraints during training\n# - Post-processing bias mitigation\n</code></pre></p> </li> <li> <p>Feature Engineering</p> </li> <li>Audit features correlated with protected attributes</li> <li>Consider removing or transforming biased features</li> <li> <p>Implement fairness-aware feature selection</p> </li> <li> <p>Model Adjustment</p> </li> <li>Retrain with fairness constraints</li> <li>Consider ensemble methods with bias reduction</li> <li>Validate improvements with new audit</li> </ol>"},{"location":"examples/german-credit-audit/#long-term-compliance-strategy","title":"Long-term Compliance Strategy","text":"<ol> <li>Ongoing Monitoring</li> <li>Regular bias audits on new data</li> <li>Statistical tests for demographic parity</li> <li> <p>Performance monitoring across protected groups</p> </li> <li> <p>Documentation Requirements</p> </li> <li>Maintain complete audit trails</li> <li>Document bias mitigation efforts</li> <li> <p>Prepare regulatory submission packages</p> </li> <li> <p>Process Improvements</p> </li> <li>Establish fairness review boards</li> <li>Implement bias testing in model development</li> <li>Create remediation procedures for biased decisions</li> </ol>"},{"location":"examples/german-credit-audit/#step-6-business-impact-analysis","title":"Step 6: Business Impact Analysis","text":""},{"location":"examples/german-credit-audit/#financial-impact","title":"Financial Impact","text":"<p>Current Model:</p> <ul> <li>Approval rate: 70% overall</li> <li>Expected default rate: ~25% (based on precision)</li> <li>Revenue impact: Moderate (typical for conservative lending)</li> </ul> <p>With Bias Correction:</p> <ul> <li>May increase approvals for underrepresented groups</li> <li>Could slightly increase default risk if not carefully implemented</li> <li>Compliance benefits outweigh small performance trade-offs</li> </ul>"},{"location":"examples/german-credit-audit/#legal-risk-mitigation","title":"Legal Risk Mitigation","text":"<p>Before Correction:</p> <ul> <li>High risk of ECOA violations</li> <li>Potential for class-action lawsuits</li> <li>Regulatory enforcement actions</li> </ul> <p>After Correction:</p> <ul> <li>Compliance with fair lending laws</li> <li>Reduced legal exposure</li> <li>Improved reputation and stakeholder trust</li> </ul>"},{"location":"examples/german-credit-audit/#step-7-next-steps-and-recommendations","title":"Step 7: Next Steps and Recommendations","text":""},{"location":"examples/german-credit-audit/#technical-remediation","title":"Technical Remediation","text":"<ol> <li> <p>Implement Fairness Constraints <pre><code># Example: Add fairness penalty to XGBoost training\n# Consider libraries like fairlearn or aif360\n</code></pre></p> </li> <li> <p>Alternative Modeling Approaches</p> </li> <li>Pre-processing: Remove biased features or transform data</li> <li>In-processing: Fairness-constrained optimization</li> <li> <p>Post-processing: Adjust predictions to achieve parity</p> </li> <li> <p>Validation Strategy</p> </li> <li>Cross-validation with fairness metrics</li> <li>Holdout testing on diverse populations</li> <li>A/B testing for production deployment</li> </ol>"},{"location":"examples/german-credit-audit/#operational-changes","title":"Operational Changes","text":"<ol> <li>Model Governance</li> <li>Establish bias testing requirements</li> <li>Create fairness review processes</li> <li> <p>Implement continuous monitoring</p> </li> <li> <p>Human Oversight</p> </li> <li>Manual review for borderline cases</li> <li>Appeals process for declined applicants</li> <li> <p>Regular expert review of model decisions</p> </li> <li> <p>Stakeholder Engagement</p> </li> <li>Train staff on fair lending requirements</li> <li>Engage with compliance and legal teams</li> <li>Communicate changes to management</li> </ol>"},{"location":"examples/german-credit-audit/#conclusion","title":"Conclusion","text":"<p>This German Credit audit revealed a technically sound but biased model that requires immediate attention before production deployment. The audit demonstrated:</p> <p>Strengths:</p> <ul> <li>Strong predictive performance (75% accuracy, 0.82 AUC)</li> <li>Interpretable feature importance aligned with domain knowledge</li> <li>Comprehensive bias detection and measurement</li> </ul> <p>Critical Issues:</p> <ul> <li>Gender bias exceeding regulatory thresholds</li> <li>Age-based disparities requiring investigation</li> <li>Non-compliance with fair lending regulations</li> </ul> <p>Action Plan: 1. Implement bias mitigation techniques 2. Retrain model with fairness constraints 3. Re-audit improved model 4. Deploy with ongoing monitoring</p> <p>This tutorial demonstrates how GlassAlpha enables thorough, regulatory-ready ML auditing that identifies both performance strengths and compliance risks, providing the detailed analysis necessary for responsible AI deployment in regulated industries.</p>"},{"location":"examples/german-credit-audit/#additional-resources","title":"Additional Resources","text":"<ul> <li>Configuration Guide - Detailed configuration options</li> <li>CLI Reference - Complete command documentation</li> <li>Compliance Overview - Regulatory framework guidance</li> <li>Troubleshooting Guide - Common issues and solutions</li> </ul> <p>For questions or support, please visit our GitHub repository or contact our team.</p>"},{"location":"examples/healthcare-bias-detection/","title":"Healthcare Bias Detection: Medical Risk Assessment","text":"<p>This example demonstrates using GlassAlpha to detect bias in healthcare AI systems, focusing on medical risk assessment models and regulatory compliance for healthcare applications.</p>"},{"location":"examples/healthcare-bias-detection/#use-case-overview","title":"Use Case Overview","text":"<p>Scenario: Hospital system uses ML to predict patient readmission risk</p> <p>Regulatory Context:</p> <ul> <li>HIPAA compliance for patient data protection</li> <li>FDA guidance for AI/ML in medical devices</li> <li>CMS requirements for healthcare AI transparency</li> <li>Joint Commission standards for patient safety</li> </ul> <p>Bias Concerns:</p> <ul> <li>Racial disparities in healthcare access and outcomes</li> <li>Gender bias in medical diagnosis and treatment</li> <li>Age-related discrimination in care decisions</li> <li>Socioeconomic factors affecting medical AI</li> </ul>"},{"location":"examples/healthcare-bias-detection/#healthcare-specific-configuration","title":"Healthcare-Specific Configuration","text":"<pre><code># healthcare_audit.yaml\naudit_profile: healthcare_compliance\n\n# Strict regulatory compliance\nstrict_mode: true\nreproducibility:\n  random_seed: 2024\n  track_git_sha: true\n  require_data_hash: true\n\n# Healthcare data configuration\ndata:\n  path: patient_readmission_data.csv\n  target_column: readmission_30_days\n\n  # Protected attributes for healthcare bias detection\n  protected_attributes:\n    - race_ethnicity\n    - gender\n    - age_group\n    - insurance_type\n    - primary_language\n    - zip_code_income_quartile\n\n  # Feature categories\n  feature_columns:\n    - age\n    - gender\n    - race_ethnicity\n    - insurance_type\n    - primary_diagnosis\n    - comorbidity_count\n    - previous_admissions\n    - length_of_stay\n    - discharge_disposition\n    - medications_count\n    - lab_abnormalities\n    - vital_signs_severity\n    - socioeconomic_score\n\n  # Healthcare-specific validation\n  schema_validation: strict\n  pii_detection: enabled\n  clinical_codes_validation: true\n\n# Model configuration for healthcare\nmodel:\n  type: xgboost\n  params:\n    # Conservative parameters for healthcare\n    n_estimators: 100\n    max_depth: 4  # Limit complexity for interpretability\n    learning_rate: 0.05  # Slower learning\n    subsample: 0.8\n    colsample_bytree: 0.8\n    min_child_weight: 3  # Prevent overfitting\n\n  # Healthcare-specific validation\n  validation:\n    cross_validation: true\n    stratified: true  # Preserve class distribution\n    folds: 10\n    metrics: [auc_roc, precision, recall]\n\n# Explainability for healthcare\nexplainers:\n  priority: [treeshap, kernelshap]\n  config:\n    treeshap:\n      max_samples: 500\n      include_individual_explanations: true\n      clinical_interpretation: true\n    kernelshap:\n      n_samples: 200\n      background_size: 100\n\n# Healthcare-specific metrics\nmetrics:\n  performance:\n    - accuracy\n    - precision\n    - recall\n    - f1\n    - auc_roc\n    - classification_report\n\n  # Critical fairness metrics for healthcare\n  fairness:\n    - demographic_parity\n    - equal_opportunity\n    - equalized_odds\n    - predictive_parity\n\n  # Healthcare bias thresholds (stricter than general ML)\n  fairness_thresholds:\n    demographic_parity: 0.02  # 2% maximum disparity\n    equal_opportunity: 0.02   # Equal access to care\n    statistical_significance: 0.01  # 99% confidence\n\n# Healthcare compliance settings\ncompliance:\n  frameworks:\n    - hipaa\n    - fda_ai_ml_guidance\n    - cms_innovation\n\n  # Documentation requirements\n  documentation:\n    clinical_validation: true\n    bias_assessment: true\n    safety_monitoring: true\n    performance_monitoring: true\n\n  # Risk assessment\n  risk_assessment: high\n  human_oversight: required\n  continuous_monitoring: enabled\n\n# Healthcare-specific reporting\nreport:\n  template: healthcare_audit\n\n  clinical_sections:\n    - executive_summary\n    - clinical_performance\n    - bias_assessment\n    - fairness_analysis\n    - individual_explanations\n    - safety_considerations\n    - regulatory_compliance\n    - monitoring_recommendations\n\n  # Healthcare stakeholder focus\n  audience:\n    - clinical_staff\n    - quality_assurance\n    - regulatory_affairs\n    - risk_management\n    - medical_directors\n\n# Security for healthcare data\nsecurity:\n  encryption_at_rest: true\n  audit_logging: comprehensive\n  access_controls: rbac\n  data_minimization: true\n  retention_policy: hipaa_compliant\n\n# Performance monitoring\nmonitoring:\n  model_drift: enabled\n  fairness_drift: enabled\n  performance_degradation: enabled\n  alert_thresholds:\n    accuracy_drop: 0.05\n    fairness_violation: 0.02\n    prediction_drift: 0.1\n</code></pre>"},{"location":"examples/healthcare-bias-detection/#running-the-healthcare-audit","title":"Running the Healthcare Audit","text":"<pre><code># Standard healthcare audit\nglassalpha audit \\\n  --config configs/healthcare_outcomes.yaml \\\n  --output healthcare_bias_assessment.pdf \\\n  --strict\n\n# With additional validation\nglassalpha validate \\\n  --config configs/healthcare_outcomes.yaml \\\n  --profile tabular_compliance \\\n  --strict\n\n# Multi-model comparison for robustness\nglassalpha audit \\\n  --config configs/healthcare_outcomes.yaml \\\n  --output xgboost_healthcare.pdf \\\n  --override '{\"model\": {\"type\": \"xgboost\"}}' \\\n  --strict\n\nglassalpha audit \\\n  --config configs/healthcare_outcomes.yaml \\\n  --output lightgbm_healthcare.pdf \\\n  --override '{\"model\": {\"type\": \"lightgbm\"}}' \\\n  --strict\n</code></pre>"},{"location":"examples/healthcare-bias-detection/#healthcare-specific-report-sections","title":"Healthcare-Specific Report Sections","text":""},{"location":"examples/healthcare-bias-detection/#1-clinical-performance-assessment","title":"1. Clinical Performance Assessment","text":"<p>Key Metrics:</p> <ul> <li>Sensitivity (Recall): 85% - Correctly identifies patients at risk</li> <li>Specificity: 78% - Correctly identifies low-risk patients</li> <li>Positive Predictive Value: 42% - Of predicted high-risk, 42% actually readmitted</li> <li>Negative Predictive Value: 96% - Of predicted low-risk, 96% not readmitted</li> <li>AUC-ROC: 0.82 - Good discriminative ability</li> </ul> <p>Clinical Interpretation:</p> <ul> <li>High sensitivity ensures most at-risk patients are identified</li> <li>High NPV means low-risk predictions are highly reliable</li> <li>PPV indicates some false positives (additional interventions to low-risk patients)</li> </ul>"},{"location":"examples/healthcare-bias-detection/#2-healthcare-bias-assessment","title":"2. Healthcare Bias Assessment","text":"<p>Racial/Ethnic Disparities: <pre><code>Demographic Parity by Race/Ethnicity:\n- White patients: 12.3% predicted high-risk\n- Black patients: 18.7% predicted high-risk (52% higher)\n- Hispanic patients: 16.1% predicted high-risk (31% higher)\n- Asian patients: 10.8% predicted high-risk (12% lower)\n\nStatistical significance: p &lt; 0.001 (highly significant)\n</code></pre></p> <p>Gender Disparities: <pre><code>Equal Opportunity by Gender:\n- Male patients (actual readmissions): 89% correctly identified\n- Female patients (actual readmissions): 81% correctly identified\n\nGender bias detected: 8 percentage point difference\nClinical impact: Female patients more likely to be missed\n</code></pre></p> <p>Age-Related Bias: <pre><code>Predictive Parity by Age Group:\n- 18-40 years: 38% PPV (lower precision)\n- 41-65 years: 45% PPV (higher precision)\n- 65+ years: 41% PPV (moderate precision)\n\nAge bias: Middle-aged patients receive more accurate predictions\n</code></pre></p>"},{"location":"examples/healthcare-bias-detection/#3-feature-impact-analysis","title":"3. Feature Impact Analysis","text":"<p>Most Influential Features (SHAP): 1. Previous admissions (0.23) - Clinical relevance: Strong predictor 2. Comorbidity count (0.19) - Clinical relevance: Multiple conditions increase risk 3. Length of stay (0.16) - Clinical relevance: Longer stays indicate complexity 4. Age (0.12) - Potential bias source: Age discrimination concerns 5. Insurance type (0.11) - Bias concern: Socioeconomic proxy 6. Primary diagnosis (0.09) - Clinical relevance: Disease-specific risk 7. Discharge disposition (0.08) - Clinical relevance: Care continuity 8. ZIP code income (0.06) - Bias concern: Socioeconomic proxy</p> <p>Bias Source Analysis: - Direct bias: Age, gender, race/ethnicity features - Proxy bias: Insurance type, ZIP code income, primary language - Clinical correlation: Some bias may reflect actual health disparities</p>"},{"location":"examples/healthcare-bias-detection/#4-individual-case-examples","title":"4. Individual Case Examples","text":"<p>Case 1: Potential Racial Bias <pre><code>Patient Profile:\n- Black, Female, Age 45\n- Diabetes, Hypertension\n- Medicaid insurance\n- Previous admission: 1\n\nModel Prediction: HIGH RISK (0.73 probability)\nActual Outcome: No readmission\n\nSHAP Explanation:\n- Race/ethnicity: +0.15 (contributed to high-risk prediction)\n- Insurance type: +0.12 (Medicaid increased risk score)\n- Previous admission: +0.25 (clinical factor)\n- Comorbidities: +0.18 (clinical factor)\n\nBias Assessment: Racial and socioeconomic factors inflated risk score\n</code></pre></p> <p>Case 2: Missed Female Patient <pre><code>Patient Profile:\n- White, Female, Age 62\n- Heart failure, COPD\n- Medicare insurance\n- Previous admissions: 2\n\nModel Prediction: LOW RISK (0.38 probability)\nActual Outcome: Readmitted within 30 days\n\nSHAP Explanation:\n- Gender: -0.08 (reduced risk prediction for females)\n- Age: +0.22 (increased risk due to age)\n- Comorbidities: +0.31 (strong clinical risk factors)\n- Previous admissions: +0.28 (strong clinical predictor)\n\nBias Assessment: Gender bias led to underestimation of risk\n</code></pre></p>"},{"location":"examples/healthcare-bias-detection/#regulatory-compliance-analysis","title":"Regulatory Compliance Analysis","text":""},{"location":"examples/healthcare-bias-detection/#fda-aiml-guidance-compliance","title":"FDA AI/ML Guidance Compliance","text":"<p>Algorithm Transparency: - \u2705 Complete model documentation provided - \u2705 Training data characteristics described - \u2705 Performance metrics across demographic groups - \u2705 Known limitations and biases identified - \u26a0\ufe0f Requires ongoing monitoring plan implementation</p> <p>Risk Assessment: - Risk Level: High (impacts patient care decisions) - Bias Impact: Moderate (disparities detected but not extreme) - Clinical Impact: Significant (affects care allocation) - Mitigation Required: Yes (bias correction needed)</p>"},{"location":"examples/healthcare-bias-detection/#hipaa-compliance","title":"HIPAA Compliance","text":"<p>Data Protection: - \u2705 No PHI in model outputs or logs - \u2705 Data encryption at rest and in transit - \u2705 Access controls and audit logging - \u2705 Minimum necessary data principle followed</p>"},{"location":"examples/healthcare-bias-detection/#cms-innovation-requirements","title":"CMS Innovation Requirements","text":"<p>Health Equity: - \u26a0\ufe0f Disparities detected: Requires intervention - \u2705 Bias measurement: Comprehensive analysis completed - \u26a0\ufe0f Correction plan needed: Bias mitigation strategy required - \u2705 Monitoring plan: Continuous bias monitoring enabled</p>"},{"location":"examples/healthcare-bias-detection/#bias-mitigation-recommendations","title":"Bias Mitigation Recommendations","text":""},{"location":"examples/healthcare-bias-detection/#1-immediate-actions","title":"1. Immediate Actions","text":"<p>Data Enhancement: - Collect more diverse training data, especially from underrepresented groups - Review feature selection to remove unnecessary socioeconomic proxies - Implement data quality checks for demographic balance</p> <p>Model Adjustments: - Apply demographic parity constraints during training - Use threshold optimization by demographic group - Implement fairness-aware ensemble methods</p> <p>Clinical Workflow: - Add human review for high-risk predictions in protected groups - Implement second opinion protocols for demographic edge cases - Train clinical staff on bias awareness and mitigation</p>"},{"location":"examples/healthcare-bias-detection/#2-long-term-improvements","title":"2. Long-term Improvements","text":"<p>Algorithmic Fairness: - Develop group-specific models or adjustments - Implement causal inference methods to separate clinical from social factors - Use adversarial debiasing techniques during training</p> <p>Clinical Integration: - Embed fairness metrics into clinical dashboards - Implement real-time bias monitoring alerts - Regular bias audits (quarterly recommended)</p> <p>Regulatory Alignment: - Develop standard operating procedures for bias detection - Create incident response plan for bias violations - Establish governance committee for AI fairness oversight</p>"},{"location":"examples/healthcare-bias-detection/#monitoring-and-maintenance","title":"Monitoring and Maintenance","text":""},{"location":"examples/healthcare-bias-detection/#continuous-monitoring-setup","title":"Continuous Monitoring Setup","text":"<pre><code># Healthcare bias monitoring configuration\nmonitoring_config = {\n    \"frequency\": \"daily\",\n    \"metrics\": [\n        \"demographic_parity\",\n        \"equal_opportunity\",\n        \"predictive_parity\"\n    ],\n    \"alert_thresholds\": {\n        \"demographic_parity\": 0.02,\n        \"equal_opportunity\": 0.02,\n        \"statistical_significance\": 0.01\n    },\n    \"stakeholder_alerts\": [\n        \"chief_medical_officer\",\n        \"quality_director\",\n        \"risk_manager\"\n    ]\n}\n</code></pre>"},{"location":"examples/healthcare-bias-detection/#performance-tracking","title":"Performance Tracking","text":"<p>Monthly Reviews: - Model performance by demographic group - Bias metric trends over time - Clinical outcome correlation analysis - Staff feedback on prediction utility</p> <p>Quarterly Audits: - Comprehensive bias assessment - Regulatory compliance review - Clinical effectiveness evaluation - Stakeholder feedback collection</p>"},{"location":"examples/healthcare-bias-detection/#healthcare-ai-best-practices","title":"Healthcare AI Best Practices","text":""},{"location":"examples/healthcare-bias-detection/#clinical-integration","title":"Clinical Integration","text":"<ol> <li>Human-AI Collaboration</li> <li>AI predictions as decision support, not replacement</li> <li>Clear indication of AI involvement in care decisions</li> <li> <p>Easy override mechanisms for clinical judgment</p> </li> <li> <p>Transparency</p> </li> <li>Explain AI predictions in clinical terms</li> <li>Document AI usage in patient records</li> <li> <p>Train staff on AI capabilities and limitations</p> </li> <li> <p>Continuous Improvement</p> </li> <li>Regular retraining with new data</li> <li>Bias monitoring and correction</li> <li>Clinical outcome feedback integration</li> </ol>"},{"location":"examples/healthcare-bias-detection/#regulatory-preparedness","title":"Regulatory Preparedness","text":"<ol> <li>Documentation</li> <li>Maintain complete audit trails</li> <li>Document all model changes and rationale</li> <li> <p>Keep regulatory submission materials current</p> </li> <li> <p>Risk Management</p> </li> <li>Regular risk assessments</li> <li>Incident reporting and response</li> <li> <p>Continuous safety monitoring</p> </li> <li> <p>Quality Assurance</p> </li> <li>Peer review of AI decisions</li> <li>Clinical validation studies</li> <li>External audit readiness</li> </ol>"},{"location":"examples/healthcare-bias-detection/#conclusion","title":"Conclusion","text":"<p>Healthcare AI requires heightened attention to bias detection and mitigation due to:</p> <ul> <li>High-stakes decisions affecting patient care and outcomes</li> <li>Complex regulatory environment with multiple oversight bodies</li> <li>Historical healthcare disparities that AI can perpetuate or amplify</li> <li>Professional and ethical obligations to \"first, do no harm\"</li> </ul> <p>GlassAlpha provides the comprehensive bias detection and audit capabilities needed for responsible healthcare AI deployment, ensuring models serve all patients fairly while maintaining clinical effectiveness.</p> <p>Next Steps: 1. Implement bias mitigation strategies 2. Establish continuous monitoring processes 3. Engage clinical stakeholders in AI governance 4. Prepare regulatory submission materials 5. Plan for ongoing audit and improvement cycles</p> <p>For additional healthcare AI guidance, consult clinical AI specialists and regulatory experts familiar with your specific healthcare setting and patient population.</p>"},{"location":"examples/healthcare-compliance-mapping/","title":"Healthcare Treatment Outcomes - Regulatory Compliance Mapping","text":"<p>This document maps the healthcare treatment outcomes example to specific regulatory requirements and compliance frameworks applicable to clinical decision support systems and medical device software.</p>"},{"location":"examples/healthcare-compliance-mapping/#regulatory-frameworks-addressed","title":"Regulatory Frameworks Addressed","text":""},{"location":"examples/healthcare-compliance-mapping/#1-fda-regulation-of-medical-device-software","title":"1. FDA Regulation of Medical Device Software","text":"<p>Primary Authority: U.S. Food and Drug Administration (FDA)</p> <p>Key Requirements: - Software as Medical Device (SaMD): Clinical decision support software classification - Clinical Evaluation: Analytical and clinical validation requirements - Quality Management: Software development lifecycle and risk management - Post-Market Surveillance: Ongoing monitoring and reporting requirements</p> <p>GlassAlpha Mapping: - Performance Metrics: Accuracy, precision, recall validate clinical efficacy - Clinical Validation: Comparison against established medical standards - Risk Assessment: False positive/negative rate analysis for patient safety - Audit Trail: Complete documentation for FDA submission and review</p>"},{"location":"examples/healthcare-compliance-mapping/#2-clinical-laboratory-improvement-amendments-clia","title":"2. Clinical Laboratory Improvement Amendments (CLIA)","text":"<p>Primary Authority: Centers for Medicare &amp; Medicaid Services (CMS)</p> <p>Key Requirements: - Laboratory Testing Standards: Accuracy and reliability requirements - Quality Control: Analytical measurement range and performance validation - Personnel Qualifications: Competency assessment for test interpretation - Patient Test Management: Result reporting and clinical consultation</p> <p>GlassAlpha Mapping: - Laboratory Value Analysis: Validation of clinical parameter interpretation - Clinical Correlation: Association between model predictions and patient outcomes - Quality Metrics: Precision, accuracy, and reliability assessment - Clinical Documentation: Comprehensive reporting for laboratory medicine</p>"},{"location":"examples/healthcare-compliance-mapping/#3-health-insurance-portability-and-accountability-act-hipaa","title":"3. Health Insurance Portability and Accountability Act (HIPAA)","text":"<p>Primary Authority: U.S. Department of Health and Human Services (HHS)</p> <p>Key Requirements: - Privacy Rule: Protected health information (PHI) handling requirements - Security Rule: Administrative, physical, and technical safeguards - Breach Notification: Timely reporting of security incidents - Business Associate Agreements: Third-party data handling requirements</p> <p>GlassAlpha Mapping: - Protected Attributes: Explicit handling of demographic and health data - Data Processing Documentation: Complete audit trail of PHI usage - Privacy-Aware Analysis: Fairness metrics respecting HIPAA constraints - Security Compliance: Documentation for privacy impact assessments</p>"},{"location":"examples/healthcare-compliance-mapping/#4-anti-discrimination-and-civil-rights-laws","title":"4. Anti-Discrimination and Civil Rights Laws","text":"<p>Federal Authority: Civil Rights Act, Americans with Disabilities Act, Age Discrimination Act</p> <p>Key Requirements: - Equal Protection: Non-discrimination in healthcare delivery - Accessibility: Reasonable accommodations for disabled patients - Language Access: Effective communication for limited English proficiency - Cultural Competency: Respect for diverse cultural health beliefs</p> <p>GlassAlpha Mapping: - Demographic Fairness: Analysis across age, gender, race/ethnicity - Accessibility Assessment: Model performance across diverse populations - Language Consideration: Potential impact on non-English speaking patients - Cultural Equity: Fair treatment across cultural and socioeconomic groups</p>"},{"location":"examples/healthcare-compliance-mapping/#compliance-audit-checklist","title":"Compliance Audit Checklist","text":""},{"location":"examples/healthcare-compliance-mapping/#pre-audit-preparation","title":"Pre-Audit Preparation","text":"<ul> <li>[ ] Clinical Protocol Review: Establish clinical validation criteria</li> <li>[ ] Data Source Validation: Verify laboratory and clinical data accuracy</li> <li>[ ] Regulatory Framework Mapping: Identify applicable FDA, CLIA, HIPAA requirements</li> <li>[ ] Stakeholder Engagement: Clinical, legal, and compliance team input</li> <li>[ ] Risk Assessment: Patient safety and clinical decision impact analysis</li> </ul>"},{"location":"examples/healthcare-compliance-mapping/#model-validation-requirements","title":"Model Validation Requirements","text":"<ul> <li>[ ] Analytical Validation: Technical performance against known outcomes</li> <li>[ ] Clinical Validation: Performance in intended clinical context</li> <li>[ ] Usability Validation: Clinician interaction and decision-making impact</li> <li>[ ] Safety Assessment: Risk-benefit analysis for clinical deployment</li> <li>[ ] Bias Evaluation: Fairness across demographic and clinical subgroups</li> </ul>"},{"location":"examples/healthcare-compliance-mapping/#clinical-performance-standards","title":"Clinical Performance Standards","text":"<ul> <li>[ ] Diagnostic Accuracy: Sensitivity, specificity, positive/negative predictive value</li> <li>[ ] Clinical Utility: Impact on treatment decisions and patient outcomes</li> <li>[ ] Safety Monitoring: False positive/negative rate assessment</li> <li>[ ] Reference Standard Comparison: Performance against established clinical methods</li> <li>[ ] Intended Use Population: Validation across diverse patient demographics</li> </ul>"},{"location":"examples/healthcare-compliance-mapping/#quality-management-requirements","title":"Quality Management Requirements","text":"<ul> <li>[ ] Software Development Lifecycle: Design controls and validation processes</li> <li>[ ] Risk Management: ISO 14971 compliant risk analysis</li> <li>[ ] Change Control: Version management and update procedures</li> <li>[ ] Training and Competency: User training and proficiency assessment</li> <li>[ ] Quality Control: Ongoing performance monitoring and calibration</li> </ul>"},{"location":"examples/healthcare-compliance-mapping/#risk-mitigation-strategies","title":"Risk Mitigation Strategies","text":""},{"location":"examples/healthcare-compliance-mapping/#technical-mitigation","title":"Technical Mitigation","text":"<ol> <li>Clinical Validation: Prospective and retrospective outcome studies</li> <li>Safety Thresholds: Confidence intervals and risk stratification</li> <li>Override Mechanisms: Clinician override capabilities for critical decisions</li> <li>Monitoring Systems: Real-time performance tracking and alerting</li> <li>Bias Correction: Demographic adjustment and fairness constraints</li> </ol>"},{"location":"examples/healthcare-compliance-mapping/#process-mitigation","title":"Process Mitigation","text":"<ol> <li>Clinical Governance: Oversight committee with clinical expertise</li> <li>Training Programs: Comprehensive clinician education and training</li> <li>Quality Assurance: Regular audits and performance reviews</li> <li>Incident Reporting: Adverse event tracking and root cause analysis</li> <li>Continuous Improvement: Feedback loops for model enhancement</li> </ol>"},{"location":"examples/healthcare-compliance-mapping/#documentation-mitigation","title":"Documentation Mitigation","text":"<ol> <li>Regulatory Submissions: FDA pre-market notification and clinical evaluation reports</li> <li>Clinical Protocols: Detailed methodology and validation procedures</li> <li>Safety Reports: Risk analysis and mitigation documentation</li> <li>Performance Monitoring: Ongoing surveillance and reporting</li> <li>Transparency: Clear communication with clinicians and patients</li> </ol>"},{"location":"examples/healthcare-compliance-mapping/#compliance-verification","title":"Compliance Verification","text":""},{"location":"examples/healthcare-compliance-mapping/#internal-verification","title":"Internal Verification","text":"<ul> <li>Clinical Validation Studies: Prospective outcome assessment</li> <li>Technical Performance Testing: Accuracy and reliability validation</li> <li>Bias Assessment: Comprehensive demographic impact analysis</li> <li>Safety Review: Risk-benefit analysis and mitigation planning</li> <li>Quality System Audit: Software development and maintenance review</li> </ul>"},{"location":"examples/healthcare-compliance-mapping/#external-verification","title":"External Verification","text":"<ul> <li>FDA Review: Pre-market notification and clinical evaluation</li> <li>CLIA Certification: Laboratory testing standards compliance</li> <li>Third-Party Audit: Independent validation and verification</li> <li>Peer Review: Clinical and technical expert assessment</li> <li>Patient Outcome Studies: Real-world effectiveness evaluation</li> </ul>"},{"location":"examples/healthcare-compliance-mapping/#regulatory-reporting-requirements","title":"Regulatory Reporting Requirements","text":""},{"location":"examples/healthcare-compliance-mapping/#fda-reporting-requirements","title":"FDA Reporting Requirements","text":"<ul> <li>Pre-Market Notification (510(k)): Substantial equivalence demonstration</li> <li>De Novo Classification: Novel device classification requests</li> <li>Clinical Evaluation Report: Comprehensive clinical evidence summary</li> <li>Software Documentation: Detailed technical and validation information</li> <li>Post-Market Surveillance: Ongoing monitoring and reporting protocols</li> </ul>"},{"location":"examples/healthcare-compliance-mapping/#clinical-laboratory-standards","title":"Clinical Laboratory Standards","text":"<ul> <li>CLIA Certificate: Laboratory testing compliance documentation</li> <li>Quality Control Records: Analytical performance and calibration data</li> <li>Proficiency Testing: External quality assessment participation</li> <li>Personnel Qualifications: Competency assessment and training records</li> <li>Patient Result Reporting: Clinical interpretation and consultation documentation</li> </ul>"},{"location":"examples/healthcare-compliance-mapping/#privacy-and-security-reporting","title":"Privacy and Security Reporting","text":"<ul> <li>HIPAA Compliance: Privacy and security risk assessments</li> <li>Breach Notification: Timely reporting of security incidents</li> <li>Business Associate Management: Third-party data handling oversight</li> <li>Data Use Agreements: PHI usage and disclosure documentation</li> <li>Privacy Impact Assessments: Systematic privacy risk evaluation</li> </ul>"},{"location":"examples/healthcare-compliance-mapping/#conclusion","title":"Conclusion","text":"<p>This healthcare treatment outcomes example demonstrates comprehensive compliance with medical device software regulations through:</p> <ul> <li>Clinical Validation: Rigorous performance assessment against medical standards</li> <li>Safety Analysis: Comprehensive risk assessment and mitigation strategies</li> <li>Fairness Evaluation: Systematic bias detection across demographic groups</li> <li>Regulatory Documentation: Complete audit trail for FDA and CLIA compliance</li> <li>Quality Management: Structured approach to software lifecycle management</li> </ul> <p>The GlassAlpha audit provides healthcare organizations with the tools and methodology needed to ensure their clinical decision support systems comply with FDA SaMD requirements, CLIA standards, HIPAA privacy rules, and anti-discrimination laws while maintaining clinical efficacy and patient safety.</p> <p>This regulatory compliance mapping ensures that AI-powered clinical decision support systems meet the highest standards of safety, efficacy, and equity in healthcare delivery.</p>"},{"location":"examples/healthcare-treatment-outcomes/","title":"Healthcare Treatment Outcomes Audit Tutorial","text":"<p>Complete walkthrough of performing a comprehensive ML audit on a clinical treatment outcomes model using GlassAlpha. This tutorial demonstrates how to audit clinical decision support systems for compliance with FDA regulations and medical practice standards.</p>"},{"location":"examples/healthcare-treatment-outcomes/#overview","title":"Overview","text":"<p>Healthcare organizations use machine learning models to predict treatment outcomes and support clinical decision-making. These models must comply with:</p> <ul> <li>FDA Regulation: Medical device software and clinical decision support requirements</li> <li>Clinical Standards: Evidence-based medicine and treatment efficacy validation</li> <li>Patient Safety: Harm prevention and outcome optimization</li> <li>Equity: Fair treatment outcomes across diverse patient populations</li> </ul>"},{"location":"examples/healthcare-treatment-outcomes/#what-youll-learn","title":"What You'll Learn","text":"<ul> <li>How to configure GlassAlpha for clinical outcome prediction models</li> <li>Interpreting performance metrics for medical treatment decisions</li> <li>Understanding SHAP explanations for clinical decision support</li> <li>Identifying bias in treatment outcomes across demographic groups</li> <li>Generating regulatory-ready audit reports for healthcare compliance</li> </ul>"},{"location":"examples/healthcare-treatment-outcomes/#regulatory-context","title":"Regulatory Context","text":"<p>Clinical decision support models must comply with:</p> <ul> <li>FDA Software as Medical Device (SaMD): Risk-based classification and validation</li> <li>Clinical Laboratory Improvement Amendments (CLIA): Laboratory testing standards</li> <li>Health Insurance Portability and Accountability Act (HIPAA): Patient data privacy</li> <li>Anti-Discrimination Laws: Equal treatment across protected groups</li> </ul>"},{"location":"examples/healthcare-treatment-outcomes/#prerequisites","title":"Prerequisites","text":"<ul> <li>GlassAlpha installed (Installation Guide)</li> <li>Basic understanding of clinical decision support systems</li> <li>Familiarity with medical outcome prediction and healthcare analytics</li> </ul>"},{"location":"examples/healthcare-treatment-outcomes/#step-1-understanding-the-healthcare-dataset","title":"Step 1: Understanding the Healthcare Dataset","text":""},{"location":"examples/healthcare-treatment-outcomes/#dataset-characteristics","title":"Dataset Characteristics","text":"<p>The healthcare treatment outcomes dataset contains:</p> <ul> <li>15,000 synthetic patient treatment records</li> <li>22 clinical features covering vital signs, lab results, and demographics</li> <li>Binary target: Successful treatment outcome (1) vs Unsuccessful (0)</li> <li>Protected attributes: Gender, age groups, race/ethnicity for equity analysis</li> </ul>"},{"location":"examples/healthcare-treatment-outcomes/#patient-demographics","title":"Patient Demographics","text":"<p>Age Distribution: - Young Adult (18-29): 18% of patients - Middle Age (30-49): 32% of patients - Senior (50-64): 28% of patients - Elderly (65-79): 17% of patients - Very Elderly (80+): 5% of patients</p> <p>Race/Ethnicity Distribution: - White: 60% - Black: 13% - Hispanic: 18% - Asian: 6% - Other: 3%</p>"},{"location":"examples/healthcare-treatment-outcomes/#key-clinical-features","title":"Key Clinical Features","text":"<p>Vital Signs: - <code>blood_pressure_systolic</code> - Systolic blood pressure (90-200 mmHg) - <code>blood_pressure_diastolic</code> - Diastolic blood pressure (60-120 mmHg) - <code>heart_rate</code> - Heart rate (50-120 bpm) - <code>respiratory_rate</code> - Respiratory rate (8-25 breaths/min) - <code>oxygen_saturation</code> - Oxygen saturation (90-100%) - <code>temperature</code> - Body temperature (95-102\u00b0F)</p> <p>Laboratory Values: - <code>cholesterol_total</code> - Total cholesterol (120-350 mg/dL) - <code>cholesterol_ldl</code> - LDL cholesterol (50-250 mg/dL) - <code>cholesterol_hdl</code> - HDL cholesterol (20-100 mg/dL) - <code>glucose_level</code> - Blood glucose (70-300 mg/dL) - <code>white_blood_cell_count</code> - WBC count (3,000-15,000 cells/\u03bcL) - <code>red_blood_cell_count</code> - RBC count (2.5-6.5 million cells/\u03bcL) - <code>hemoglobin</code> - Hemoglobin level (8-18 g/dL) - <code>hematocrit</code> - Hematocrit percentage (25-55%) - <code>platelet_count</code> - Platelet count (100,000-500,000/\u03bcL)</p> <p>Kidney Function: - <code>creatinine</code> - Creatinine level (0.5-4.0 mg/dL) - <code>bun</code> - Blood urea nitrogen (5-30 mg/dL)</p> <p>Electrolytes: - <code>sodium</code> - Sodium level (125-150 mEq/L) - <code>potassium</code> - Potassium level (2.5-5.5 mEq/L) - <code>chloride</code> - Chloride level (85-115 mEq/L)</p>"},{"location":"examples/healthcare-treatment-outcomes/#step-2-configuration-setup","title":"Step 2: Configuration Setup","text":"<p>Create a configuration file for the healthcare outcomes audit:</p> <pre><code># healthcare_outcomes_audit.yaml\naudit_profile: healthcare_outcomes\n\n# Reproducibility for regulatory compliance\nreproducibility:\n  random_seed: 42\n\n# Data configuration\ndata:\n  path: ~/.glassalpha/data/healthcare_outcomes.csv\n  target_column: treatment_outcome\n  protected_attributes:\n    - gender\n    - age_group\n    - race_ethnicity\n\n# XGBoost model for clinical outcomes\nmodel:\n  type: xgboost\n  params:\n    objective: binary:logistic\n    eval_metric: logloss\n    n_estimators: 100\n    max_depth: 6\n    learning_rate: 0.1\n    subsample: 0.8\n    colsample_bytree: 0.8\n    random_state: 42\n\n# Explanation configuration\nexplainers:\n  strategy: first_compatible\n  priority:\n    - treeshap    # XGBoost supports TreeSHAP for clinical interpretability\n    - kernelshap  # Fallback for any model type\n\n# Clinical and fairness metrics\nmetrics:\n  performance:\n    metrics:\n      - accuracy\n      - precision    # Critical for clinical decisions\n      - recall       # Critical for clinical decisions\n      - f1          # Balance between precision and recall\n      - auc_roc     # Overall discriminative ability\n\n  fairness:\n    metrics:\n      - demographic_parity    # Equal treatment outcomes across groups\n      - equal_opportunity     # Equal true positive rates\n      - equalized_odds        # Equal TPR and FPR\n    config:\n      # Stricter thresholds for healthcare\n      demographic_parity:\n        threshold: 0.03  # Maximum 3% difference\n      equal_opportunity:\n        threshold: 0.03\n      equalized_odds:\n        threshold: 0.03\n\n# Professional clinical audit report\nreport:\n  template: standard_audit\n  styling:\n    color_scheme: professional\n    compliance_statement: true\n</code></pre>"},{"location":"examples/healthcare-treatment-outcomes/#step-3-running-the-audit","title":"Step 3: Running the Audit","text":"<p>Execute the healthcare outcomes audit:</p> <pre><code># Generate comprehensive audit\nglassalpha audit \\\n  --config healthcare_outcomes_audit.yaml \\\n  --output healthcare_outcomes_audit.pdf \\\n  --strict\n</code></pre>"},{"location":"examples/healthcare-treatment-outcomes/#expected-execution","title":"Expected Execution","text":"<pre><code>GlassAlpha Audit Generation\n========================================\nLoading configuration from: healthcare_outcomes_audit.yaml\nAudit profile: healthcare_outcomes\nStrict mode: ENABLED\n\u26a0\ufe0f Strict mode enabled - enforcing regulatory compliance\n\nRunning audit pipeline...\n  Loading data and initializing components...\n\u2713 Audit pipeline completed in 5.67s\n\n\ud83d\udcca Audit Summary:\n  \u2705 Performance metrics: 5 computed\n     \u2705 accuracy: 82.3%\n  \u2696\ufe0f Fairness metrics: 9/9 computed\n     \u26a0\ufe0f Bias detected in: age_group.equal_opportunity\n  \ud83d\udd0d Explanations: \u2705 Global feature importance\n     Most important: glucose_level (+0.287)\n  \ud83d\udccb Dataset: 15,000 samples, 22 features\n  \ud83d\udd27 Components: 3 selected\n     Model: xgboost\n\nGenerating PDF report: healthcare_outcomes_audit.pdf\n\u2713 Saved plot to /tmp/plots/shap_importance.png\n\u2713 Saved plot to /tmp/plots/performance_summary.png\n\u2713 Saved plot to /tmp/plots/fairness_analysis.png\n\u2713 Saved plot to /tmp/plots/confusion_matrix.png\n\n\ud83c\udf89 Audit Report Generated Successfully!\n==================================================\n\ud83d\udcc1 Output: /path/to/healthcare_outcomes_audit.pdf\n\ud83d\udcca Size: 1,678,432 bytes (1.7 MB)\n\u23f1\ufe0f Total time: 6.89s\n   \u2022 Pipeline: 5.67s\n   \u2022 PDF generation: 1.22s\n\n\ud83d\udee1\ufe0f Strict mode: Report meets regulatory compliance requirements\n</code></pre>"},{"location":"examples/healthcare-treatment-outcomes/#step-4-interpreting-the-results","title":"Step 4: Interpreting the Results","text":""},{"location":"examples/healthcare-treatment-outcomes/#model-performance-analysis","title":"Model Performance Analysis","text":"<p>Overall Performance: - Accuracy: 82.3% - Model correctly predicts 82% of treatment outcomes - AUC-ROC: 0.891 - Strong discriminative ability for clinical decisions - Precision: 78.9% - Of predicted successful treatments, 79% actually succeed - Recall: 76.4% - Model identifies 76% of all successful treatments</p> <p>Clinical Decision Interpretation: - False Positive Rate: 21% of unsuccessful treatments predicted as successful - False Negative Rate: 24% of successful treatments missed - Clinical Impact: Balance between treatment optimism and caution - Safety Consideration: Higher precision than recall (safer for patients)</p>"},{"location":"examples/healthcare-treatment-outcomes/#shap-explanations","title":"SHAP Explanations","text":"<p>Global Feature Importance (Top 5):</p> <ol> <li><code>glucose_level</code> (+0.287)</li> <li>Most important clinical factor</li> <li>Blood glucose strongly predicts treatment success</li> <li> <p>Critical metabolic indicator for many treatments</p> </li> <li> <p><code>cholesterol_ldl</code> (+0.234)</p> </li> <li>LDL cholesterol levels significantly impact outcomes</li> <li>Cardiovascular health marker</li> <li> <p>Important for cardiac and metabolic treatments</p> </li> <li> <p><code>blood_pressure_systolic</code> (+0.198)</p> </li> <li>Systolic blood pressure strongly influences treatment success</li> <li>Critical vital sign for cardiovascular treatments</li> <li> <p>Requires careful monitoring and management</p> </li> <li> <p><code>hemoglobin</code> (+0.156)</p> </li> <li>Hemoglobin levels indicate oxygen-carrying capacity</li> <li>Important for surgical and anemia treatments</li> <li> <p>Correlates with overall health status</p> </li> <li> <p><code>creatinine</code> (+0.142)</p> </li> <li>Kidney function marker</li> <li>Critical for medication dosing and treatment planning</li> <li>Important safety indicator for nephrotoxic treatments</li> </ol> <p>Individual Patient Example: For a 65-year-old patient with diabetes and hypertension:</p> <ul> <li>Base success probability: 0.72 (72% population average)</li> <li>Glucose level (high): +0.15 probability increase</li> <li>LDL cholesterol (elevated): +0.12 probability increase</li> <li>Systolic BP (140): +0.08 probability increase</li> <li>Hemoglobin (normal): +0.04 probability increase</li> <li>Creatinine (normal): +0.03 probability increase</li> <li>Final success probability: 0.94 (94% - high confidence in treatment success)</li> </ul>"},{"location":"examples/healthcare-treatment-outcomes/#fairness-analysis-results","title":"Fairness Analysis Results","text":"<p>Demographic Parity Analysis:</p> <p>Age Group Treatment Success Rates: - Young Adult (18-29): 74.2% predicted success rate - Middle Age (30-49): 78.7% predicted success rate - Senior (50-64): 82.1% predicted success rate - Elderly (65-79): 85.3% predicted success rate - Very Elderly (80+): 88.7% predicted success rate - Maximum difference: 14.5% (Young Adult vs. Very Elderly) - Conclusion: \u26a0\ufe0f Significant age-based disparities detected</p> <p>Race/Ethnicity Analysis: - White: 81.2% predicted success rate - Black: 79.8% predicted success rate - Hispanic: 78.4% predicted success rate - Asian: 80.6% predicted success rate - Other: 79.2% predicted success rate - Maximum difference: 2.8% (within acceptable range) - Conclusion: \u2705 No significant racial/ethnic bias detected</p> <p>Equal Opportunity Analysis: - Young Adult: 71.4% of actual successful treatments correctly identified - Elderly: 86.2% of actual successful treatments correctly identified - Difference: 14.8% (exceeds 3% threshold) - Conclusion: \u26a0\ufe0f Age-based disparity in treatment success detection</p>"},{"location":"examples/healthcare-treatment-outcomes/#risk-assessment","title":"Risk Assessment","text":"<p>High Risk Findings:</p> <ol> <li>Age-Based Treatment Disparities</li> <li>14.5% difference in predicted success rates across age groups</li> <li>May indicate age discrimination in treatment recommendations</li> <li>Could result in suboptimal care for younger patients</li> <li> <p>Requires immediate clinical review and model adjustment</p> </li> <li> <p>Clinical Decision Safety</p> </li> <li>21% false positive rate may lead to overconfidence in treatment success</li> <li>Could result in delayed alternative treatments</li> <li>Requires validation against clinical trial data</li> </ol> <p>Medium Risk Findings:</p> <ol> <li>Feature Correlation Concerns</li> <li>Age strongly correlates with treatment success predictions</li> <li>May mask underlying health status differences</li> <li>Consider age stratification in model development</li> </ol> <p>Compliance Assessment:</p> <ul> <li>FDA SaMD Compliance: \u26a0\ufe0f REVIEW - Clinical validation required</li> <li>CLIA Standards: \u2705 PASS - Laboratory value interpretation appropriate</li> <li>HIPAA Compliance: \u2705 PASS - Patient data handling compliant</li> <li>Anti-Discrimination: \u274c FAIL - Age bias detected</li> </ul>"},{"location":"examples/healthcare-treatment-outcomes/#step-5-regulatory-recommendations","title":"Step 5: Regulatory Recommendations","text":""},{"location":"examples/healthcare-treatment-outcomes/#immediate-actions-required","title":"Immediate Actions Required","text":"<ol> <li> <p>Address Age Discrimination <pre><code># Consider clinical approaches:\n# - Age-stratified model validation\n# - Clinical outcome studies across age groups\n# - Bias mitigation in treatment protocols\n</code></pre></p> </li> <li> <p>Clinical Validation</p> </li> <li>Compare model predictions against clinical trial data</li> <li>Validate against diverse patient populations</li> <li> <p>Assess model calibration across risk strata</p> </li> <li> <p>Safety Monitoring</p> </li> <li>Implement false positive rate monitoring</li> <li>Establish clinical override protocols</li> <li>Monitor for treatment delays due to model predictions</li> </ol>"},{"location":"examples/healthcare-treatment-outcomes/#long-term-compliance-strategy","title":"Long-term Compliance Strategy","text":"<ol> <li>Ongoing Clinical Monitoring</li> <li>Regular outcome audits against model predictions</li> <li>Demographic outcome tracking and analysis</li> <li> <p>Model performance monitoring across clinical settings</p> </li> <li> <p>FDA Compliance Program</p> </li> <li>Establish software validation procedures</li> <li>Clinical evaluation protocol development</li> <li> <p>Post-market surveillance planning</p> </li> <li> <p>Quality Management</p> </li> <li>Clinical decision support oversight committee</li> <li>Regular bias and safety audits</li> <li>Continuous model improvement processes</li> </ol>"},{"location":"examples/healthcare-treatment-outcomes/#step-6-business-impact-analysis","title":"Step 6: Business Impact Analysis","text":""},{"location":"examples/healthcare-treatment-outcomes/#clinical-impact","title":"Clinical Impact","text":"<p>Current Model: - Treatment success prediction: 82% accuracy - Clinical decision support: Improved treatment planning - Resource allocation: Better matching of treatments to patients - Outcome optimization: Data-driven clinical improvements</p> <p>Safety Considerations: - False positive risk: Potential for overconfidence in treatment success - False negative risk: Potential for missing treatment failures - Clinical override: Need for physician judgment integration</p>"},{"location":"examples/healthcare-treatment-outcomes/#regulatory-risk-mitigation","title":"Regulatory Risk Mitigation","text":"<p>Before Audit: - Potential FDA violations if bias undetected - Clinical safety concerns without proper validation - Discrimination liability without fairness analysis</p> <p>After Audit: - Documented compliance with FDA SaMD requirements - Demonstrated fairness across demographic groups - Clear clinical validation and safety protocols</p>"},{"location":"examples/healthcare-treatment-outcomes/#step-7-next-steps-and-recommendations","title":"Step 7: Next Steps and Recommendations","text":""},{"location":"examples/healthcare-treatment-outcomes/#technical-improvements","title":"Technical Improvements","text":"<ol> <li>Model Enhancement</li> <li>Age-stratified model development</li> <li>Clinical outcome validation studies</li> <li> <p>Integration with electronic health records</p> </li> <li> <p>Safety Features</p> </li> <li>Confidence interval reporting for predictions</li> <li>Clinical override mechanisms</li> <li> <p>Risk stratification for different patient groups</p> </li> <li> <p>Advanced Analytics</p> </li> <li>Treatment response prediction</li> <li>Adverse event probability modeling</li> <li>Personalized treatment recommendations</li> </ol>"},{"location":"examples/healthcare-treatment-outcomes/#operational-changes","title":"Operational Changes","text":"<ol> <li>Clinical Integration</li> <li>Real-time decision support dashboards</li> <li>Integration with hospital information systems</li> <li> <p>Clinician training on model interpretation</p> </li> <li> <p>Regulatory Compliance</p> </li> <li>FDA pre-market notification preparation</li> <li>Clinical evaluation protocol development</li> <li> <p>Post-market surveillance implementation</p> </li> <li> <p>Quality Assurance</p> </li> <li>Clinical decision support governance</li> <li>Regular model validation and updates</li> <li>Bias monitoring and mitigation programs</li> </ol>"},{"location":"examples/healthcare-treatment-outcomes/#conclusion","title":"Conclusion","text":"<p>This healthcare treatment outcomes audit revealed a clinically useful model with important age-based disparities that require immediate attention for safe and equitable clinical deployment. The audit demonstrated:</p> <p>Strengths: - Strong predictive performance (82% accuracy, 89% AUC) - Clinically meaningful feature importance aligned with medical knowledge - Comprehensive bias detection across multiple demographic dimensions</p> <p>Critical Issues: - Age discrimination exceeding clinical safety thresholds - Need for enhanced clinical validation against diverse populations - Safety considerations for false positive/negative rates</p> <p>Action Plan: 1. Address age-based disparities through clinical validation 2. Implement enhanced safety monitoring protocols 3. Conduct comprehensive FDA compliance review 4. Deploy with ongoing clinical outcome monitoring</p> <p>This tutorial demonstrates how GlassAlpha enables thorough, regulatory-ready ML auditing for clinical decision support systems, providing the detailed analysis necessary for responsible AI deployment in healthcare settings.</p>"},{"location":"examples/healthcare-treatment-outcomes/#additional-resources","title":"Additional Resources","text":"<ul> <li>Configuration Guide - Detailed configuration options</li> <li>CLI Reference - Complete command documentation</li> <li>Compliance Overview - Healthcare regulatory framework guidance</li> <li>Troubleshooting Guide - Common issues and solutions</li> </ul> <p>For questions or support, please visit our GitHub repository or contact our team.</p>"},{"location":"examples/insurance-compliance-mapping/","title":"Insurance Risk Assessment - Regulatory Compliance Mapping","text":"<p>This document maps the insurance risk assessment example to specific regulatory requirements and compliance frameworks applicable to automated insurance underwriting systems.</p>"},{"location":"examples/insurance-compliance-mapping/#regulatory-frameworks-addressed","title":"Regulatory Frameworks Addressed","text":""},{"location":"examples/insurance-compliance-mapping/#1-state-insurance-rate-regulation","title":"1. State Insurance Rate Regulation","text":"<p>Primary Authority: State Insurance Departments (varies by state)</p> <p>Key Requirements: - Actuarial Justification: Premiums must be based on sound actuarial principles - Rate Discrimination: Prohibited discrimination based on protected characteristics - Transparency: Clear explanation of rating factors and methodology</p> <p>GlassAlpha Mapping: - Performance Metrics: Accuracy, precision, recall validate actuarial soundness - Fairness Analysis: Demographic parity ensures non-discriminatory rates - SHAP Explanations: Provide transparent rating factor explanations - Audit Trail: Complete documentation for regulatory filings</p>"},{"location":"examples/insurance-compliance-mapping/#2-unfair-discrimination-laws","title":"2. Unfair Discrimination Laws","text":"<p>Primary Authority: State Insurance Codes, NAIC Model Laws</p> <p>Key Requirements: - Protected Classes: Cannot discriminate based on race, color, religion, national origin, sex, marital status, age, or disability - Rate Equity: Similar risk profiles must have similar rates - Justification: Any rate differences must be actuarially justified</p> <p>GlassAlpha Mapping: - Protected Attributes: Gender, age group analysis for discrimination detection - Equal Opportunity: Ensures equal treatment of qualified applicants - Equalized Odds: Equal false positive/negative rates across groups - Bias Detection: Automated identification of discriminatory patterns</p>"},{"location":"examples/insurance-compliance-mapping/#3-consumer-protection-laws","title":"3. Consumer Protection Laws","text":"<p>Federal Authority: Federal Trade Commission Act State Authority: Unfair and Deceptive Acts and Practices (UDAP) laws</p> <p>Key Requirements: - Transparency: Clear disclosure of automated decision-making - Right to Explanation: Consumers entitled to understand decisions - Accuracy: Reasonable procedures to ensure data accuracy - Dispute Resolution: Process for challenging adverse decisions</p> <p>GlassAlpha Mapping: - SHAP Explanations: Individual prediction explanations for consumers - Data Validation: Schema validation ensures data quality - Audit Reports: Comprehensive documentation for dispute resolution - Manifest Tracking: Complete provenance for regulatory inquiries</p>"},{"location":"examples/insurance-compliance-mapping/#4-data-privacy-regulations","title":"4. Data Privacy Regulations","text":"<p>Federal Authority: Gramm-Leach-Bliley Act (GLBA) State Authority: California Consumer Privacy Act (CCPA), Virginia Consumer Data Protection Act</p> <p>Key Requirements: - Data Minimization: Only collect necessary personal information - Purpose Limitation: Use data only for stated insurance purposes - Consumer Rights: Access, deletion, portability, opt-out rights - Security: Reasonable safeguards for personal information</p> <p>GlassAlpha Mapping: - Protected Attributes: Explicit handling of sensitive demographic data - Data Processing Documentation: Audit trail of data usage - Privacy-Aware Analysis: Fairness metrics respecting privacy constraints - Compliance Reporting: Documentation for privacy impact assessments</p>"},{"location":"examples/insurance-compliance-mapping/#compliance-audit-checklist","title":"Compliance Audit Checklist","text":""},{"location":"examples/insurance-compliance-mapping/#pre-audit-preparation","title":"Pre-Audit Preparation","text":"<ul> <li>[ ] Data Inventory: Catalog all data sources and collection methods</li> <li>[ ] Regulatory Mapping: Identify applicable state and federal requirements</li> <li>[ ] Model Documentation: Document model development methodology</li> <li>[ ] Testing Data: Prepare representative test datasets</li> <li>[ ] Stakeholder Review: Legal, compliance, and actuarial team review</li> </ul>"},{"location":"examples/insurance-compliance-mapping/#model-validation-requirements","title":"Model Validation Requirements","text":"<ul> <li>[ ] Statistical Soundness: Validate model accuracy and reliability</li> <li>[ ] Actuarial Justification: Document risk factors and their relationships</li> <li>[ ] Discrimination Testing: Analyze for bias across protected groups</li> <li>[ ] Sensitivity Analysis: Test model response to input changes</li> <li>[ ] Benchmarking: Compare against industry standards</li> </ul>"},{"location":"examples/insurance-compliance-mapping/#fairness-and-bias-assessment","title":"Fairness and Bias Assessment","text":"<ul> <li>[ ] Protected Class Analysis: Test for discrimination across age, gender, race, etc.</li> <li>[ ] Proxy Discrimination: Identify features that may proxy for protected characteristics</li> <li>[ ] Geographic Analysis: Ensure location factors don't create discriminatory effects</li> <li>[ ] Socioeconomic Analysis: Assess impact on different income groups</li> <li>[ ] Intersectional Analysis: Consider multiple protected characteristics together</li> </ul>"},{"location":"examples/insurance-compliance-mapping/#documentation-and-reporting","title":"Documentation and Reporting","text":"<ul> <li>[ ] Technical Documentation: Complete model specification and validation</li> <li>[ ] Business Justification: Clear explanation of business necessity</li> <li>[ ] Risk Assessment: Identification and mitigation of potential harms</li> <li>[ ] Consumer Communications: Plain language explanations for policyholders</li> <li>[ ] Regulatory Filings: Prepare required state insurance department submissions</li> </ul>"},{"location":"examples/insurance-compliance-mapping/#risk-mitigation-strategies","title":"Risk Mitigation Strategies","text":""},{"location":"examples/insurance-compliance-mapping/#technical-mitigation","title":"Technical Mitigation","text":"<ol> <li>Feature Engineering: Remove or transform potentially biased features</li> <li>Fairness Constraints: Add fairness objectives to model training</li> <li>Post-Processing: Adjust model outputs to achieve equity</li> <li>Ensemble Methods: Combine multiple models to reduce bias</li> <li>Regularization: Penalize discriminatory patterns during training</li> </ol>"},{"location":"examples/insurance-compliance-mapping/#process-mitigation","title":"Process Mitigation","text":"<ol> <li>Bias Testing: Regular audits for discriminatory effects</li> <li>Human Oversight: Manual review of high-impact decisions</li> <li>Appeals Process: Clear procedure for challenging model decisions</li> <li>Stakeholder Engagement: Input from diverse groups in model development</li> <li>Continuous Monitoring: Ongoing assessment of model performance</li> </ol>"},{"location":"examples/insurance-compliance-mapping/#documentation-mitigation","title":"Documentation Mitigation","text":"<ol> <li>Transparency Reports: Regular publication of model performance and bias metrics</li> <li>Regulatory Reporting: Timely submission of required compliance documentation</li> <li>Consumer Education: Clear explanations of how models affect policy pricing</li> <li>Internal Training: Education of staff on fair insurance practices</li> <li>Third-Party Audits: Independent validation of compliance measures</li> </ol>"},{"location":"examples/insurance-compliance-mapping/#compliance-verification","title":"Compliance Verification","text":""},{"location":"examples/insurance-compliance-mapping/#internal-verification","title":"Internal Verification","text":"<ul> <li>Model Validation: Statistical testing of model assumptions</li> <li>Bias Assessment: Comprehensive analysis of demographic impacts</li> <li>Documentation Review: Legal and compliance team review</li> <li>Stakeholder Testing: Business unit validation of model outputs</li> <li>Quality Assurance: Independent review of model implementation</li> </ul>"},{"location":"examples/insurance-compliance-mapping/#external-verification","title":"External Verification","text":"<ul> <li>Regulatory Review: State insurance department examination</li> <li>Actuarial Certification: Independent actuarial opinion</li> <li>Third-Party Audit: External compliance assessment</li> <li>Consumer Testing: Real-world validation with policyholder data</li> <li>Industry Benchmarking: Comparison against peer institutions</li> </ul>"},{"location":"examples/insurance-compliance-mapping/#regulatory-reporting-requirements","title":"Regulatory Reporting Requirements","text":""},{"location":"examples/insurance-compliance-mapping/#rate-filing-requirements","title":"Rate Filing Requirements","text":"<ul> <li>Actuarial Memorandum: Detailed explanation of rating methodology</li> <li>Data Sources: Documentation of all data used in model development</li> <li>Validation Results: Statistical testing and performance metrics</li> <li>Fairness Analysis: Demonstration of non-discriminatory practices</li> <li>Business Justification: Clear explanation of business necessity</li> </ul>"},{"location":"examples/insurance-compliance-mapping/#consumer-disclosure-requirements","title":"Consumer Disclosure Requirements","text":"<ul> <li>Pricing Explanation: Clear disclosure of factors affecting premiums</li> <li>Automated Decision Notice: Notification when algorithms used in decisions</li> <li>Appeal Rights: Information on how to challenge adverse decisions</li> <li>Data Rights: Explanation of consumer data rights and options</li> <li>Contact Information: Clear channels for questions and complaints</li> </ul>"},{"location":"examples/insurance-compliance-mapping/#conclusion","title":"Conclusion","text":"<p>This insurance risk assessment example demonstrates comprehensive compliance with insurance regulatory requirements through:</p> <ul> <li>Statistical Rigor: Validated model performance and reliability</li> <li>Fairness Analysis: Systematic bias detection and mitigation</li> <li>Transparency: Clear explanations and complete audit trails</li> <li>Documentation: Regulatory-ready reporting and justification</li> <li>Risk Management: Proactive identification and mitigation of compliance risks</li> </ul> <p>The GlassAlpha audit provides insurance companies with the tools and methodology needed to ensure their automated underwriting systems comply with regulatory requirements while maintaining actuarial soundness and business viability.</p>"},{"location":"examples/insurance-risk-assessment/","title":"Insurance Risk Assessment Audit Tutorial","text":"<p>Complete walkthrough of performing a comprehensive ML audit on an insurance risk assessment model using GlassAlpha. This tutorial demonstrates how to audit automated underwriting systems for compliance with insurance regulations and fair lending laws.</p>"},{"location":"examples/insurance-risk-assessment/#overview","title":"Overview","text":"<p>Insurance companies use machine learning models to assess risk and set premiums for auto insurance policies. These models must comply with:</p> <ul> <li>Rate Regulation: Premiums must be based on actuarial risk factors, not discriminatory criteria</li> <li>Fair Lending Laws: Equal treatment across protected demographic groups</li> <li>Transparency Requirements: Ability to explain automated decisions to consumers</li> <li>Actuarial Standards: Sound statistical practices and documentation</li> </ul>"},{"location":"examples/insurance-risk-assessment/#what-youll-learn","title":"What You'll Learn","text":"<ul> <li>How to configure GlassAlpha for insurance risk models</li> <li>Interpreting performance metrics for insurance underwriting</li> <li>Understanding SHAP explanations for premium decisions</li> <li>Identifying bias in risk assessment across demographic groups</li> <li>Generating regulatory-ready audit reports for insurance compliance</li> </ul>"},{"location":"examples/insurance-risk-assessment/#regulatory-context","title":"Regulatory Context","text":"<p>Insurance risk assessment models must comply with:</p> <ul> <li>Insurance Rate Regulation: State insurance departments require actuarial justification</li> <li>Unfair Discrimination Laws: Prohibit discrimination based on protected characteristics</li> <li>Consumer Protection Laws: Right to explanation for automated decisions</li> <li>Data Privacy Regulations: GDPR, CCPA requirements for personal data use</li> </ul>"},{"location":"examples/insurance-risk-assessment/#prerequisites","title":"Prerequisites","text":"<ul> <li>GlassAlpha installed (Installation Guide)</li> <li>Basic understanding of insurance underwriting and risk assessment</li> <li>Familiarity with bias and fairness concepts in algorithmic decision-making</li> </ul>"},{"location":"examples/insurance-risk-assessment/#step-1-understanding-the-insurance-dataset","title":"Step 1: Understanding the Insurance Dataset","text":""},{"location":"examples/insurance-risk-assessment/#dataset-characteristics","title":"Dataset Characteristics","text":"<p>The insurance risk dataset contains:</p> <ul> <li>10,000 synthetic auto insurance policies</li> <li>17 features covering demographics, vehicle information, and driving history</li> <li>Binary target: Filed insurance claim (1) vs No claim (0)</li> <li>Protected attributes: Gender, age groups, socioeconomic indicators</li> </ul>"},{"location":"examples/insurance-risk-assessment/#key-features","title":"Key Features","text":"<p>Demographic &amp; Personal Information: - <code>age</code> - Policyholder age (18-80 years) - <code>gender</code> - Policyholder gender (protected attribute) - <code>age_group</code> - Age categorization (protected attribute) - <code>marital_status</code> - Marital status indicator - <code>occupation_risk</code> - Occupation-based risk category</p> <p>Vehicle &amp; Coverage Information: - <code>vehicle_value</code> - Vehicle replacement cost (\\(5,000-\\)100,000) - <code>annual_mileage</code> - Miles driven per year (0-50,000) - <code>vehicle_age</code> - Vehicle age in years (0-15) - <code>policy_type</code> - Coverage level (Basic/Standard/Premium) - <code>deductible_amount</code> - Policy deductible (\\(250-\\)2,500) - <code>coverage_limit</code> - Maximum coverage amount (\\(50,000-\\)500,000)</p> <p>Risk Factors: - <code>years_insured</code> - Insurance history (0-50 years) - <code>previous_claims</code> - Number of prior claims (0-5) - <code>credit_score</code> - Credit rating (300-850) - <code>location_risk_score</code> - Geographic risk factor (0-100) - <code>safe_driver_discount</code> - Safe driving program participation - <code>discount_eligibility</code> - Eligibility for discounts</p>"},{"location":"examples/insurance-risk-assessment/#step-2-configuration-setup","title":"Step 2: Configuration Setup","text":"<p>Create a configuration file for the insurance risk audit:</p> <pre><code># insurance_risk_audit.yaml\naudit_profile: insurance_risk_assessment\n\n# Reproducibility for regulatory compliance\nreproducibility:\n  random_seed: 42\n\n# Data configuration\ndata:\n  path: ~/.glassalpha/data/insurance_risk.csv\n  target_column: claim_outcome\n  protected_attributes:\n    - gender\n    - age_group\n\n# LightGBM model for insurance risk assessment\nmodel:\n  type: lightgbm\n  params:\n    objective: binary\n    metric: binary_logloss\n    n_estimators: 100\n    max_depth: 6\n    learning_rate: 0.1\n    subsample: 0.8\n    colsample_bytree: 0.8\n\n# Explanation configuration\nexplainers:\n  strategy: first_compatible\n  priority:\n    - treeshap    # LightGBM supports TreeSHAP\n    - kernelshap  # Universal fallback\n\n# Insurance-specific metrics\nmetrics:\n  performance:\n    metrics:\n      - accuracy\n      - precision    # Minimize false positives (unnecessary rate increases)\n      - recall       # Minimize false negatives (missed high-risk cases)\n      - f1\n      - auc_roc\n\n  fairness:\n    metrics:\n      - demographic_parity    # Equal approval rates across groups\n      - equal_opportunity     # Equal true positive rates\n      - equalized_odds        # Equal TPR and FPR\n\n# Professional audit report\nreport:\n  template: standard_audit\n  styling:\n    color_scheme: professional\n    compliance_statement: true\n</code></pre>"},{"location":"examples/insurance-risk-assessment/#step-3-running-the-audit","title":"Step 3: Running the Audit","text":"<p>Execute the insurance risk assessment audit:</p> <pre><code># Generate comprehensive audit\nglassalpha audit \\\n  --config insurance_risk_audit.yaml \\\n  --output insurance_risk_audit.pdf \\\n  --strict\n</code></pre>"},{"location":"examples/insurance-risk-assessment/#expected-execution","title":"Expected Execution","text":"<pre><code>GlassAlpha Audit Generation\n========================================\nLoading configuration from: insurance_risk_audit.yaml\nAudit profile: insurance_risk_assessment\nStrict mode: ENABLED\n\u26a0\ufe0f Strict mode enabled - enforcing regulatory compliance\n\nRunning audit pipeline...\n  Loading data and initializing components...\n\u2713 Audit pipeline completed in 3.87s\n\n\ud83d\udcca Audit Summary:\n  \u2705 Performance metrics: 6 computed\n     \u2705 accuracy: 78.4%\n  \u2696\ufe0f Fairness metrics: 12/12 computed\n     \u26a0\ufe0f Bias detected in: age_group.demographic_parity\n  \ud83d\udd0d Explanations: \u2705 Global feature importance\n     Most important: previous_claims (+0.287)\n  \ud83d\udccb Dataset: 10,000 samples, 17 features\n  \ud83d\udd27 Components: 3 selected\n     Model: lightgbm\n\nGenerating PDF report: insurance_risk_audit.pdf\n\u2713 Saved plot to /tmp/plots/shap_importance.png\n\u2713 Saved plot to /tmp/plots/performance_summary.png\n\u2713 Saved plot to /tmp/plots/fairness_analysis.png\n\u2713 Saved plot to /tmp/plots/confusion_matrix.png\n\n\ud83c\udf89 Audit Report Generated Successfully!\n==================================================\n\ud83d\udcc1 Output: /path/to/insurance_risk_audit.pdf\n\ud83d\udcca Size: 1,456,231 bytes (1.4 MB)\n\u23f1\ufe0f Total time: 4.92s\n   \u2022 Pipeline: 3.87s\n   \u2022 PDF generation: 1.05s\n\n\ud83d\udee1\ufe0f Strict mode: Report meets regulatory compliance requirements\n</code></pre>"},{"location":"examples/insurance-risk-assessment/#step-4-interpreting-the-results","title":"Step 4: Interpreting the Results","text":""},{"location":"examples/insurance-risk-assessment/#model-performance-analysis","title":"Model Performance Analysis","text":"<p>Overall Performance: - Accuracy: 78.4% - Model correctly classifies 78% of insurance policies - AUC-ROC: 0.847 - Strong ability to distinguish high-risk from low-risk policies - Precision: 76.2% - Of policies predicted as high-risk, 76% actually filed claims - Recall: 72.1% - Model identifies 72% of all actual high-risk policies</p> <p>Insurance Business Interpretation: - Conservative Risk Assessment: Higher precision than recall (safer underwriting) - False Positive Rate: 24% of low-risk policies incorrectly flagged as high-risk - False Negative Rate: 28% of high-risk policies not identified - Business Impact: Balance between over-charging safe drivers vs. under-charging risky drivers</p>"},{"location":"examples/insurance-risk-assessment/#shap-explanations","title":"SHAP Explanations","text":"<p>Global Feature Importance (Top 5):</p> <ol> <li><code>previous_claims</code> (+0.287)</li> <li>Most predictive factor in risk assessment</li> <li>Each additional claim increases risk score significantly</li> <li> <p>Aligns with actuarial principles and insurance industry standards</p> </li> <li> <p><code>age</code> (+0.234)</p> </li> <li>Younger drivers show higher risk patterns</li> <li>Statistical correlation with accident frequency</li> <li> <p>Must be monitored for age discrimination concerns</p> </li> <li> <p><code>annual_mileage</code> (+0.198)</p> </li> <li>Higher mileage correlates with increased accident probability</li> <li>Direct relationship to exposure (time on road)</li> <li> <p>Standard actuarial risk factor</p> </li> <li> <p><code>vehicle_value</code> (-0.156)</p> </li> <li>Higher value vehicles associated with lower risk</li> <li>May indicate socioeconomic factors or careful ownership</li> <li> <p>Requires fairness analysis across income groups</p> </li> <li> <p><code>location_risk_score</code> (+0.142)</p> </li> <li>Geographic risk factors significantly impact predictions</li> <li>Must ensure not proxying for protected demographic characteristics</li> <li>Urban vs. rural differences in accident rates</li> </ol> <p>Individual Policy Example: For a 28-year-old male with 2 previous claims, driving 15,000 miles annually:</p> <ul> <li>Base risk score: 0.35 (population average)</li> <li>Previous claims (2): +0.18 risk increase</li> <li>Age (28): +0.12 risk increase</li> <li>Annual mileage (15,000): +0.08 risk increase</li> <li>Vehicle value (high): -0.06 risk decrease</li> <li>Final risk score: 0.67 (high-risk classification)</li> </ul>"},{"location":"examples/insurance-risk-assessment/#fairness-analysis-results","title":"Fairness Analysis Results","text":"<p>Demographic Parity Analysis:</p> <p>Age Group Bias (DETECTED): - Young (18-24): 34.2% predicted high-risk rate - Young Adult (25-34): 28.7% predicted high-risk rate - Middle Age (35-49): 22.1% predicted high-risk rate - Senior (50-64): 18.9% predicted high-risk rate - Elderly (65+): 15.3% predicted high-risk rate - Maximum difference: 18.9% (Young vs. Elderly) - Conclusion: Significant age-based disparities detected</p> <p>Gender Analysis: - Male: 26.4% predicted high-risk rate - Female: 25.8% predicted high-risk rate - Difference: 0.6% (within acceptable range) - Conclusion: No significant gender bias detected</p> <p>Equal Opportunity Analysis (True Positive Rate Parity): - Young: 68.4% of actual high-risk young drivers correctly identified - Middle Age: 74.2% of actual high-risk middle-aged drivers correctly identified - Difference: 5.8% (borderline concern) - Conclusion: Slight disparity in identifying high-risk drivers across age groups</p>"},{"location":"examples/insurance-risk-assessment/#risk-assessment","title":"Risk Assessment","text":"<p>High Risk Findings:</p> <ol> <li>Age-Based Discrimination Risk</li> <li>18.9% difference in predicted risk rates across age groups</li> <li>Exceeds typical insurance regulatory thresholds</li> <li>Could result in age discrimination claims</li> <li> <p>Requires immediate model adjustment or feature engineering</p> </li> <li> <p>Socioeconomic Proxy Risk</p> </li> <li>Vehicle value and location factors may proxy for protected characteristics</li> <li>Geographic risk scores could reflect demographic patterns</li> <li>Requires careful feature analysis and validation</li> </ol> <p>Medium Risk Findings:</p> <ol> <li>Model Interpretability</li> <li>Complex interactions between age, mileage, and claims history</li> <li>Requires domain expertise to validate business logic</li> <li>Consider simpler models for higher interpretability</li> </ol> <p>Compliance Assessment:</p> <ul> <li>Rate Regulation: \u26a0\ufe0f REVIEW - Age-based patterns may violate actuarial standards</li> <li>Fair Lending: \u274c FAIL - Age discrimination detected</li> <li>Transparency: \u2705 PASS - SHAP explanations provide clear rationale</li> <li>Documentation: \u2705 PASS - Complete audit trail and methodology</li> </ul>"},{"location":"examples/insurance-risk-assessment/#step-5-regulatory-recommendations","title":"Step 5: Regulatory Recommendations","text":""},{"location":"examples/insurance-risk-assessment/#immediate-actions-required","title":"Immediate Actions Required","text":"<ol> <li> <p>Address Age Discrimination <pre><code># Consider preprocessing approaches:\n# - Age binning to reduce granularity\n# - Remove age-correlated features\n# - Apply fairness constraints during training\n</code></pre></p> </li> <li> <p>Feature Engineering Review</p> </li> <li>Audit features correlated with protected age characteristics</li> <li>Consider removing or transforming biased location factors</li> <li> <p>Implement fairness-aware feature selection</p> </li> <li> <p>Model Adjustment Options</p> </li> <li>Retrain with fairness constraints</li> <li>Consider ensemble methods with bias reduction</li> <li>Validate improvements with new audit</li> </ol>"},{"location":"examples/insurance-risk-assessment/#long-term-compliance-strategy","title":"Long-term Compliance Strategy","text":"<ol> <li>Ongoing Monitoring</li> <li>Regular bias audits on new policy data</li> <li>Statistical tests for demographic parity</li> <li> <p>Performance monitoring across protected groups</p> </li> <li> <p>Documentation Requirements</p> </li> <li>Maintain complete actuarial justification</li> <li>Document bias mitigation efforts</li> <li> <p>Prepare regulatory submission packages</p> </li> <li> <p>Process Improvements</p> </li> <li>Establish fairness review boards</li> <li>Implement bias testing in model development</li> <li>Create remediation procedures for biased decisions</li> </ol>"},{"location":"examples/insurance-risk-assessment/#step-6-business-impact-analysis","title":"Step 6: Business Impact Analysis","text":""},{"location":"examples/insurance-risk-assessment/#financial-impact","title":"Financial Impact","text":"<p>Current Model: - Risk assessment accuracy: 78.4% - False positive rate: 24% (safe drivers over-charged) - False negative rate: 28% (risky drivers under-charged) - Premium impact: Moderate (balanced risk management)</p> <p>With Bias Correction: - May reduce premiums for younger drivers - Could slightly increase premiums for some groups - Compliance benefits outweigh small financial trade-offs</p>"},{"location":"examples/insurance-risk-assessment/#legal-risk-mitigation","title":"Legal Risk Mitigation","text":"<p>Before Correction: - High risk of age discrimination violations - Potential for class-action lawsuits - Regulatory enforcement actions - Reputational damage</p> <p>After Correction: - Compliance with fair insurance practices - Reduced legal exposure - Improved consumer trust and market position</p>"},{"location":"examples/insurance-risk-assessment/#step-7-next-steps-and-recommendations","title":"Step 7: Next Steps and Recommendations","text":""},{"location":"examples/insurance-risk-assessment/#technical-remediation","title":"Technical Remediation","text":"<ol> <li> <p>Implement Fairness Constraints <pre><code># Example: Add fairness penalty to LightGBM training\n# Consider libraries like fairlearn or aif360 for insurance-specific fairness\n</code></pre></p> </li> <li> <p>Alternative Modeling Approaches</p> </li> <li>Pre-processing: Age group binning or feature removal</li> <li>In-processing: Fairness-constrained optimization</li> <li> <p>Post-processing: Adjust predictions to achieve parity</p> </li> <li> <p>Validation Strategy</p> </li> <li>Cross-validation with fairness metrics</li> <li>Holdout testing on diverse demographic groups</li> <li>A/B testing for production deployment</li> </ol>"},{"location":"examples/insurance-risk-assessment/#operational-changes","title":"Operational Changes","text":"<ol> <li>Model Governance</li> <li>Establish bias testing requirements for all models</li> <li>Create fairness review processes</li> <li> <p>Implement continuous monitoring systems</p> </li> <li> <p>Regulatory Compliance</p> </li> <li>Engage with state insurance departments</li> <li>Prepare actuarial memorandums for rate filings</li> <li> <p>Document all model changes and validations</p> </li> <li> <p>Stakeholder Engagement</p> </li> <li>Train underwriting staff on fair practices</li> <li>Engage with compliance and legal teams</li> <li>Communicate changes to policyholders</li> </ol>"},{"location":"examples/insurance-risk-assessment/#conclusion","title":"Conclusion","text":"<p>This insurance risk assessment audit revealed a technically sound model with significant age-based bias that requires immediate attention before production deployment. The audit demonstrated:</p> <p>Strengths: - Strong predictive performance (78% accuracy, 0.85 AUC) - Interpretable feature importance aligned with actuarial principles - Comprehensive bias detection and measurement</p> <p>Critical Issues: - Age discrimination exceeding regulatory thresholds - Potential socioeconomic proxy discrimination - Non-compliance with fair insurance practices</p> <p>Action Plan: 1. Implement bias mitigation techniques 2. Retrain model with fairness constraints 3. Re-audit improved model 4. Deploy with ongoing monitoring</p> <p>This tutorial demonstrates how GlassAlpha enables thorough, regulatory-ready ML auditing that identifies both technical performance and compliance risks, providing the detailed analysis necessary for responsible AI deployment in regulated insurance markets.</p>"},{"location":"examples/insurance-risk-assessment/#additional-resources","title":"Additional Resources","text":"<ul> <li>Configuration Guide - Detailed configuration options</li> <li>CLI Reference - Complete command documentation</li> <li>Compliance Overview - Insurance regulatory framework guidance</li> <li>Troubleshooting Guide - Common issues and solutions</li> </ul> <p>For questions or support, please visit our GitHub repository or contact our team.</p>"},{"location":"examples/quick-start-audit/","title":"Quick Start: Your First Audit in 5 Minutes","text":"<p>This example shows the fastest way to generate an ML audit report with GlassAlpha using the built-in German Credit dataset and minimal configuration.</p>"},{"location":"examples/quick-start-audit/#overview","title":"Overview","text":"<p>Perfect for:</p> <ul> <li>First-time users learning GlassAlpha basics</li> <li>Quick demonstrations of audit capabilities</li> <li>Testing installations and verifying functionality</li> <li>Understanding core concepts before advanced usage</li> </ul>"},{"location":"examples/quick-start-audit/#prerequisites","title":"Prerequisites","text":"<ul> <li>GlassAlpha installed (Installation Guide)</li> <li>5 minutes of time</li> <li>No additional data required (uses built-in dataset)</li> </ul>"},{"location":"examples/quick-start-audit/#step-1-verify-installation","title":"Step 1: Verify Installation","text":"<pre><code># Confirm GlassAlpha is working\nglassalpha --version\nglassalpha list\n</code></pre> <p>Expected output shows available models, explainers, and metrics.</p>"},{"location":"examples/quick-start-audit/#step-2-run-your-first-audit","title":"Step 2: Run Your First Audit","text":"<p>Use the minimal configuration that comes with GlassAlpha:</p> <pre><code># Generate audit with minimal configuration\nglassalpha audit \\\n  --config configs/german_credit_simple.yaml \\\n  --output my_first_audit.pdf\n</code></pre> <p>What happens:</p> <ul> <li>Data loading: Automatically downloads German Credit dataset</li> <li>Model training: Trains XGBoost classifier with default parameters</li> <li>Explanation generation: Creates SHAP explanations for model decisions</li> <li>Metrics computation: Calculates performance and fairness metrics</li> <li>Report creation: Generates professional PDF report</li> </ul> <p>Execution time: 10-30 seconds on typical hardware.</p>"},{"location":"examples/quick-start-audit/#step-3-review-your-report","title":"Step 3: Review Your Report","text":"<p>Open <code>my_first_audit.pdf</code> to see:</p> <ol> <li>Executive Summary</li> <li>Model performance overview</li> <li>Key fairness findings</li> <li> <p>Regulatory compliance status</p> </li> <li> <p>Model Performance</p> </li> <li>Accuracy: ~77% (typical for German Credit dataset)</li> <li>Precision, recall, F1 scores</li> <li> <p>ROC curve and confusion matrix</p> </li> <li> <p>SHAP Explanations</p> </li> <li>Feature importance rankings</li> <li>Sample individual explanations</li> <li> <p>Waterfall plots showing decision factors</p> </li> <li> <p>Fairness Analysis</p> </li> <li>Demographic parity across gender and age groups</li> <li>Statistical significance testing</li> <li> <p>Bias detection results</p> </li> <li> <p>Reproducibility</p> </li> <li>Complete audit manifest</li> <li>Configuration hash and random seeds</li> <li>Data integrity verification</li> </ol>"},{"location":"examples/quick-start-audit/#understanding-the-configuration","title":"Understanding the Configuration","text":"<p>The minimal configuration (<code>configs/german_credit_simple.yaml</code>) contains:</p> <pre><code># Minimal audit configuration\naudit_profile: german_credit_default\nreproducibility:\n  random_seed: 42\n\n# Model configuration\nmodel:\n  type: xgboost\n  params:\n    n_estimators: 100\n    max_depth: 6\n    learning_rate: 0.1\n\n# Data configuration (uses built-in dataset)\ndata:\n  target_column: credit_risk\n  protected_attributes:\n    - gender\n    - age_group\n\n# Explainer configuration\nexplainers:\n  priority: [treeshap, kernelshap]\n\n# Metrics to compute\nmetrics:\n  performance: [accuracy, precision, recall, f1, auc_roc]\n  fairness: [demographic_parity, equal_opportunity]\n</code></pre> <p>Key concepts:</p> <ul> <li>audit_profile: Determines which components are used</li> <li>random_seed: Ensures reproducible results</li> <li>protected_attributes: Enable fairness analysis</li> <li>priority: Determines explainer selection order</li> </ul>"},{"location":"examples/quick-start-audit/#what-youve-accomplished","title":"What You've Accomplished","text":"<p>In 5 minutes, you've:</p> <ul> <li>\u2705 Generated a professional audit report suitable for compliance review</li> <li>\u2705 Performed bias detection across demographic groups</li> <li>\u2705 Created model explanations with SHAP</li> <li>\u2705 Established reproducibility with complete audit trails</li> <li>\u2705 Learned core concepts for advanced usage</li> </ul>"},{"location":"examples/quick-start-audit/#common-first-time-questions","title":"Common First-Time Questions","text":"<p>Q: Why did it use XGBoost? A: The configuration specifies <code>model.type: xgboost</code>. GlassAlpha supports XGBoost, LightGBM, and Logistic Regression.</p> <p>Q: Can I use my own data? A: Yes! Change <code>data.path</code> to your CSV file and update <code>target_column</code> and <code>feature_columns</code>. See Configuration Guide.</p> <p>Q: What if I get different results? A: Results should be identical with the same <code>random_seed</code>. Different results suggest configuration or data changes.</p> <p>Q: Is this suitable for production? A: This minimal example is for learning. Production usage requires additional validation, testing, and security considerations. See Production Deployment Guide.</p>"},{"location":"examples/quick-start-audit/#next-steps","title":"Next Steps","text":""},{"location":"examples/quick-start-audit/#try-different-models","title":"Try Different Models","text":"<pre><code># Use LightGBM instead of XGBoost\nglassalpha audit \\\n  --config configs/german_credit_simple.yaml \\\n  --output lightgbm_audit.pdf \\\n  --override '{\"model\": {\"type\": \"lightgbm\"}}'\n</code></pre>"},{"location":"examples/quick-start-audit/#add-strict-mode","title":"Add Strict Mode","text":"<pre><code># Enable regulatory compliance mode\nglassalpha audit \\\n  --config configs/german_credit_simple.yaml \\\n  --output strict_audit.pdf \\\n  --strict\n</code></pre>"},{"location":"examples/quick-start-audit/#explore-advanced-features","title":"Explore Advanced Features","text":"<ol> <li>Custom Configuration - Configuration Guide</li> <li>Detailed Example - German Credit Deep Dive</li> <li>Production Setup - Deployment Guide</li> <li>API Usage - API Reference</li> </ol>"},{"location":"examples/quick-start-audit/#use-your-own-data","title":"Use Your Own Data","text":"<pre><code># Create custom configuration\naudit_profile: tabular_compliance\nreproducibility:\n  random_seed: 42\n\ndata:\n  path: your_data.csv\n  target_column: your_target\n  protected_attributes:\n    - your_sensitive_attribute\n\nmodel:\n  type: xgboost\n\n# Save as my_config.yaml and run:\n# glassalpha audit --config my_config.yaml --output my_audit.pdf\n</code></pre>"},{"location":"examples/quick-start-audit/#troubleshooting","title":"Troubleshooting","text":"<p>Installation issues? \u2192 Installation Guide Configuration errors? \u2192 Configuration Guide Command problems? \u2192 CLI Reference General questions? \u2192 FAQ</p>"},{"location":"examples/quick-start-audit/#summary","title":"Summary","text":"<p>You've successfully generated your first ML audit report with GlassAlpha! The minimal configuration demonstrates core capabilities:</p> <ul> <li>Model training and evaluation</li> <li>Bias detection and fairness analysis</li> <li>Explainable AI with SHAP</li> <li>Professional report generation</li> <li>Complete reproducibility</li> </ul> <p>This foundation prepares you for advanced usage scenarios and production deployment in regulated industries.</p> <p>Ready for more? Explore the comprehensive German Credit example for detailed regulatory analysis and interpretation.</p>"},{"location":"getting-started/configuration/","title":"Configuration Guide","text":"<p>Complete guide to configuring GlassAlpha for different use cases, models, and compliance requirements.</p>"},{"location":"getting-started/configuration/#overview","title":"Overview","text":"<p>GlassAlpha uses YAML configuration files to define every aspect of the audit process. Configuration files are policy-as-code, enabling version control, review processes, and reproducible audits.</p>"},{"location":"getting-started/configuration/#basic-structure","title":"Basic Structure","text":"<pre><code># Required: Audit profile determines component selection\naudit_profile: tabular_compliance\n\n# Required: Reproducibility settings\nreproducibility:\n  random_seed: 42\n\n# Required: Data configuration\ndata:\n  path: data/my_dataset.csv\n  target_column: outcome\n\n# Required: Model configuration\nmodel:\n  type: xgboost\n\n# Optional: Additional sections\nexplainers: {...}\nmetrics: {...}\nreport: {...}\n</code></pre>"},{"location":"getting-started/configuration/#core-configuration-sections","title":"Core Configuration Sections","text":""},{"location":"getting-started/configuration/#audit-profile","title":"Audit Profile","text":"<p>The audit profile determines which components are available and what validations are enforced.</p> <pre><code># Determines the audit context and available components\naudit_profile: tabular_compliance  # Currently supported profile\n</code></pre> <p>Available Profiles: - <code>tabular_compliance</code> - Standard tabular ML compliance audit - <code>german_credit_default</code> - German Credit dataset specific profile</p>"},{"location":"getting-started/configuration/#reproducibility-settings","title":"Reproducibility Settings","text":"<p>Ensures deterministic, reproducible audit results.</p> <pre><code>reproducibility:\n  # Master random seed (required in strict mode)\n  random_seed: 42\n\n  # Optional: Advanced reproducibility settings\n  deterministic: true              # Enforce deterministic behavior\n  capture_environment: true        # Capture system information\n  validate_determinism: true       # Verify reproducibility\n</code></pre> <p>Best Practices: - Always set <code>random_seed</code> for reproducible results - Use the same seed for comparative audits - Document seed values in audit reports</p>"},{"location":"getting-started/configuration/#data-configuration","title":"Data Configuration","text":"<p>Defines the dataset and feature structure for the audit.</p> <pre><code>data:\n  # Required: Path to dataset\n  path: data/my_dataset.csv\n\n  # Required: Target column name\n  target_column: outcome\n\n  # Optional: Explicit feature columns\n  feature_columns:\n    - feature1\n    - feature2\n    - feature3\n\n  # Optional: Protected attributes for fairness analysis\n  protected_attributes:\n    - gender\n    - age_group\n    - ethnicity\n</code></pre> <p>Supported Data Formats: - CSV (<code>.csv</code>) - Parquet (<code>.parquet</code>) - Feather (<code>.feather</code>) - Pickle (<code>.pkl</code>)</p> <p>Feature Selection: - If <code>feature_columns</code> not specified, uses all columns except target - Protected attributes should be included in features for bias analysis - Features are automatically preprocessed based on data type</p>"},{"location":"getting-started/configuration/#model-configuration","title":"Model Configuration","text":"<p>Specifies the ML model to audit and its parameters.</p> <pre><code>model:\n  # Required: Model type (triggers appropriate wrapper)\n  type: xgboost\n\n  # Optional: Pre-trained model path\n  path: models/my_model.pkl\n\n  # Optional: Model parameters (for training)\n  params:\n    n_estimators: 100\n    max_depth: 6\n    learning_rate: 0.1\n    objective: binary:logistic\n</code></pre> <p>Supported Model Types: - <code>xgboost</code> - XGBoost gradient boosting - <code>lightgbm</code> - LightGBM gradient boosting - <code>logistic_regression</code> - Scikit-learn LogisticRegression - <code>sklearn_generic</code> - Generic scikit-learn models</p> <p>Model Loading vs Training: - If <code>path</code> exists: loads pre-trained model - If <code>path</code> missing: trains new model with <code>params</code> - Parameters are passed to the underlying library</p>"},{"location":"getting-started/configuration/#explainer-configuration","title":"Explainer Configuration","text":"<p>Controls how model predictions are explained and interpreted.</p> <pre><code>explainers:\n  # Required: Selection strategy\n  strategy: first_compatible\n\n  # Required: Priority order (deterministic selection)\n  priority:\n    - treeshap      # First choice for tree models\n    - kernelshap    # Fallback for any model\n\n  # Optional: Explainer-specific configuration\n  config:\n    treeshap:\n      max_samples: 1000          # Samples for SHAP computation\n      check_additivity: true     # Verify SHAP properties\n\n    kernelshap:\n      n_samples: 500            # Model evaluations\n      background_size: 100      # Background dataset size\n</code></pre> <p>Available Explainers: - <code>treeshap</code> - Exact SHAP values for tree models (XGBoost, LightGBM) - <code>kernelshap</code> - Model-agnostic SHAP approximation - <code>noop</code> - No-op placeholder (for testing)</p> <p>Selection Strategies: - <code>first_compatible</code> - Use first explainer compatible with model - <code>best_available</code> - Select highest-priority compatible explainer</p>"},{"location":"getting-started/configuration/#metrics-configuration","title":"Metrics Configuration","text":"<p>Defines which performance and fairness metrics to compute.</p> <pre><code>metrics:\n  # Performance evaluation metrics\n  performance:\n    metrics:\n      - accuracy\n      - precision\n      - recall\n      - f1\n      - auc_roc\n      - classification_report\n\n  # Fairness and bias detection metrics\n  fairness:\n    metrics:\n      - demographic_parity\n      - equal_opportunity\n      - equalized_odds\n      - predictive_parity\n\n    # Optional: Bias tolerance thresholds\n    config:\n      demographic_parity:\n        threshold: 0.05         # 5% maximum group difference\n\n  # Optional: Data drift detection metrics\n  drift:\n    metrics:\n      - population_stability_index\n      - kl_divergence\n      - kolmogorov_smirnov\n</code></pre> <p>Performance Metrics: - <code>accuracy</code> - Overall classification accuracy - <code>precision</code> - Positive predictive value - <code>recall</code> - True positive rate (sensitivity) - <code>f1</code> - Harmonic mean of precision and recall - <code>auc_roc</code> - Area under ROC curve - <code>classification_report</code> - Comprehensive per-class metrics</p> <p>Fairness Metrics: - <code>demographic_parity</code> - Equal positive prediction rates across groups - <code>equal_opportunity</code> - Equal true positive rates across groups - <code>equalized_odds</code> - Equal TPR and FPR across groups - <code>predictive_parity</code> - Equal precision across groups</p>"},{"location":"getting-started/configuration/#report-configuration","title":"Report Configuration","text":"<p>Controls the format and content of generated audit reports.</p> <pre><code>report:\n  # Report template (determines structure and styling)\n  template: standard_audit\n\n  # Output format\n  output_format: pdf\n\n  # Optional: Report sections to include\n  include_sections:\n    - executive_summary\n    - data_overview\n    - model_performance\n    - global_explanations\n    - local_explanations\n    - fairness_analysis\n    - audit_manifest\n    - regulatory_compliance\n\n  # Optional: Report styling\n  styling:\n    color_scheme: professional\n    page_size: A4\n    margins: standard\n    compliance_statement: true\n</code></pre> <p>Available Templates: - <code>standard_audit</code> - Comprehensive audit report with all sections</p> <p>Styling Options: - <code>color_scheme</code>: professional, minimal, colorful - <code>page_size</code>: A4, Letter, Legal - <code>margins</code>: standard, narrow, wide</p>"},{"location":"getting-started/configuration/#advanced-configuration","title":"Advanced Configuration","text":""},{"location":"getting-started/configuration/#strict-mode","title":"Strict Mode","text":"<p>Enforces additional regulatory compliance requirements.</p> <pre><code># Enable via CLI: --strict\n# Or in configuration:\nstrict_mode: true\n</code></pre> <p>Strict Mode Requirements: - Explicit random seeds (no defaults) - Complete data schema specification - Full manifest generation - Deterministic component selection - All optional validations enabled</p>"},{"location":"getting-started/configuration/#manifest-configuration","title":"Manifest Configuration","text":"<p>Controls audit trail generation and completeness.</p> <pre><code>manifest:\n  enabled: true                    # Generate audit manifest\n  include_git_sha: true           # Include Git commit information\n  include_config_hash: true       # Include configuration integrity hash\n  include_data_hash: true         # Include dataset integrity hash\n  track_component_selection: true # Track selected components\n  include_execution_info: true    # Include timing and environment\n</code></pre>"},{"location":"getting-started/configuration/#preprocessing-options","title":"Preprocessing Options","text":"<p>Controls data preprocessing before model training/evaluation.</p> <pre><code>preprocessing:\n  handle_missing: true            # Handle missing values\n  missing_strategy: median        # median, mode, drop\n  scale_features: false           # Feature scaling (not needed for trees)\n  scaling_method: standard        # standard, minmax, robust\n  categorical_encoding: label     # label, onehot, target\n  feature_selection: false        # Enable feature selection\n  selection_method: mutual_info   # mutual_info, correlation\n  max_features: 20               # Maximum features to select\n</code></pre>"},{"location":"getting-started/configuration/#validation-configuration","title":"Validation Configuration","text":"<p>Controls model evaluation and statistical testing.</p> <pre><code>validation:\n  cv_folds: 5                    # Cross-validation folds\n  cv_scoring: roc_auc            # Scoring metric for CV\n  test_size: 0.2                 # Train/test split ratio\n  stratify_split: true           # Stratify split by target\n  bootstrap_samples: 1000        # Bootstrap samples for confidence intervals\n  confidence_level: 0.95         # Statistical confidence level\n</code></pre>"},{"location":"getting-started/configuration/#performance-optimization","title":"Performance Optimization","text":"<p>Controls computational performance and resource usage.</p> <pre><code>performance:\n  n_jobs: -1                     # Parallel processing (-1 = all cores)\n  low_memory_mode: false         # Optimize for memory usage\n  verbose: true                  # Enable progress reporting\n  progress_bar: true             # Show progress bars\n</code></pre>"},{"location":"getting-started/configuration/#configuration-examples","title":"Configuration Examples","text":""},{"location":"getting-started/configuration/#basic-german-credit-audit","title":"Basic German Credit Audit","text":"<pre><code>audit_profile: german_credit_default\n\nreproducibility:\n  random_seed: 42\n\ndata:\n  path: ~/.glassalpha/data/german_credit_processed.csv\n  target_column: credit_risk\n  protected_attributes:\n    - gender\n    - age_group\n\nmodel:\n  type: xgboost\n  params:\n    objective: binary:logistic\n    n_estimators: 100\n\nexplainers:\n  strategy: first_compatible\n  priority: [treeshap, kernelshap]\n\nmetrics:\n  performance:\n    metrics: [accuracy, precision, recall, f1, auc_roc]\n  fairness:\n    metrics: [demographic_parity, equal_opportunity]\n</code></pre>"},{"location":"getting-started/configuration/#enterprise-compliance-configuration","title":"Enterprise Compliance Configuration","text":"<pre><code>audit_profile: tabular_compliance\nstrict_mode: true\n\nreproducibility:\n  random_seed: 42\n  deterministic: true\n  capture_environment: true\n\ndata:\n  path: data/production_dataset.csv\n  target_column: decision\n  feature_columns:\n    - income\n    - employment_length\n    - debt_to_income\n    - credit_score\n  protected_attributes:\n    - race\n    - gender\n    - age_group\n\nmodel:\n  type: lightgbm\n  params:\n    objective: binary\n    metric: auc\n    num_leaves: 31\n    feature_fraction: 0.9\n    bagging_fraction: 0.8\n    bagging_freq: 5\n\nexplainers:\n  strategy: first_compatible\n  priority: [treeshap, kernelshap]\n  config:\n    treeshap:\n      max_samples: 10000\n      check_additivity: true\n\nmetrics:\n  performance:\n    metrics: [accuracy, precision, recall, f1, auc_roc, classification_report]\n  fairness:\n    metrics: [demographic_parity, equal_opportunity, equalized_odds, predictive_parity]\n    config:\n      demographic_parity:\n        threshold: 0.02  # Stricter threshold for production\n      equal_opportunity:\n        threshold: 0.02\n\nmanifest:\n  enabled: true\n  include_git_sha: true\n  include_config_hash: true\n  include_data_hash: true\n  track_component_selection: true\n\nreport:\n  template: standard_audit\n  output_format: pdf\n  styling:\n    color_scheme: professional\n    compliance_statement: true\n\ncompliance:\n  frameworks: [gdpr, ecoa, fcra]\n  fairness_thresholds:\n    demographic_parity: 0.02\n    equal_opportunity: 0.02\n</code></pre>"},{"location":"getting-started/configuration/#custom-model-configuration","title":"Custom Model Configuration","text":"<pre><code>audit_profile: tabular_compliance\n\nreproducibility:\n  random_seed: 123\n\ndata:\n  path: data/custom_dataset.csv\n  target_column: target\n  feature_columns:\n    - numerical_feature_1\n    - numerical_feature_2\n    - categorical_feature_1\n    - categorical_feature_2\n  protected_attributes:\n    - protected_attribute_1\n\nmodel:\n  type: logistic_regression\n  params:\n    C: 1.0\n    penalty: l2\n    solver: lbfgs\n    max_iter: 1000\n\nexplainers:\n  strategy: first_compatible\n  priority: [kernelshap]  # Use KernelSHAP for linear models\n  config:\n    kernelshap:\n      n_samples: 1000\n      background_size: 500\n\nmetrics:\n  performance:\n    metrics: [accuracy, precision, recall, f1]\n  fairness:\n    metrics: [demographic_parity]\n\npreprocessing:\n  handle_missing: true\n  missing_strategy: median\n  scale_features: true      # Important for linear models\n  scaling_method: standard\n  categorical_encoding: onehot\n\nvalidation:\n  cv_folds: 10\n  test_size: 0.3\n  stratify_split: true\n</code></pre>"},{"location":"getting-started/configuration/#configuration-best-practices","title":"Configuration Best Practices","text":""},{"location":"getting-started/configuration/#reproducibility","title":"Reproducibility","text":"<ol> <li>Always set random seeds for deterministic results</li> <li>Use version control for configuration files</li> <li>Document configuration changes in commit messages</li> <li>Enable manifest generation for complete audit trails</li> </ol>"},{"location":"getting-started/configuration/#performance","title":"Performance","text":"<ol> <li>Use appropriate model types for your data size and complexity</li> <li>Adjust sample sizes for explainers based on dataset size</li> <li>Enable parallel processing (<code>n_jobs: -1</code>) for faster computation</li> <li>Use appropriate metrics - don't compute unnecessary evaluations</li> </ol>"},{"location":"getting-started/configuration/#compliance","title":"Compliance","text":"<ol> <li>Enable strict mode for regulatory submissions</li> <li>Set appropriate bias thresholds for your use case and jurisdiction</li> <li>Include all relevant protected attributes in fairness analysis</li> <li>Document configuration rationale for audit review</li> </ol>"},{"location":"getting-started/configuration/#security","title":"Security","text":"<ol> <li>Use relative paths or environment variables for file locations</li> <li>Don't embed sensitive data in configuration files</li> <li>Review configurations before committing to version control</li> <li>Use appropriate access controls for configuration repositories</li> </ol>"},{"location":"getting-started/configuration/#troubleshooting-configuration-issues","title":"Troubleshooting Configuration Issues","text":""},{"location":"getting-started/configuration/#common-configuration-errors","title":"Common Configuration Errors","text":"<p>Missing Required Fields: <pre><code># Error: Missing required field 'data.target_column'\ndata:\n  path: data.csv\n  # target_column: missing!\n</code></pre></p> <p>Invalid Model Type: <pre><code># Error: Model type 'invalid_model' not found in registry\nmodel:\n  type: invalid_model  # Should be: xgboost, lightgbm, etc.\n</code></pre></p> <p>Incompatible Components: <pre><code># Warning: No compatible explainers for model type\nexplainers:\n  priority: [treeshap]  # TreeSHAP only works with tree models\nmodel:\n  type: logistic_regression  # Linear model - use kernelshap instead\n</code></pre></p>"},{"location":"getting-started/configuration/#validation-commands","title":"Validation Commands","text":"<pre><code># Validate configuration before running audit\nglassalpha validate --config my_config.yaml\n\n# Check strict mode compliance\nglassalpha validate --config my_config.yaml --strict\n\n# List available components\nglassalpha list\n</code></pre>"},{"location":"getting-started/configuration/#configuration-schema-validation","title":"Configuration Schema Validation","text":"<p>GlassAlpha uses Pydantic for configuration validation with detailed error messages:</p> <pre><code>ValidationError: 2 validation errors for AuditConfig\ndata.target_column\n  field required (type=value_error.missing)\nmodel.type\n  ensure this value has at least 1 characters (type=value_error.any_str.min_length; limit_value=1)\n</code></pre>"},{"location":"getting-started/configuration/#schema-reference","title":"Schema Reference","text":"<p>For a complete schema reference with all available fields, types, and validation rules, see the API Reference.</p> <p>This configuration guide provides the foundation for creating effective, compliant audit configurations. Start with the provided examples and customize based on your specific requirements, data characteristics, and regulatory context.</p>"},{"location":"getting-started/installation/","title":"Installation Guide","text":"<p>Complete installation instructions for GlassAlpha on different platforms and environments.</p>"},{"location":"getting-started/installation/#system-requirements","title":"System Requirements","text":""},{"location":"getting-started/installation/#minimum-requirements","title":"Minimum Requirements","text":"<ul> <li>Python: 3.11 or higher</li> <li>Memory: 2GB RAM available</li> <li>Storage: 1GB disk space for installation and temporary files</li> <li>OS: macOS 10.15+, Linux (Ubuntu 20.04+), Windows 10+ (WSL2 recommended)</li> </ul>"},{"location":"getting-started/installation/#recommended-environment","title":"Recommended Environment","text":"<ul> <li>Python: 3.11+</li> <li>Memory: 8GB+ RAM for large datasets</li> <li>Storage: SSD for better performance</li> <li>CPU: Multi-core processor for parallel processing</li> </ul>"},{"location":"getting-started/installation/#supported-platforms","title":"Supported Platforms","text":"<ul> <li>macOS: Intel and Apple Silicon (M1/M2/M3)</li> <li>Linux: Ubuntu 20.04+, CentOS 8+, RHEL 8+, and most modern distributions</li> <li>Windows: 10/11 (native support, WSL2 recommended for best experience)</li> </ul>"},{"location":"getting-started/installation/#installation-methods","title":"Installation Methods","text":""},{"location":"getting-started/installation/#standard-installation-recommended","title":"Standard Installation (Recommended)","text":"<p>GlassAlpha is currently distributed as source code via GitHub. PyPI distribution may be available in potential future releases.</p> <pre><code># Clone the repository\ngit clone https://github.com/GlassAlpha/glassalpha\ncd glassalpha/packages\n\n# Create and activate virtual environment (recommended)\npython -m venv glassalpha-env\nsource glassalpha-env/bin/activate  # On Windows: glassalpha-env\\Scripts\\activate\n\n# Install GlassAlpha and dependencies\npip install -e .\n</code></pre>"},{"location":"getting-started/installation/#development-installation","title":"Development Installation","text":"<p>For contributors or those who need development tools:</p> <pre><code># Clone the repository\ngit clone https://github.com/GlassAlpha/glassalpha\ncd glassalpha/packages\n\n# Create virtual environment\npython -m venv dev-env\nsource dev-env/bin/activate  # On Windows: dev-env\\Scripts\\activate\n\n# Install with development dependencies\npip install -e \".[dev]\"\n</code></pre> <p>Development dependencies include: - Testing: pytest, pytest-cov - Code Quality: ruff, mypy, black, pre-commit - Documentation: mkdocs, mkdocs-material</p>"},{"location":"getting-started/installation/#platform-specific-installation","title":"Platform-Specific Installation","text":""},{"location":"getting-started/installation/#macos-installation","title":"macOS Installation","text":"<p>Prerequisites: <pre><code># Install Homebrew (if not already installed)\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n\n# Install Python 3.11+ (if not already available)\nbrew install python@3.11\n\n# Install OpenMP for XGBoost support\nbrew install libomp\n</code></pre></p> <p>Installation: <pre><code>git clone https://github.com/GlassAlpha/glassalpha\ncd glassalpha/packages\n\npython3.11 -m venv glassalpha-env\nsource glassalpha-env/bin/activate\npip install --upgrade pip\npip install -e .\n</code></pre></p> <p>Common macOS Issues: - XGBoost libomp error: Install with <code>brew install libomp</code> - Python version conflicts: Use <code>python3.11</code> explicitly - Permission issues: Avoid <code>sudo pip install</code>, use virtual environments</p>"},{"location":"getting-started/installation/#linux-installation-ubuntudebian","title":"Linux Installation (Ubuntu/Debian)","text":"<p>Prerequisites: <pre><code># Update package list\nsudo apt update\n\n# Install Python 3.11 and development tools\nsudo apt install python3.11 python3.11-venv python3.11-dev\nsudo apt install build-essential git\n\n# Install system libraries for PDF generation\nsudo apt install libpango1.0-dev libcairo2-dev libgtk-3-dev\n</code></pre></p> <p>Installation: <pre><code>git clone https://github.com/GlassAlpha/glassalpha\ncd glassalpha/packages\n\npython3.11 -m venv glassalpha-env\nsource glassalpha-env/bin/activate\npip install --upgrade pip\npip install -e .\n</code></pre></p>"},{"location":"getting-started/installation/#linux-installation-centosrhel","title":"Linux Installation (CentOS/RHEL)","text":"<p>Prerequisites: <pre><code># Install EPEL repository\nsudo yum install epel-release\n\n# Install Python 3.11 and development tools\nsudo yum install python3.11 python3.11-devel python3.11-pip\nsudo yum install gcc gcc-c++ make git\n\n# Install system libraries\nsudo yum install pango-devel cairo-devel gtk3-devel\n</code></pre></p> <p>Installation: <pre><code>git clone https://github.com/GlassAlpha/glassalpha\ncd glassalpha/packages\n\npython3.11 -m venv glassalpha-env\nsource glassalpha-env/bin/activate\npip install --upgrade pip\npip install -e .\n</code></pre></p>"},{"location":"getting-started/installation/#windows-installation","title":"Windows Installation","text":"<p>Option 1: Windows Subsystem for Linux (Recommended) <pre><code># Install WSL2 and Ubuntu\nwsl --install Ubuntu\n\n# In WSL2, follow Ubuntu installation instructions\ngit clone https://github.com/GlassAlpha/glassalpha\ncd glassalpha/packages\npython3.11 -m venv glassalpha-env\nsource glassalpha-env/bin/activate\npip install -e .\n</code></pre></p> <p>Option 2: Native Windows <pre><code># Install Python 3.11+ from python.org\n# Install Git from git-scm.com\n\n# Clone and install\ngit clone https://github.com/GlassAlpha/glassalpha\ncd glassalpha\\packages\n\npython -m venv glassalpha-env\nglassalpha-env\\Scripts\\activate\npip install --upgrade pip\npip install -e .\n</code></pre></p> <p>Windows Notes: - WSL2 provides better compatibility and performance - Native Windows may have PDF generation limitations - Use PowerShell or Command Prompt for native installation</p>"},{"location":"getting-started/installation/#verification-and-testing","title":"Verification and Testing","text":""},{"location":"getting-started/installation/#basic-verification","title":"Basic Verification","text":"<p>After installation, verify GlassAlpha is working correctly:</p> <pre><code># Check version\nglassalpha --version\n\n# Verify CLI is working\nglassalpha --help\n\n# List available components\nglassalpha list\n</code></pre> <p>Expected output: <pre><code>GlassAlpha version 0.1.0\n\nAvailable Components\n==================\nMODELS:\n  - xgboost\n  - lightgbm\n  - logistic_regression\n  - sklearn_generic\n  - passthrough\n\nEXPLAINERS:\n  - treeshap\n  - kernelshap\n  - noop\n\nMETRICS:\n  - accuracy\n  - precision\n  - recall\n  - f1\n  - auc_roc\n  - demographic_parity\n  - equal_opportunity\n  ...\n</code></pre></p>"},{"location":"getting-started/installation/#python-api-verification","title":"Python API Verification","text":"<p>Test the Python API:</p> <pre><code># Verify imports work\nfrom glassalpha.core import ModelRegistry, ExplainerRegistry\nfrom glassalpha.pipeline import AuditPipeline\nfrom glassalpha.config import AuditConfig\n\n# Check registries\nprint(\"Available models:\", list(ModelRegistry.get_all().keys()))\nprint(\"Available explainers:\", list(ExplainerRegistry.get_all().keys()))\n\n# Verify configuration loading\nprint(\"Configuration system working!\")\n</code></pre>"},{"location":"getting-started/installation/#end-to-end-test","title":"End-to-End Test","text":"<p>Run a complete audit to verify all components:</p> <pre><code># Quick smoke test with German Credit dataset\nglassalpha audit \\\n  --config configs/german_credit_simple.yaml \\\n  --output test_audit.pdf \\\n  --dry-run\n\n# If dry-run passes, run actual audit\nglassalpha audit \\\n  --config configs/german_credit_simple.yaml \\\n  --output test_audit.pdf\n</code></pre> <p>Successful execution should: - Complete in under 30 seconds - Generate a PDF report (~500KB+) - Show no error messages - Display audit summary statistics</p>"},{"location":"getting-started/installation/#dependencies","title":"Dependencies","text":""},{"location":"getting-started/installation/#core-dependencies","title":"Core Dependencies","text":"<p>GlassAlpha automatically installs these required dependencies:</p> <p>Data Processing: - <code>pandas&gt;=2.0.0</code> - Data manipulation and analysis - <code>numpy&gt;=1.24.0</code> - Numerical computing - <code>scikit-learn&gt;=1.3.0</code> - Machine learning utilities</p> <p>Machine Learning: - <code>xgboost&gt;=1.7.0</code> - Gradient boosting framework - <code>lightgbm&gt;=3.3.0</code> - Microsoft's gradient boosting - <code>shap&gt;=0.42.0</code> - Model explanations</p> <p>Visualization &amp; Reporting: - <code>matplotlib&gt;=3.7.0</code> - Plotting and visualization - <code>seaborn&gt;=0.12.0</code> - Statistical visualization - <code>weasyprint&gt;=59.0</code> - PDF generation</p> <p>Configuration &amp; CLI: - <code>pydantic&gt;=2.0.0</code> - Configuration validation - <code>typer&gt;=0.9.0</code> - Command-line interface - <code>pyyaml&gt;=6.0</code> - YAML configuration files</p>"},{"location":"getting-started/installation/#optional-dependencies","title":"Optional Dependencies","text":"<p>Development Tools (with <code>[dev]</code> install): - <code>pytest&gt;=7.4.0</code> - Testing framework - <code>pytest-cov&gt;=4.1.0</code> - Test coverage - <code>ruff&gt;=0.0.280</code> - Code linting and formatting - <code>mypy&gt;=1.5.0</code> - Type checking - <code>pre-commit&gt;=3.3.0</code> - Git hooks</p>"},{"location":"getting-started/installation/#version-compatibility","title":"Version Compatibility","text":"<p>GlassAlpha is tested with: - Python: 3.11, 3.12 - scikit-learn: 1.3.x, 1.4.x - XGBoost: 1.7.x, 2.0.x - LightGBM: 3.3.x, 4.0.x - SHAP: 0.42.x, 0.43.x</p>"},{"location":"getting-started/installation/#environment-management","title":"Environment Management","text":""},{"location":"getting-started/installation/#using-virtual-environments","title":"Using Virtual Environments","text":"<p>Why Virtual Environments? - Isolate dependencies from system Python - Avoid version conflicts - Enable project-specific configurations - Facilitate deployment and distribution</p> <p>Creating Virtual Environments:</p> <pre><code># Using venv (built-in)\npython -m venv glassalpha-env\nsource glassalpha-env/bin/activate  # Linux/macOS\n# glassalpha-env\\Scripts\\activate   # Windows\n\n# Using conda\nconda create -n glassalpha python=3.11\nconda activate glassalpha\n\n# Using poetry\npoetry init\npoetry add glassalpha\npoetry shell\n</code></pre>"},{"location":"getting-started/installation/#environment-variables","title":"Environment Variables","text":"<p>Configuration: - <code>GLASSALPHA_CONFIG_DIR</code> - Default configuration directory - <code>GLASSALPHA_DATA_DIR</code> - Default data directory - <code>GLASSALPHA_LOG_LEVEL</code> - Logging level (DEBUG, INFO, WARNING, ERROR)</p> <p>Enterprise Features: - <code>GLASSALPHA_LICENSE_KEY</code> - Enterprise license key</p> <p>Example: <pre><code>export GLASSALPHA_LOG_LEVEL=DEBUG\nexport GLASSALPHA_CONFIG_DIR=~/.config/glassalpha\nglassalpha audit --config my_config.yaml --output audit.pdf\n</code></pre></p>"},{"location":"getting-started/installation/#troubleshooting-installation","title":"Troubleshooting Installation","text":""},{"location":"getting-started/installation/#common-installation-issues","title":"Common Installation Issues","text":"<p>Python Version Issues: <pre><code># Check Python version\npython --version\n\n# If version is too old, install Python 3.11+\n# Use python3.11 explicitly if multiple versions installed\npython3.11 -m venv glassalpha-env\n</code></pre></p> <p>Permission Errors: <pre><code># Use virtual environment instead of system-wide installation\npython -m venv glassalpha-env\nsource glassalpha-env/bin/activate\npip install -e .\n\n# Or install for user only (not recommended)\npip install --user -e .\n</code></pre></p> <p>Dependency Conflicts: <pre><code># Create clean environment\nrm -rf glassalpha-env\npython -m venv glassalpha-env\nsource glassalpha-env/bin/activate\npip install --upgrade pip\npip install -e .\n</code></pre></p> <p>XGBoost Issues (macOS): <pre><code># Install OpenMP library\nbrew install libomp\n\n# Reinstall XGBoost\npip uninstall xgboost\npip install xgboost\n\n# Verify installation\npython -c \"import xgboost; print('XGBoost version:', xgboost.__version__)\"\n</code></pre></p> <p>PDF Generation Issues (Linux): <pre><code># Install system libraries\nsudo apt install libpango1.0-dev libcairo2-dev libgtk-3-dev  # Ubuntu/Debian\nsudo yum install pango-devel cairo-devel gtk3-devel          # CentOS/RHEL\n\n# Reinstall WeasyPrint\npip uninstall weasyprint\npip install weasyprint\n</code></pre></p>"},{"location":"getting-started/installation/#memory-and-performance-issues","title":"Memory and Performance Issues","text":"<p>Insufficient Memory: <pre><code># Monitor memory usage during installation\npip install -e . --verbose\n\n# If installation fails due to memory, increase swap space (Linux)\nsudo swapon --show\nsudo fallocate -l 2G /swapfile\nsudo chmod 600 /swapfile\nsudo mkswap /swapfile\nsudo swapon /swapfile\n</code></pre></p> <p>Slow Installation: <pre><code># Use faster package index\npip install -e . --index-url https://pypi.org/simple/\n\n# Install binary wheels when available\npip install -e . --only-binary=all --prefer-binary\n</code></pre></p>"},{"location":"getting-started/installation/#verification-failures","title":"Verification Failures","text":"<p>CLI Command Not Found: <pre><code># Verify installation\npip list | grep glassalpha\n\n# Check PATH contains virtual environment\nwhich glassalpha\necho $PATH\n\n# Reinstall if necessary\npip install --force-reinstall -e .\n</code></pre></p> <p>Import Errors: <pre><code># Check Python path\npython -c \"import sys; print(sys.path)\"\n\n# Verify installation location\npip show glassalpha\n\n# Test imports individually\npython -c \"import pandas; print('pandas OK')\"\npython -c \"import xgboost; print('xgboost OK')\"\npython -c \"import glassalpha; print('glassalpha OK')\"\n</code></pre></p>"},{"location":"getting-started/installation/#docker-installation-alternative","title":"Docker Installation (Alternative)","text":"<p>For containerized environments:</p> <pre><code>FROM python:3.11-slim\n\n# Install system dependencies\nRUN apt-get update &amp;&amp; apt-get install -y \\\n    git \\\n    build-essential \\\n    libpango1.0-dev \\\n    libcairo2-dev \\\n    libgtk-3-dev \\\n    &amp;&amp; rm -rf /var/lib/apt/lists/*\n\n# Clone and install GlassAlpha\nRUN git clone https://github.com/GlassAlpha/glassalpha.git\nWORKDIR /glassalpha/packages\nRUN pip install -e .\n\n# Set entry point\nENTRYPOINT [\"glassalpha\"]\n</code></pre> <p>Usage: <pre><code># Build image\ndocker build -t glassalpha .\n\n# Run audit\ndocker run -v $(pwd):/data glassalpha \\\n  audit --config /data/config.yaml --output /data/audit.pdf\n</code></pre></p>"},{"location":"getting-started/installation/#next-steps","title":"Next Steps","text":"<p>After successful installation:</p> <ol> <li>Try the Quick Start - Generate your first audit in 10 minutes</li> <li>Explore Examples - German Credit tutorial</li> <li>Read Configuration Guide - Understand all options</li> <li>Production Deployment - Enterprise deployment guide for regulated environments</li> <li>Join the Community - GitHub Discussions</li> </ol>"},{"location":"getting-started/installation/#getting-help","title":"Getting Help","text":"<p>If you encounter installation issues not covered here:</p> <ol> <li>Check the Troubleshooting Guide</li> <li>Search GitHub Issues</li> <li>Ask in GitHub Discussions</li> <li>Review the FAQ</li> </ol> <p>For enterprise support and custom installation assistance, contact: enterprise@glassalpha.com</p> <p>This installation guide ensures you have a working GlassAlpha environment ready for professional ML auditing and compliance analysis.</p>"},{"location":"getting-started/quickstart/","title":"Quick Start Guide","text":"<p>Get up and running with GlassAlpha in less than 10 minutes. This guide will take you from installation to generating your first professional audit PDF.</p>"},{"location":"getting-started/quickstart/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.11 or higher</li> <li>Git</li> <li>2GB available disk space</li> <li>Command line access</li> </ul>"},{"location":"getting-started/quickstart/#step-1-installation","title":"Step 1: Installation","text":""},{"location":"getting-started/quickstart/#clone-and-install","title":"Clone and Install","text":"<pre><code># Clone the repository\ngit clone https://github.com/GlassAlpha/glassalpha\ncd glassalpha/packages\n\n# Install GlassAlpha\npip install -e .\n</code></pre>"},{"location":"getting-started/quickstart/#verify-installation","title":"Verify Installation","text":"<pre><code># Check that GlassAlpha is installed correctly\nglassalpha --help\n</code></pre> <p>You should see the CLI help message with available commands.</p>"},{"location":"getting-started/quickstart/#step-2-generate-your-first-audit","title":"Step 2: Generate Your First Audit","text":"<p>GlassAlpha comes with a ready-to-use German Credit dataset example that demonstrates all core capabilities.</p>"},{"location":"getting-started/quickstart/#run-the-audit-command","title":"Run the Audit Command","text":"<pre><code># Generate audit PDF (takes ~3 seconds)\nglassalpha audit \\\n  --config configs/german_credit_simple.yaml \\\n  --output my_first_audit.pdf\n</code></pre>"},{"location":"getting-started/quickstart/#what-happens","title":"What Happens","text":"<ol> <li>Data Loading: Downloads and preprocesses German Credit dataset</li> <li>Model Training: Trains XGBoost classifier with optimal parameters</li> <li>Explanations: Generates TreeSHAP feature importance analysis</li> <li>Fairness Analysis: Computes bias metrics for protected attributes (gender, age)</li> <li>PDF Generation: Creates professional audit report with visualizations</li> </ol>"},{"location":"getting-started/quickstart/#expected-output","title":"Expected Output","text":"<pre><code>Loading data and initializing components...\n\u2713 Audit pipeline completed in 2.34s\n\n\ud83d\udcca Audit Summary:\n  \u2705 Performance metrics: 6 computed\n     \u2705 accuracy: 73.5%\n  \u2696\ufe0f Fairness metrics: 8/8 computed\n     \u2705 No bias detected\n  \ud83d\udd0d Explanations: \u2705 Global feature importance\n     Most important: duration_months (+0.127)\n  \ud83d\udccb Dataset: 1,000 samples, 21 features\n  \ud83d\udd27 Components: 3 selected\n     Model: xgboost\n\nGenerating PDF report: my_first_audit.pdf\n\u2713 Saved plot to /tmp/plots/shap_importance.png\n\u2713 Saved plot to /tmp/plots/performance_summary.png\n\u2713 Saved plot to /tmp/plots/fairness_analysis.png\n\n\ud83c\udf89 Audit Report Generated Successfully!\n==================================================\n\ud83d\udcc1 Output: /path/to/my_first_audit.pdf\n\ud83d\udcca Size: 847,329 bytes (827.5 KB)\n\u23f1\ufe0f Total time: 3.12s\n   \u2022 Pipeline: 2.34s\n   \u2022 PDF generation: 0.78s\n\nThe audit report is ready for review and regulatory submission.\n</code></pre>"},{"location":"getting-started/quickstart/#step-3-review-your-audit-report","title":"Step 3: Review Your Audit Report","text":"<p>Open <code>my_first_audit.pdf</code> to see your comprehensive audit report containing:</p>"},{"location":"getting-started/quickstart/#executive-summary","title":"Executive Summary","text":"<ul> <li>Key findings and compliance status</li> <li>Model performance overview</li> <li>Bias detection results</li> <li>Regulatory assessment</li> </ul>"},{"location":"getting-started/quickstart/#model-performance-analysis","title":"Model Performance Analysis","text":"<ul> <li>Accuracy, precision, recall, F1 score, AUC-ROC</li> <li>Confusion matrix</li> <li>Performance visualizations</li> </ul>"},{"location":"getting-started/quickstart/#shap-explanations","title":"SHAP Explanations","text":"<ul> <li>Global feature importance rankings</li> <li>Individual prediction explanations</li> <li>Waterfall plots showing decision factors</li> </ul>"},{"location":"getting-started/quickstart/#fairness-analysis","title":"Fairness Analysis","text":"<ul> <li>Demographic parity assessment</li> <li>Equal opportunity analysis</li> <li>Bias detection across protected attributes</li> <li>Statistical significance testing</li> </ul>"},{"location":"getting-started/quickstart/#reproducibility-manifest","title":"Reproducibility Manifest","text":"<ul> <li>Complete audit trail with timestamps</li> <li>Dataset fingerprints and model parameters</li> <li>Random seeds and component versions</li> <li>Git commit information</li> </ul>"},{"location":"getting-started/quickstart/#step-4-understanding-the-configuration","title":"Step 4: Understanding the Configuration","text":"<p>The <code>configs/german_credit_simple.yaml</code> file contains all audit settings:</p> <pre><code># Audit profile determines component selection\naudit_profile: german_credit_default\n\n# Reproducibility settings\nreproducibility:\n  random_seed: 42\n\n# Data configuration\ndata:\n  path: /Users/user/.glassalpha/data/german_credit_processed.csv\n  target_column: credit_risk\n  protected_attributes:\n    - gender\n    - age_group\n    - foreign_worker\n\n# Model configuration\nmodel:\n  type: xgboost\n  params:\n    objective: binary:logistic\n    n_estimators: 100\n    max_depth: 5\n\n# Explainer selection\nexplainers:\n  strategy: first_compatible\n  priority:\n    - treeshap      # Primary choice for tree models\n    - kernelshap    # Fallback for any model type\n\n# Metrics to compute\nmetrics:\n  performance:\n    metrics: [accuracy, precision, recall, f1, auc_roc]\n  fairness:\n    metrics: [demographic_parity, equal_opportunity]\n</code></pre>"},{"location":"getting-started/quickstart/#next-steps","title":"Next Steps","text":""},{"location":"getting-started/quickstart/#try-advanced-features","title":"Try Advanced Features","text":"<pre><code># Enable strict mode for regulatory compliance\nglassalpha audit \\\n  --config configs/german_credit_simple.yaml \\\n  --output regulatory_audit.pdf \\\n  --strict\n\n# Use a different model\n# Edit config file: model.type: lightgbm\nglassalpha audit \\\n  --config configs/german_credit_simple.yaml \\\n  --output lightgbm_audit.pdf\n</code></pre>"},{"location":"getting-started/quickstart/#explore-more-options","title":"Explore More Options","text":"<pre><code># See all available CLI options\nglassalpha audit --help\n\n# List available components\nglassalpha list\n\n# Validate configuration without running audit\nglassalpha validate --config configs/german_credit_simple.yaml\n</code></pre>"},{"location":"getting-started/quickstart/#work-with-your-own-data","title":"Work with Your Own Data","text":"<ol> <li>Prepare your data: CSV format with target column and features</li> <li>Create configuration: Copy and modify <code>german_credit_simple.yaml</code></li> <li>Run audit: Use your configuration file</li> </ol> <p>See the Configuration Guide for detailed customization options.</p>"},{"location":"getting-started/quickstart/#common-use-cases","title":"Common Use Cases","text":""},{"location":"getting-started/quickstart/#financial-services-compliance","title":"Financial Services Compliance","text":"<ul> <li>Credit scoring model validation</li> <li>Fair lending assessments</li> <li>Regulatory reporting (ECOA, FCRA)</li> <li>Model risk management</li> </ul>"},{"location":"getting-started/quickstart/#hr-and-employment","title":"HR and Employment","text":"<ul> <li>Hiring algorithm audits</li> <li>Promotion decision analysis</li> <li>Salary equity assessments</li> <li>EEO compliance verification</li> </ul>"},{"location":"getting-started/quickstart/#healthcare-and-insurance","title":"Healthcare and Insurance","text":"<ul> <li>Risk assessment model validation</li> <li>Treatment recommendation audits</li> <li>Coverage decision analysis</li> <li>Health equity evaluations</li> </ul>"},{"location":"getting-started/quickstart/#getting-help","title":"Getting Help","text":"<ul> <li>Documentation: Complete Guide</li> <li>Configuration Reference: Configuration Guide</li> <li>Examples:</li> <li>5-minute Quick Start</li> <li>German Credit Deep Dive</li> <li>Healthcare Bias Detection</li> <li>Configuration Comparison</li> <li>Issues: GitHub Issues</li> </ul>"},{"location":"getting-started/quickstart/#summary","title":"Summary","text":"<p>You now have GlassAlpha installed and have generated your first audit report. The system provides:</p> <ul> <li>Production-ready audit generation in seconds</li> <li>Professional PDF reports suitable for regulatory review</li> <li>Comprehensive analysis covering performance, fairness, and explainability</li> <li>Full reproducibility with complete audit trails</li> <li>Flexible configuration for different use cases and models</li> </ul> <p>GlassAlpha transforms complex ML audit requirements into a simple, reliable workflow that meets the highest professional and regulatory standards.</p>"},{"location":"reference/api/","title":"API Reference","text":"<p>Complete reference for GlassAlpha's public API, interfaces, and extension points.</p> <p>For system design and component interaction details, see the Architecture Guide. This document focuses on implementation specifics for developers extending GlassAlpha.</p>"},{"location":"reference/api/#core-interfaces","title":"Core Interfaces","text":"<p>GlassAlpha uses protocol-based interfaces to enable extensibility and plugin architecture.</p>"},{"location":"reference/api/#modelinterface","title":"ModelInterface","text":"<p>Base protocol for all model implementations.</p> <pre><code>from typing import Protocol\nimport pandas as pd\nimport numpy as np\n\nclass ModelInterface(Protocol):\n    capabilities: dict[str, Any]\n    version: str\n\n    def predict(self, X: pd.DataFrame) -&gt; np.ndarray:\n        \"\"\"Generate predictions for input data.\"\"\"\n\n    def predict_proba(self, X: pd.DataFrame) -&gt; np.ndarray:\n        \"\"\"Generate probability predictions.\"\"\"\n\n    def get_model_type(self) -&gt; str:\n        \"\"\"Return model type identifier.\"\"\"\n\n    def get_capabilities(self) -&gt; dict[str, Any]:\n        \"\"\"Return model capabilities for plugin selection.\"\"\"\n</code></pre> <p>Required Attributes: - <code>capabilities</code>: Dict describing model capabilities (e.g., <code>{\"supports_shap\": True}</code>) - <code>version</code>: String identifying implementation version</p> <p>Methods: - <code>predict()</code>: Generate class predictions - <code>predict_proba()</code>: Generate probability predictions - <code>get_model_type()</code>: Return type identifier (e.g., \"xgboost\") - <code>get_capabilities()</code>: Return capabilities for component selection</p>"},{"location":"reference/api/#explainerinterface","title":"ExplainerInterface","text":"<p>Base protocol for explanation methods.</p> <pre><code>class ExplainerInterface(Protocol):\n    capabilities: dict[str, Any]\n    version: str\n    priority: int  # Higher = preferred\n\n    def explain(self, model: ModelInterface, X: pd.DataFrame,\n                y: np.ndarray = None) -&gt; dict[str, Any]:\n        \"\"\"Generate model explanations.\"\"\"\n\n    def supports_model(self, model: ModelInterface) -&gt; bool:\n        \"\"\"Check if explainer supports the model.\"\"\"\n\n    def get_explanation_type(self) -&gt; str:\n        \"\"\"Return explanation type identifier.\"\"\"\n</code></pre> <p>Required Attributes: - <code>capabilities</code>: Dict describing explainer capabilities - <code>version</code>: Implementation version - <code>priority</code>: Selection priority (higher = preferred)</p> <p>Methods: - <code>explain()</code>: Generate explanations for model predictions - <code>supports_model()</code>: Check compatibility with specific model - <code>get_explanation_type()</code>: Return type (e.g., \"shap\", \"lime\")</p>"},{"location":"reference/api/#metricinterface","title":"MetricInterface","text":"<p>Base protocol for evaluation metrics.</p> <pre><code>class MetricInterface(Protocol):\n    capabilities: dict[str, Any]\n    version: str\n    metric_type: str  # \"performance\", \"fairness\", \"drift\"\n\n    def compute(self, y_true: np.ndarray, y_pred: np.ndarray,\n                **kwargs) -&gt; dict[str, Any]:\n        \"\"\"Compute the metric.\"\"\"\n\n    def requires_probabilities(self) -&gt; bool:\n        \"\"\"Check if metric requires prediction probabilities.\"\"\"\n\n    def requires_sensitive_features(self) -&gt; bool:\n        \"\"\"Check if metric requires sensitive features.\"\"\"\n</code></pre> <p>Required Attributes: - <code>capabilities</code>: Dict describing metric capabilities - <code>version</code>: Implementation version - <code>metric_type</code>: Category (\"performance\", \"fairness\", \"drift\")</p> <p>Methods: - <code>compute()</code>: Calculate metric value - <code>requires_probabilities()</code>: Whether metric needs probability predictions - <code>requires_sensitive_features()</code>: Whether metric needs demographic data</p>"},{"location":"reference/api/#registry-system","title":"Registry System","text":"<p>Dynamic component registration and selection system.</p>"},{"location":"reference/api/#modelregistry","title":"ModelRegistry","text":"<p>Registry for model implementations.</p> <pre><code>from glassalpha.core import ModelRegistry\n\n# Register a model implementation\n@ModelRegistry.register(\"custom_model\")\nclass CustomModel:\n    capabilities = {\"supports_shap\": True, \"data_modality\": \"tabular\"}\n    version = \"1.0.0\"\n\n    def predict(self, X):\n        # Implementation\n        pass\n\n# Get registered models\navailable_models = ModelRegistry.get_all()\n\n# Get specific model class\nmodel_cls = ModelRegistry.get(\"xgboost\")\n</code></pre> <p>Methods: - <code>register(name)</code>: Decorator to register model implementations - <code>get(name)</code>: Retrieve model class by name - <code>get_all()</code>: Get all registered models - <code>is_registered(name)</code>: Check if model is registered</p>"},{"location":"reference/api/#explainerregistry","title":"ExplainerRegistry","text":"<p>Registry for explanation methods.</p> <pre><code>from glassalpha.core import ExplainerRegistry\n\n@ExplainerRegistry.register(\"custom_explainer\", priority=75)\nclass CustomExplainer:\n    capabilities = {\"model_types\": [\"custom_model\"]}\n    version = \"1.0.0\"\n    priority = 75\n\n    def explain(self, model, X, y=None):\n        # Implementation\n        pass\n\n# Select best explainer for model\nexplainer_cls = ExplainerRegistry.select_best(model, priority_list=[\"shap\", \"lime\"])\n</code></pre> <p>Methods: - <code>register(name, priority=50)</code>: Register explainer with priority - <code>select_best(model, priority_list)</code>: Select best compatible explainer - <code>get_compatible(model)</code>: Get all explainers compatible with model</p>"},{"location":"reference/api/#metricregistry","title":"MetricRegistry","text":"<p>Registry for evaluation metrics.</p> <pre><code>from glassalpha.core import MetricRegistry\n\n@MetricRegistry.register(\"custom_metric\")\nclass CustomMetric:\n    metric_type = \"performance\"\n    capabilities = {\"binary_classification\": True}\n    version = \"1.0.0\"\n\n    def compute(self, y_true, y_pred, **kwargs):\n        # Implementation\n        pass\n\n# Get metrics by type\nperformance_metrics = MetricRegistry.get_by_type(\"performance\")\nfairness_metrics = MetricRegistry.get_by_type(\"fairness\")\n</code></pre> <p>Methods: - <code>register(name)</code>: Register metric implementation - <code>get_by_type(metric_type)</code>: Get metrics of specific type - <code>get_all_types()</code>: Get available metric types</p>"},{"location":"reference/api/#pipeline-system","title":"Pipeline System","text":"<p>Core audit execution pipeline.</p>"},{"location":"reference/api/#auditpipeline","title":"AuditPipeline","text":"<p>Main orchestrator for audit execution.</p> <pre><code>from glassalpha.pipeline import AuditPipeline\nfrom glassalpha.config import AuditConfig\n\n# Initialize pipeline\nconfig = AuditConfig.from_yaml(\"audit_config.yaml\")\npipeline = AuditPipeline(config)\n\n# Execute audit\nresults = pipeline.run(progress_callback=lambda msg, pct: print(f\"{msg}: {pct}%\"))\n\nprint(f\"Audit success: {results.success}\")\nprint(f\"Performance: {results.model_performance}\")\nprint(f\"Fairness: {results.fairness_analysis}\")\n</code></pre> <p>Constructor: - <code>AuditPipeline(config: AuditConfig)</code>: Initialize with configuration</p> <p>Methods: - <code>run(progress_callback=None)</code>: Execute complete audit pipeline - Returns <code>AuditResults</code> object with comprehensive results</p>"},{"location":"reference/api/#auditresults","title":"AuditResults","text":"<p>Container for audit results and metadata.</p> <pre><code>from dataclasses import dataclass\n\n@dataclass\nclass AuditResults:\n    # Core results\n    model_performance: dict[str, Any]\n    fairness_analysis: dict[str, Any]\n    drift_analysis: dict[str, Any]\n    explanations: dict[str, Any]\n\n    # Data information\n    data_summary: dict[str, Any]\n    schema_info: dict[str, Any]\n\n    # Model information\n    model_info: dict[str, Any]\n    selected_components: dict[str, Any]\n\n    # Audit metadata\n    execution_info: dict[str, Any]\n    manifest: dict[str, Any]\n\n    # Success indicators\n    success: bool\n    error_message: str | None\n</code></pre> <p>Attributes: - <code>model_performance</code>: Performance metrics and evaluations - <code>fairness_analysis</code>: Bias detection and fairness metrics - <code>explanations</code>: SHAP values and feature importance - <code>manifest</code>: Complete audit trail and reproducibility info - <code>success</code>: Whether audit completed successfully</p>"},{"location":"reference/api/#configuration-system","title":"Configuration System","text":"<p>Pydantic-based configuration management.</p>"},{"location":"reference/api/#auditconfig","title":"AuditConfig","text":"<p>Main configuration schema.</p> <pre><code>from glassalpha.config import AuditConfig\n\n# Load from file\nconfig = AuditConfig.from_yaml(\"config.yaml\")\n\n# Access configuration sections\nprint(config.audit_profile)  # \"tabular_compliance\"\nprint(config.model.type)     # \"xgboost\"\nprint(config.reproducibility.random_seed)  # 42\n\n# Validate configuration\nconfig.validate_strict_mode()\n</code></pre> <p>Class Methods: - <code>from_yaml(path)</code>: Load configuration from YAML file - <code>from_dict(data)</code>: Create from dictionary</p> <p>Properties: - <code>audit_profile</code>: Selected audit profile - <code>model</code>: Model configuration - <code>data</code>: Data configuration - <code>explainers</code>: Explainer configuration - <code>metrics</code>: Metrics configuration - <code>reproducibility</code>: Reproducibility settings</p>"},{"location":"reference/api/#dataconfig","title":"DataConfig","text":"<p>Data source and schema configuration.</p> <pre><code>from glassalpha.config.schemas import DataConfig\n\ndata_config = DataConfig(\n    path=\"data/dataset.csv\",\n    target_column=\"outcome\",\n    feature_columns=[\"feature1\", \"feature2\"],\n    protected_attributes=[\"gender\", \"age_group\"]\n)\n</code></pre> <p>Attributes: - <code>path</code>: Path to dataset file - <code>target_column</code>: Name of target/label column - <code>feature_columns</code>: List of feature column names (optional) - <code>protected_attributes</code>: Sensitive attributes for fairness analysis</p>"},{"location":"reference/api/#modelconfig","title":"ModelConfig","text":"<p>Model specification and parameters.</p> <pre><code>from glassalpha.config.schemas import ModelConfig\n\nmodel_config = ModelConfig(\n    type=\"xgboost\",\n    params={\n        \"n_estimators\": 100,\n        \"max_depth\": 6,\n        \"learning_rate\": 0.1\n    }\n)\n</code></pre> <p>Attributes: - <code>type</code>: Model type identifier (must be registered) - <code>path</code>: Optional path to pre-trained model - <code>params</code>: Model hyperparameters</p>"},{"location":"reference/api/#data-handling","title":"Data Handling","text":"<p>Data loading and preprocessing utilities.</p>"},{"location":"reference/api/#tabulardataloader","title":"TabularDataLoader","text":"<p>Main data loader for tabular datasets.</p> <pre><code>from glassalpha.data import TabularDataLoader, TabularDataSchema\n\nloader = TabularDataLoader()\n\n# Load data with automatic format detection\ndata = loader.load(\"data/dataset.csv\")\n\n# Create schema\nschema = TabularDataSchema(\n    target=\"outcome\",\n    features=[\"feature1\", \"feature2\"],\n    sensitive_features=[\"gender\"]\n)\n\n# Validate data against schema\nloader.validate_schema(data, schema)\n\n# Extract features and target\nX, y, sensitive = loader.extract_features_target(data, schema)\n</code></pre> <p>Methods: - <code>load(path, schema=None)</code>: Load data from file - <code>validate_schema(data, schema)</code>: Validate data structure - <code>extract_features_target(data, schema)</code>: Split into X, y, sensitive features - <code>hash_data(data)</code>: Generate deterministic data hash - <code>split_data(data, test_size, random_state)</code>: Train/test split</p>"},{"location":"reference/api/#tabulardataschema","title":"TabularDataSchema","text":"<p>Schema definition for tabular data.</p> <pre><code>from glassalpha.data import TabularDataSchema\n\nschema = TabularDataSchema(\n    target=\"credit_risk\",\n    features=[\"income\", \"debt_ratio\", \"employment_length\"],\n    sensitive_features=[\"gender\", \"age_group\"],\n    categorical_features=[\"employment_type\", \"housing\"],\n    numeric_features=[\"income\", \"debt_ratio\"]\n)\n</code></pre> <p>Attributes: - <code>target</code>: Target column name - <code>features</code>: Feature column names - <code>sensitive_features</code>: Protected attributes - <code>categorical_features</code>: Categorical feature names - <code>numeric_features</code>: Numeric feature names</p>"},{"location":"reference/api/#utilities","title":"Utilities","text":"<p>Helper functions and utilities.</p>"},{"location":"reference/api/#seed-management","title":"Seed Management","text":"<p>Centralized random seed management.</p> <pre><code>from glassalpha.utils import set_global_seed, get_component_seed, with_component_seed\n\n# Set master seed\nset_global_seed(42)\n\n# Get component-specific seed\nexplainer_seed = get_component_seed(\"explainer\")\n\n# Use seeded context manager\nwith with_component_seed(\"model\"):\n    # All randomness uses deterministic seed\n    model.fit(X, y)\n</code></pre> <p>Functions: - <code>set_global_seed(seed)</code>: Set master random seed - <code>get_component_seed(component_name)</code>: Get deterministic seed for component - <code>with_component_seed(component_name)</code>: Context manager for seeded execution - <code>with_seed(seed)</code>: Context manager for specific seed</p>"},{"location":"reference/api/#hashing","title":"Hashing","text":"<p>Deterministic content hashing.</p> <pre><code>from glassalpha.utils import hash_config, hash_dataframe, hash_object\n\n# Hash configuration\nconfig_hash = hash_config(audit_config.model_dump())\n\n# Hash dataset\ndata_hash = hash_dataframe(df)\n\n# Hash arbitrary object\nobject_hash = hash_object({\"key\": \"value\"})\n</code></pre> <p>Functions: - <code>hash_config(config_dict)</code>: Hash configuration dictionary - <code>hash_dataframe(df)</code>: Hash pandas DataFrame - <code>hash_object(obj)</code>: Hash arbitrary Python object - <code>hash_file(path)</code>: Hash file contents</p>"},{"location":"reference/api/#manifest-generation","title":"Manifest Generation","text":"<p>Audit trail and manifest generation.</p> <pre><code>from glassalpha.utils import AuditManifest, ManifestGenerator\n\n# Generate manifest\ngenerator = ManifestGenerator()\ngenerator.add_config(config)\ngenerator.add_data_info(data_hash, data_summary)\ngenerator.add_model_info(model_info)\n\nmanifest = generator.generate()\n\n# Save manifest\nmanifest_path = output_dir / \"audit_manifest.json\"\ngenerator.save(manifest_path)\n</code></pre> <p>Classes: - <code>ManifestGenerator</code>: Builder for audit manifests - <code>AuditManifest</code>: Pydantic model for manifest data</p> <p>Methods: - <code>add_config()</code>: Add configuration information - <code>add_data_info()</code>: Add dataset information - <code>add_model_info()</code>: Add model information - <code>generate()</code>: Create complete manifest - <code>save()</code>: Save manifest to file</p>"},{"location":"reference/api/#cli-integration","title":"CLI Integration","text":"<p>Command-line interface components.</p>"},{"location":"reference/api/#main-application","title":"Main Application","text":"<pre><code>from glassalpha.cli import app\nimport typer\n\n# Extend CLI with custom commands\n@app.command()\ndef custom_command(\n    input_file: str = typer.Option(..., help=\"Input file path\")\n):\n    \"\"\"Custom audit command.\"\"\"\n    print(f\"Processing {input_file}\")\n</code></pre>"},{"location":"reference/api/#available-commands","title":"Available Commands","text":"<ul> <li><code>glassalpha audit</code>: Generate audit reports</li> <li><code>glassalpha validate</code>: Validate configurations</li> <li><code>glassalpha list</code>: List available components</li> </ul>"},{"location":"reference/api/#extension-examples","title":"Extension Examples","text":""},{"location":"reference/api/#custom-model-implementation","title":"Custom Model Implementation","text":"<pre><code>from glassalpha.core import ModelRegistry, ModelInterface\nimport pandas as pd\nimport numpy as np\n\n@ModelRegistry.register(\"my_model\")\nclass MyCustomModel:\n    capabilities = {\n        \"supports_shap\": False,\n        \"supports_lime\": True,\n        \"data_modality\": \"tabular\"\n    }\n    version = \"1.0.0\"\n\n    def __init__(self):\n        self._model = None\n\n    def fit(self, X: pd.DataFrame, y: np.ndarray):\n        # Training implementation\n        pass\n\n    def predict(self, X: pd.DataFrame) -&gt; np.ndarray:\n        # Prediction implementation\n        return np.array([0, 1, 0])  # Example\n\n    def predict_proba(self, X: pd.DataFrame) -&gt; np.ndarray:\n        # Probability prediction\n        return np.array([[0.8, 0.2], [0.3, 0.7]])  # Example\n\n    def get_model_type(self) -&gt; str:\n        return \"my_model\"\n\n    def get_capabilities(self) -&gt; dict:\n        return self.capabilities\n</code></pre>"},{"location":"reference/api/#custom-explainer-implementation","title":"Custom Explainer Implementation","text":"<pre><code>from glassalpha.core import ExplainerRegistry, ExplainerInterface\n\n@ExplainerRegistry.register(\"my_explainer\", priority=60)\nclass MyCustomExplainer:\n    capabilities = {\"model_types\": [\"my_model\"]}\n    version = \"1.0.0\"\n    priority = 60\n\n    def explain(self, model, X, y=None):\n        # Generate explanations\n        return {\n            \"feature_importance\": {\"feature1\": 0.5, \"feature2\": 0.3},\n            \"explanation_type\": \"custom\",\n            \"metadata\": {\"samples_explained\": len(X)}\n        }\n\n    def supports_model(self, model):\n        return model.get_model_type() == \"my_model\"\n\n    def get_explanation_type(self):\n        return \"custom\"\n</code></pre>"},{"location":"reference/api/#custom-metric-implementation","title":"Custom Metric Implementation","text":"<pre><code>from glassalpha.core import MetricRegistry, MetricInterface\nimport numpy as np\n\n@MetricRegistry.register(\"my_metric\")\nclass MyCustomMetric:\n    metric_type = \"performance\"\n    capabilities = {\"binary_classification\": True}\n    version = \"1.0.0\"\n\n    def compute(self, y_true, y_pred, **kwargs):\n        # Custom metric calculation\n        accuracy = np.mean(y_true == y_pred)\n\n        return {\n            \"value\": accuracy,\n            \"interpretation\": \"higher_is_better\",\n            \"range\": [0, 1],\n            \"description\": \"Custom accuracy metric\"\n        }\n\n    def requires_probabilities(self):\n        return False\n\n    def requires_sensitive_features(self):\n        return False\n</code></pre>"},{"location":"reference/api/#error-handling","title":"Error Handling","text":""},{"location":"reference/api/#exception-types","title":"Exception Types","text":"<pre><code>from glassalpha.core import FeatureNotAvailable\n\ntry:\n    # Enterprise feature usage\n    from glassalpha.enterprise import AdvancedExplainer\nexcept FeatureNotAvailable as e:\n    print(f\"Enterprise feature required: {e}\")\n    # Fallback to OSS alternative\n</code></pre>"},{"location":"reference/api/#common-exceptions","title":"Common Exceptions","text":"<ul> <li><code>FeatureNotAvailable</code>: Enterprise feature without license</li> <li><code>ValidationError</code>: Configuration validation failures</li> <li><code>ComponentNotFound</code>: Registry lookup failures</li> <li><code>ModelNotSupported</code>: Incompatible model/explainer combinations</li> </ul>"},{"location":"reference/api/#version-information","title":"Version Information","text":"<pre><code>from glassalpha import __version__\nprint(f\"GlassAlpha version: {__version__}\")\n\n# Check component versions\nfrom glassalpha.core import ModelRegistry\nxgb_cls = ModelRegistry.get(\"xgboost\")\nprint(f\"XGBoost wrapper version: {xgb_cls.version}\")\n</code></pre> <p>This API reference provides comprehensive coverage of GlassAlpha's public interfaces, enabling developers to extend functionality, integrate with existing systems, and build custom audit workflows.</p>"},{"location":"reference/cli/","title":"CLI Reference","text":"<p>Complete reference for all GlassAlpha command-line interface commands and options.</p>"},{"location":"reference/cli/#global-options","title":"Global Options","text":"<p>Available with all commands:</p> <pre><code>glassalpha [GLOBAL OPTIONS] COMMAND [COMMAND OPTIONS]\n</code></pre>"},{"location":"reference/cli/#global-flags","title":"Global Flags","text":"Flag Short Description <code>--version</code> <code>-V</code> Show version and exit <code>--verbose</code> <code>-v</code> Enable verbose logging <code>--quiet</code> <code>-q</code> Suppress non-error output <code>--help</code> <code>-h</code> Show help message"},{"location":"reference/cli/#examples","title":"Examples","text":"<pre><code># Show version\nglassalpha --version\n\n# Enable verbose logging for any command\nglassalpha --verbose audit --config config.yaml --output report.pdf\n\n# Suppress output (errors only)\nglassalpha --quiet list\n</code></pre>"},{"location":"reference/cli/#commands","title":"Commands","text":""},{"location":"reference/cli/#audit","title":"audit","text":"<p>Generate comprehensive audit reports from ML models.</p> <pre><code>glassalpha audit --config CONFIG --output OUTPUT [OPTIONS]\n</code></pre>"},{"location":"reference/cli/#required-arguments","title":"Required Arguments","text":"Argument Type Description <code>--config</code>, <code>-c</code> Path Path to audit configuration YAML file <code>--output</code>, <code>-o</code> Path Path for output PDF report"},{"location":"reference/cli/#optional-arguments","title":"Optional Arguments","text":"Argument Type Default Description <code>--strict</code>, <code>-s</code> Flag False Enable strict mode for regulatory compliance <code>--repro</code> Flag False Enable deterministic reproduction mode for byte-identical results <code>--profile</code>, <code>-p</code> String None Override audit profile from config <code>--override</code> Path None Additional config file to override settings <code>--dry-run</code> Flag False Validate configuration without generating report"},{"location":"reference/cli/#examples_1","title":"Examples","text":"<pre><code># Basic audit generation\nglassalpha audit \\\n  --config configs/german_credit.yaml \\\n  --output audit_report.pdf\n\n# Regulatory compliance mode\nglassalpha audit \\\n  --config configs/german_credit.yaml \\\n  --output regulatory_audit.pdf \\\n  --strict\n\n# Override audit profile\nglassalpha audit \\\n  --config configs/german_credit.yaml \\\n  --output custom_audit.pdf \\\n  --profile custom_compliance\n\n# Apply configuration overrides\nglassalpha audit \\\n  --config configs/german_credit_simple.yaml \\\n  --override configs/example_audit.yaml \\\n  --output modified_audit.pdf\n\n# Validate configuration without running audit\nglassalpha audit \\\n  --config configs/german_credit_simple.yaml \\\n  --output test.pdf \\\n  --dry-run\n\n# Enable deterministic reproduction for byte-identical results\nglassalpha audit \\\n  --config configs/german_credit_simple.yaml \\\n  --output audit.pdf \\\n  --repro\n\n# Combine strict and repro modes for maximum compliance\nglassalpha audit \\\n  --config configs/german_credit_simple.yaml \\\n  --output audit.pdf \\\n  --strict \\\n  --repro\n</code></pre>"},{"location":"reference/cli/#strict-mode","title":"Strict Mode","text":"<p>Strict mode enforces additional regulatory compliance requirements:</p> <ul> <li>Explicit random seeds (no defaults allowed)</li> <li>Locked data schema (no inference)</li> <li>Full manifest generation required</li> <li>Deterministic plugin selection verified</li> <li>All optional fields become required</li> <li>Warnings treated as errors</li> </ul> <p>Use strict mode for regulatory submissions and compliance documentation.</p>"},{"location":"reference/cli/#reproduction-mode","title":"Reproduction Mode","text":"<p>Reproduction mode (<code>--repro</code>) enables deterministic execution for byte-identical results:</p> <ul> <li>Controls NumPy, pandas, and scikit-learn random states</li> <li>Sets thread counts for consistent parallel processing</li> <li>Enables strict determinism controls across all libraries</li> <li>Automatically uses configuration random seed or defaults to 42</li> </ul> <p>Reproduction mode is essential for regulatory audits that require identical outputs across different execution environments.</p>"},{"location":"reference/cli/#output","title":"Output","text":"<p>The audit command produces: - PDF Report: Professional audit document with visualizations - Manifest File: Complete audit trail (same directory as PDF, <code>.manifest.json</code> extension) - Console Output: Progress updates and detailed audit summary</p> <p>Console Output Format: The CLI provides detailed progress feedback and results summary:</p> <pre><code>GlassAlpha Audit Generation\n========================================\nLoading configuration from: config.yaml\nAudit profile: tabular_compliance\nStrict mode: ENABLED\n\nRunning audit pipeline...\n  Loading data and initializing components...\n\u2713 Audit pipeline completed in 4.23s\n\n\ud83d\udcca Audit Summary:\n  \u2705 Performance metrics: 6 computed\n     \u2705 accuracy: 75.2%\n  \u2696\ufe0f Fairness metrics: 12/12 computed\n     \u26a0\ufe0f Bias detected in: gender.demographic_parity\n  \ud83d\udd0d Explanations: \u2705 Global feature importance\n     Most important: checking_account_status (+0.234)\n  \ud83d\udccb Dataset: 1,000 samples, 21 features\n  \ud83d\udd27 Components: 3 selected\n     Model: xgboost\n\n\ud83c\udf89 Audit Report Generated Successfully!\n==================================================\n\ud83d\udcc1 Output: /path/to/audit.pdf\n\ud83d\udcca Size: 1,247,832 bytes (1.2 MB)\n\u23f1\ufe0f Total time: 5.67s\n   \u2022 Pipeline: 4.23s\n   \u2022 PDF generation: 1.44s\n\n\ud83d\udee1\ufe0f Strict mode: Report meets regulatory compliance requirements\n\nThe audit report is ready for review and regulatory submission.\n</code></pre>"},{"location":"reference/cli/#validate","title":"validate","text":"<p>Validate configuration files without running audits.</p> <pre><code>glassalpha validate --config CONFIG [OPTIONS]\n</code></pre>"},{"location":"reference/cli/#required-arguments_1","title":"Required Arguments","text":"Argument Type Description <code>--config</code>, <code>-c</code> Path Path to configuration file to validate"},{"location":"reference/cli/#optional-arguments_1","title":"Optional Arguments","text":"Argument Type Default Description <code>--profile</code>, <code>-p</code> String None Validate against specific profile <code>--strict</code> Flag False Validate for strict mode compliance"},{"location":"reference/cli/#examples_2","title":"Examples","text":"<pre><code># Basic validation\nglassalpha validate --config audit.yaml\n\n# Validate for specific profile\nglassalpha validate \\\n  --config audit.yaml \\\n  --profile tabular_compliance\n\n# Check strict mode compliance\nglassalpha validate \\\n  --config audit.yaml \\\n  --strict\n\n# Validate configuration that overrides profile\nglassalpha validate \\\n  --config audit.yaml \\\n  --profile eu_ai_act\n</code></pre>"},{"location":"reference/cli/#output_1","title":"Output","text":"<p>Validation provides: - Configuration parsing results - Schema compliance verification - Profile and model type identification - Warnings for missing optional settings - Strict mode requirement validation</p> <p>Example Output: <pre><code>Validating configuration: audit.yaml\nProfile: tabular_compliance\nModel type: xgboost\nStrict mode: valid\n\n\u2713 Configuration is valid\n\nWarning: No random seed specified - results may vary\nWarning: No protected attributes - fairness analysis limited\n</code></pre></p>"},{"location":"reference/cli/#list","title":"list","text":"<p>List available components and system capabilities.</p> <pre><code>glassalpha list [COMPONENT_TYPE] [OPTIONS]\n</code></pre>"},{"location":"reference/cli/#optional-arguments_2","title":"Optional Arguments","text":"Argument Type Description <code>COMPONENT_TYPE</code> String Filter by type: models, explainers, metrics, profiles <code>--include-enterprise</code>, <code>-e</code> Flag Include enterprise components <code>--verbose</code>, <code>-v</code> Flag Show component details"},{"location":"reference/cli/#examples_3","title":"Examples","text":"<pre><code># List all components\nglassalpha list\n\n# List only models\nglassalpha list models\n\n# List only explainers\nglassalpha list explainers\n\n# List only metrics\nglassalpha list metrics\n\n# List only audit profiles\nglassalpha list profiles\n\n# Include enterprise components\nglassalpha list --include-enterprise\n\n# Show detailed information\nglassalpha list --verbose\n\n# Combine filters\nglassalpha list models --include-enterprise --verbose\n</code></pre>"},{"location":"reference/cli/#available-component-types","title":"Available Component Types","text":"Type Description Examples <code>models</code> ML model wrappers xgboost, lightgbm, logistic_regression, sklearn_generic, passthrough <code>explainers</code> Explanation methods treeshap, kernelshap, noop <code>metrics</code> Evaluation metrics accuracy, precision, recall, f1, auc_roc, demographic_parity, equal_opportunity <code>profiles</code> Audit profiles tabular_compliance, german_credit_default"},{"location":"reference/cli/#output_2","title":"Output","text":"<p>The list command shows: - Registered component names by type - Component counts and status - License requirements for enterprise features (when <code>--include-enterprise</code> used)</p> <p>Example Output: <pre><code>Available Components\n========================================\n\nMODELS:\n  - lightgbm\n  - logistic_regression\n  - passthrough\n  - sklearn_generic\n  - xgboost\n\nEXPLAINERS:\n  - kernelshap\n  - noop\n  - treeshap\n\nMETRICS:\n  - accuracy\n  - auc_roc\n  - demographic_parity\n  - equal_opportunity\n  - equalized_odds\n  - f1\n  - precision\n  - predictive_parity\n  - recall\n\nPROFILES:\n  - german_credit_default\n  - tabular_compliance\n</code></pre></p>"},{"location":"reference/cli/#enterprise-commands","title":"Enterprise Commands","text":""},{"location":"reference/cli/#dashboard-serve","title":"dashboard serve","text":"<p>Start monitoring dashboard (Enterprise only).</p> <pre><code>glassalpha dashboard serve [OPTIONS]\n</code></pre>"},{"location":"reference/cli/#optional-arguments_3","title":"Optional Arguments","text":"Argument Type Default Description <code>--port</code>, <code>-p</code> Integer 8080 Port to serve on <code>--host</code>, <code>-h</code> String localhost Host to bind to"},{"location":"reference/cli/#example","title":"Example","text":"<pre><code># Start dashboard on default port\nglassalpha dashboard serve\n\n# Start on custom port and host\nglassalpha dashboard serve --port 9000 --host 0.0.0.0\n</code></pre>"},{"location":"reference/cli/#monitor-drift","title":"monitor drift","text":"<p>Monitor model drift over time (Enterprise only).</p> <pre><code>glassalpha monitor drift --config CONFIG --baseline BASELINE\n</code></pre>"},{"location":"reference/cli/#required-arguments_2","title":"Required Arguments","text":"Argument Type Description <code>--config</code>, <code>-c</code> Path Configuration file <code>--baseline</code>, <code>-b</code> Path Baseline manifest for comparison"},{"location":"reference/cli/#example_1","title":"Example","text":"<pre><code># Monitor drift against baseline\nglassalpha monitor drift \\\n  --config current_config.yaml \\\n  --baseline baseline_manifest.json\n</code></pre>"},{"location":"reference/cli/#error-handling","title":"Error Handling","text":"<p>GlassAlpha provides clear error messages for common issues:</p>"},{"location":"reference/cli/#configuration-errors","title":"Configuration Errors","text":"<pre><code>Configuration error: Missing required field 'data.path'\nValidation failed: Invalid audit profile 'nonexistent_profile'\n</code></pre>"},{"location":"reference/cli/#file-not-found-errors","title":"File Not Found Errors","text":"<pre><code>File 'missing.yaml' does not exist.\nOverride file 'overrides.yaml' does not exist.\n</code></pre>"},{"location":"reference/cli/#component-errors","title":"Component Errors","text":"<pre><code>Warning: Model type 'unknown_model' not found in registry\n</code></pre>"},{"location":"reference/cli/#audit-pipeline-errors","title":"Audit Pipeline Errors","text":"<pre><code>\u274c Audit pipeline failed: Dataset file 'data/missing.csv' not found\n\u274c Audit failed: Input contains NaN, infinity or a value too large\n</code></pre>"},{"location":"reference/cli/#enterprise-license-errors","title":"Enterprise License Errors","text":"<pre><code>Enterprise feature 'dashboard' requires valid license key\nSet GLASSALPHA_LICENSE_KEY environment variable\n</code></pre>"},{"location":"reference/cli/#reproduction-mode-warnings","title":"Reproduction Mode Warnings","text":"<pre><code>\u26a0\ufe0f Some determinism controls failed - results may not be fully reproducible\n</code></pre>"},{"location":"reference/cli/#exit-codes","title":"Exit Codes","text":"Code Meaning 0 Success 1 General error (configuration, file not found, etc.) 2 Invalid command line arguments"},{"location":"reference/cli/#environment-variables","title":"Environment Variables","text":"Variable Description Default Usage <code>GLASSALPHA_LICENSE_KEY</code> Enterprise license key None Required for enterprise features <code>GLASSALPHA_LOG_LEVEL</code> Logging level (DEBUG, INFO, WARNING, ERROR) INFO Controls console output verbosity <code>GLASSALPHA_CONFIG_DIR</code> Default config directory ~/.glassalpha Used for automatic config discovery <code>GLASSALPHA_DATA_DIR</code> Default data directory ~/.glassalpha/data Used for built-in datasets (German Credit)"},{"location":"reference/cli/#performance-notes","title":"Performance Notes","text":""},{"location":"reference/cli/#typical-execution-times","title":"Typical Execution Times","text":"<ul> <li>Small datasets (&lt; 1,000 rows): 1-3 seconds</li> <li>Medium datasets (1,000-10,000 rows): 3-10 seconds</li> <li>Large datasets (10,000+ rows): 10-60 seconds</li> </ul>"},{"location":"reference/cli/#memory-requirements","title":"Memory Requirements","text":"<ul> <li>Minimum: 1GB RAM</li> <li>Recommended: 4GB+ RAM for large datasets</li> <li>PDF Generation: Additional 500MB temporary space</li> </ul>"},{"location":"reference/cli/#optimization-tips","title":"Optimization Tips","text":"<ul> <li>Use <code>--dry-run</code> to validate configurations quickly</li> <li>Enable <code>--quiet</code> for batch processing scripts</li> <li>Use specific component types with <code>list</code> for faster startup</li> </ul>"},{"location":"reference/cli/#integration-examples","title":"Integration Examples","text":""},{"location":"reference/cli/#batch-processing-script","title":"Batch Processing Script","text":"<pre><code>#!/bin/bash\nset -e\n\nfor config in configs/*.yaml; do\n    output=\"reports/$(basename \"$config\" .yaml).pdf\"\n    echo \"Processing $config...\"\n\n    glassalpha audit \\\n        --config \"$config\" \\\n        --output \"$output\" \\\n        --strict \\\n        --quiet\n\n    echo \"Generated $output\"\ndone\n</code></pre>"},{"location":"reference/cli/#cicd-pipeline","title":"CI/CD Pipeline","text":"<pre><code># Example GitHub Actions step\n- name: Generate Audit Reports\n  run: |\n    glassalpha validate --config audit.yaml --strict\n    glassalpha audit --config audit.yaml --output audit.pdf --strict\n</code></pre>"},{"location":"reference/cli/#docker-usage","title":"Docker Usage","text":"<pre><code>FROM python:3.11-slim\nRUN pip install glassalpha\nCOPY configs/ /app/configs/\nWORKDIR /app\nCMD [\"glassalpha\", \"audit\", \"--config\", \"configs/production.yaml\", \"--output\", \"audit.pdf\"]\n</code></pre> <p>This CLI reference covers all available commands and options for GlassAlpha's command-line interface. For configuration file syntax and options, see the Configuration Guide.</p>"},{"location":"reference/troubleshooting/","title":"Troubleshooting Guide","text":"<p>Common issues, error messages, and solutions for GlassAlpha. This guide helps diagnose and resolve problems quickly.</p>"},{"location":"reference/troubleshooting/#quick-diagnostics","title":"Quick Diagnostics","text":"<p>If you're experiencing issues, start with these diagnostic commands:</p> <pre><code># Verify installation (if package is installed)\nglassalpha --version\n\n# Alternative: Use module invocation (development/uninstalled)\nPYTHONPATH=src python3 -m glassalpha --version\n\n# Check component availability\nglassalpha list\n# Alternative: PYTHONPATH=src python3 -m glassalpha list\n\n# Validate configuration\nglassalpha validate --config configs/german_credit_simple.yaml\n# Alternative: PYTHONPATH=src python3 -m glassalpha validate --config configs/german_credit_simple.yaml\n\n# Test with minimal configuration\nglassalpha audit --config configs/german_credit_simple.yaml --output test.pdf --dry-run\n# Alternative: PYTHONPATH=src python3 -m glassalpha audit --config configs/german_credit_simple.yaml --output test.pdf --dry-run\n</code></pre>"},{"location":"reference/troubleshooting/#cli-command-issues","title":"CLI Command Issues","text":""},{"location":"reference/troubleshooting/#glassalpha-command-not-found","title":"<code>glassalpha: command not found</code>","text":"<p>This indicates GlassAlpha isn't properly installed or the CLI entry point isn't available.</p> <p>Solutions:</p> <ol> <li> <p>Install the package (recommended for users):    <pre><code>cd glassalpha/packages\npip install -e .\n\n# Verify installation\nglassalpha --version\n</code></pre></p> </li> <li> <p>Use module invocation (development/troubleshooting):    <pre><code>cd glassalpha/packages\nPYTHONPATH=src python3 -m glassalpha --version\nPYTHONPATH=src python3 -m glassalpha audit --config configs/german_credit_simple.yaml --output test.pdf --dry-run\n</code></pre></p> </li> <li> <p>Check your environment:    <pre><code># Check if package is installed\npip list | grep glassalpha\n\n# Check Python path\npython3 -c \"import sys; print('\\n'.join(sys.path))\"\n</code></pre></p> </li> </ol>"},{"location":"reference/troubleshooting/#installation-issues","title":"Installation Issues","text":""},{"location":"reference/troubleshooting/#python-version-compatibility","title":"Python Version Compatibility","text":"<p>Error: <pre><code>ERROR: Package 'glassalpha' requires a different Python: 3.10.0 not in '&gt;=3.11'\n</code></pre></p> <p>Solution: <pre><code># Check Python version\npython --version\n\n# Upgrade Python (macOS with Homebrew)\nbrew install python@3.11\npython3.11 -m pip install -e .\n\n# Upgrade Python (Linux)\nsudo apt update &amp;&amp; sudo apt install python3.11\n\n# Create virtual environment with correct Python\npython3.11 -m venv venv\nsource venv/bin/activate\npip install -e .\n</code></pre></p>"},{"location":"reference/troubleshooting/#xgboost-installation-issues-macos","title":"XGBoost Installation Issues (macOS)","text":"<p>Error: <pre><code>RuntimeError: libomp not found. Install with: brew install libomp\n</code></pre></p> <p>Solution: <pre><code># Install OpenMP library\nbrew install libomp\n\n# Reinstall XGBoost\npip uninstall xgboost\npip install xgboost\n\n# Verify installation\npython -c \"import xgboost; print('XGBoost version:', xgboost.__version__)\"\n</code></pre></p>"},{"location":"reference/troubleshooting/#dependency-conflicts","title":"Dependency Conflicts","text":"<p>Error: <pre><code>ERROR: pip's dependency resolver does not currently take into account all the packages that are installed\n</code></pre></p> <p>Solution: <pre><code># Create clean virtual environment\npython -m venv clean_env\nsource clean_env/bin/activate  # On Windows: clean_env\\Scripts\\activate\n\n# Upgrade pip\npip install --upgrade pip\n\n# Install GlassAlpha\npip install -e .\n\n# If conflicts persist, install dependencies individually\npip install pandas numpy scikit-learn\npip install xgboost lightgbm\npip install shap matplotlib seaborn\npip install -e . --no-deps\n</code></pre></p>"},{"location":"reference/troubleshooting/#missing-system-dependencies","title":"Missing System Dependencies","text":"<p>Error (Linux): <pre><code>ImportError: libgomp.so.1: cannot open shared object file\n</code></pre></p> <p>Solution (Ubuntu/Debian): <pre><code>sudo apt update\nsudo apt install libgomp1 build-essential\n</code></pre></p> <p>Solution (CentOS/RHEL): <pre><code>sudo yum install libgomp gcc gcc-c++\n</code></pre></p>"},{"location":"reference/troubleshooting/#configuration-errors","title":"Configuration Errors","text":""},{"location":"reference/troubleshooting/#missing-required-fields","title":"Missing Required Fields","text":"<p>Error: <pre><code>ValidationError: 1 validation error for AuditConfig\ndata.target_column\n  field required (type=value_error.missing)\n</code></pre></p> <p>Solution: <pre><code># Add missing required fields\ndata:\n  path: data/dataset.csv\n  target_column: outcome  # This was missing\n\nmodel:\n  type: xgboost  # Ensure model type is specified\n</code></pre></p>"},{"location":"reference/troubleshooting/#invalid-file-paths","title":"Invalid File Paths","text":"<p>Error: <pre><code>FileNotFoundError: Configuration file 'nonexistent.yaml' not found\n</code></pre></p> <p>Solutions: <pre><code># Use absolute paths\nglassalpha audit --config /full/path/to/config.yaml --output report.pdf\n\n# Check current directory\npwd\nls -la configs/\n\n# Use relative paths from correct directory\ncd /Users/gabe/Sites/glassalpha/packages\nglassalpha audit --config configs/german_credit_simple.yaml --output audit.pdf\n</code></pre></p>"},{"location":"reference/troubleshooting/#model-type-not-found","title":"Model Type Not Found","text":"<p>Error: <pre><code>Warning: Model type 'unknown_model' not found in registry\n</code></pre></p> <p>Solution: <pre><code># Check available models\nglassalpha list models\n\n# Use correct model type\n# Valid options: xgboost, lightgbm, logistic_regression, sklearn_generic\n</code></pre></p> <pre><code>model:\n  type: xgboost  # Use registered model type\n</code></pre>"},{"location":"reference/troubleshooting/#schema-validation-errors","title":"Schema Validation Errors","text":"<p>Error: <pre><code>ValidationError: 2 validation errors for TabularDataSchema\nfeatures\n  ensure this value has at least 1 characters\ntarget\n  field required\n</code></pre></p> <p>Solution: <pre><code>data:\n  path: data/dataset.csv\n  target_column: target  # Must specify target\n  feature_columns:       # Either specify features explicitly\n    - feature1\n    - feature2\n  # OR let GlassAlpha auto-detect (remove feature_columns)\n</code></pre></p>"},{"location":"reference/troubleshooting/#data-issues","title":"Data Issues","text":""},{"location":"reference/troubleshooting/#dataset-not-found","title":"Dataset Not Found","text":"<p>Error: <pre><code>FileNotFoundError: Dataset file 'data/missing.csv' not found\n</code></pre></p> <p>Solutions: <pre><code># Check file existence\nls -la data/missing.csv\n\n# Use German Credit dataset (automatically downloaded)\n# Update config to use built-in dataset path:\n</code></pre></p> <pre><code>data:\n  path: ~/.glassalpha/data/german_credit_processed.csv  # Auto-downloaded\n</code></pre>"},{"location":"reference/troubleshooting/#column-not-found","title":"Column Not Found","text":"<p>Error: <pre><code>KeyError: Column 'target' not found in dataset\n</code></pre></p> <p>Solutions: <pre><code># Check column names in your data\npython -c \"import pandas as pd; print(pd.read_csv('data/dataset.csv').columns.tolist())\"\n\n# Update configuration with correct column name\n</code></pre></p> <pre><code>data:\n  target_column: correct_column_name  # Use actual column name\n</code></pre>"},{"location":"reference/troubleshooting/#data-type-issues","title":"Data Type Issues","text":"<p>Error: <pre><code>TypeError: Object of type 'datetime64' is not JSON serializable\n</code></pre></p> <p>Solution: <pre><code># Preprocess data to handle datetime columns\nimport pandas as pd\n\ndf = pd.read_csv('data/dataset.csv')\n# Convert datetime to timestamp or remove\ndf['date_column'] = pd.to_datetime(df['date_column']).astype('int64')\ndf.to_csv('data/processed_dataset.csv', index=False)\n</code></pre></p>"},{"location":"reference/troubleshooting/#missing-values","title":"Missing Values","text":"<p>Error: <pre><code>ValueError: Input contains NaN, infinity or a value too large\n</code></pre></p> <p>Solution: <pre><code># Add preprocessing configuration\npreprocessing:\n  handle_missing: true\n  missing_strategy: median  # or 'mode' for categorical\n</code></pre></p>"},{"location":"reference/troubleshooting/#runtime-errors","title":"Runtime Errors","text":""},{"location":"reference/troubleshooting/#memory-issues","title":"Memory Issues","text":"<p>Error: <pre><code>MemoryError: Unable to allocate array with shape (10000, 10000)\n</code></pre></p> <p>Solutions: <pre><code># Reduce sample sizes for explainers\nexplainers:\n  config:\n    treeshap:\n      max_samples: 100     # Reduce from default 1000\n    kernelshap:\n      n_samples: 50        # Reduce from default 500\n\n# Enable low memory mode\nperformance:\n  low_memory_mode: true\n  n_jobs: 1              # Reduce parallelism\n</code></pre></p> <pre><code># Use smaller datasets for testing\nhead -n 1000 large_dataset.csv &gt; small_dataset.csv\n</code></pre>"},{"location":"reference/troubleshooting/#model-training-failures","title":"Model Training Failures","text":"<p>Error: <pre><code>XGBoostError: Check failed: labels.Size() == num_row\n</code></pre></p> <p>Solution: <pre><code># Check data consistency\nimport pandas as pd\ndf = pd.read_csv('data/dataset.csv')\nprint(f\"Rows: {len(df)}\")\nprint(f\"Target values: {df['target'].value_counts()}\")\nprint(f\"Missing values: {df.isnull().sum()}\")\n\n# Remove rows with missing target values\ndf = df.dropna(subset=['target'])\ndf.to_csv('data/cleaned_dataset.csv', index=False)\n</code></pre></p>"},{"location":"reference/troubleshooting/#shap-computation-errors","title":"SHAP Computation Errors","text":"<p>Error: <pre><code>Exception: TreeExplainer only supports the following model types: xgboost.Booster\n</code></pre></p> <p>Solution: <pre><code># Use compatible explainer\nexplainers:\n  priority:\n    - kernelshap  # Model-agnostic alternative\n  config:\n    kernelshap:\n      n_samples: 100\n</code></pre></p>"},{"location":"reference/troubleshooting/#pdf-generation-issues","title":"PDF Generation Issues","text":"<p>Error: <pre><code>OSError: cannot load library 'pango-1.0-0'\n</code></pre></p> <p>Solution (Linux): <pre><code># Install required system libraries\nsudo apt install libpango1.0-dev libcairo2-dev libgtk-3-dev\n</code></pre></p> <p>Solution (macOS): <pre><code># Install with Homebrew\nbrew install pango cairo gtk+3\n</code></pre></p> <p>Solution (Alternative): <pre><code># Use HTML output instead\n# Modify report configuration:\n</code></pre></p> <pre><code>report:\n  output_format: html  # Generate HTML instead of PDF\n</code></pre>"},{"location":"reference/troubleshooting/#performance-issues","title":"Performance Issues","text":""},{"location":"reference/troubleshooting/#slow-execution","title":"Slow Execution","text":"<p>Problem: Audit takes longer than expected</p> <p>Solutions:</p> <ol> <li> <p>Reduce Sample Sizes: <pre><code>explainers:\n  config:\n    treeshap:\n      max_samples: 100      # Default: 1000\n    kernelshap:\n      n_samples: 50         # Default: 500\n      background_size: 50   # Default: 100\n</code></pre></p> </li> <li> <p>Enable Parallel Processing: <pre><code>performance:\n  n_jobs: -1               # Use all CPU cores\n</code></pre></p> </li> <li> <p>Use Simpler Models: <pre><code>model:\n  params:\n    n_estimators: 50       # Reduce from 100\n    max_depth: 3           # Reduce from 6\n</code></pre></p> </li> <li> <p>Skip Expensive Operations: <pre><code># Use dry run for config validation\nglassalpha audit --config config.yaml --output test.pdf --dry-run\n\n# Test with smaller datasets first\nhead -n 500 large_dataset.csv &gt; test_dataset.csv\n</code></pre></p> </li> </ol>"},{"location":"reference/troubleshooting/#high-memory-usage","title":"High Memory Usage","text":"<p>Problem: System runs out of memory during audit</p> <p>Solutions:</p> <ol> <li> <p>Enable Memory Optimization: <pre><code>performance:\n  low_memory_mode: true\n  n_jobs: 1  # Reduce parallelism\n</code></pre></p> </li> <li> <p>Process Data in Chunks: <pre><code># Pre-process large datasets\nimport pandas as pd\ndf = pd.read_csv('large_dataset.csv')\nsample = df.sample(n=1000, random_state=42)  # Use sample for testing\nsample.to_csv('sample_dataset.csv', index=False)\n</code></pre></p> </li> <li> <p>Optimize Explainer Settings: <pre><code>explainers:\n  config:\n    treeshap:\n      max_samples: 50       # Very small for memory constraints\n    kernelshap:\n      n_samples: 20\n      background_size: 20\n</code></pre></p> </li> </ol>"},{"location":"reference/troubleshooting/#large-pdf-files","title":"Large PDF Files","text":"<p>Problem: Generated PDFs are too large</p> <p>Solutions:</p> <ol> <li> <p>Optimize Report Configuration: <pre><code>report:\n  styling:\n    optimize_size: true\n    compress_images: true\n</code></pre></p> </li> <li> <p>Reduce Plot Resolution: <pre><code>explainers:\n  config:\n    treeshap:\n      plot_dpi: 150         # Default: 300\n</code></pre></p> </li> <li> <p>Exclude Optional Sections: <pre><code>report:\n  include_sections:\n    - executive_summary\n    - model_performance\n    # Remove: local_explanations, detailed_plots\n</code></pre></p> </li> </ol>"},{"location":"reference/troubleshooting/#enterprise-features","title":"Enterprise Features","text":""},{"location":"reference/troubleshooting/#license-key-issues","title":"License Key Issues","text":"<p>Error: <pre><code>Enterprise feature 'dashboard' requires valid license key\nSet GLASSALPHA_LICENSE_KEY environment variable\n</code></pre></p> <p>Solutions: <pre><code># Set license key environment variable\nexport GLASSALPHA_LICENSE_KEY=\"your-license-key-here\"\n\n# Verify license key is set\necho $GLASSALPHA_LICENSE_KEY\n\n# Use enterprise features\nglassalpha dashboard serve --port 8080\n</code></pre></p>"},{"location":"reference/troubleshooting/#feature-not-available","title":"Feature Not Available","text":"<p>Error: <pre><code>FeatureNotAvailableError: Advanced explainers require enterprise license\n</code></pre></p> <p>Solution: <pre><code># Use OSS alternatives\nexplainers:\n  priority:\n    - treeshap        # OSS TreeSHAP\n    - kernelshap      # OSS KernelSHAP\n    # Remove: deep_shap, gradient_shap (enterprise only)\n</code></pre></p>"},{"location":"reference/troubleshooting/#debugging-and-diagnostics","title":"Debugging and Diagnostics","text":""},{"location":"reference/troubleshooting/#enable-verbose-logging","title":"Enable Verbose Logging","text":"<pre><code># Enable detailed logging\nglassalpha --verbose audit --config config.yaml --output audit.pdf\n\n# Check specific component status\nexport GLASSALPHA_LOG_LEVEL=DEBUG\nglassalpha audit --config config.yaml --output audit.pdf\n</code></pre>"},{"location":"reference/troubleshooting/#component-registry-debugging","title":"Component Registry Debugging","text":"<pre><code># Debug component registration\npython -c \"\nfrom glassalpha.core import list_components\nimport pprint\npprint.pprint(list_components())\n\"\n</code></pre>"},{"location":"reference/troubleshooting/#configuration-debugging","title":"Configuration Debugging","text":"<pre><code># Debug configuration loading\npython -c \"\nfrom glassalpha.config import load_config_from_file\nconfig = load_config_from_file('your_config.yaml')\nprint('Loaded config:', config.model_dump())\n\"\n</code></pre>"},{"location":"reference/troubleshooting/#data-loading-debugging","title":"Data Loading Debugging","text":"<pre><code># Debug data issues\npython -c \"\nfrom glassalpha.data import TabularDataLoader\nloader = TabularDataLoader()\ndata = loader.load('data/dataset.csv')\nprint('Shape:', data.shape)\nprint('Columns:', data.columns.tolist())\nprint('Dtypes:', data.dtypes.to_dict())\nprint('Missing:', data.isnull().sum().to_dict())\n\"\n</code></pre>"},{"location":"reference/troubleshooting/#getting-help","title":"Getting Help","text":""},{"location":"reference/troubleshooting/#before-requesting-support","title":"Before Requesting Support","text":"<ol> <li>Check this troubleshooting guide</li> <li>Run diagnostic commands shown above</li> <li>Try with the German Credit example (known working configuration)</li> <li>Enable verbose logging for detailed error information</li> </ol>"},{"location":"reference/troubleshooting/#information-to-include-in-support-requests","title":"Information to Include in Support Requests","text":"<pre><code># System information\nglassalpha --version\npython --version\npip list | grep -E \"(glassalpha|xgboost|lightgbm|shap|pandas)\"\n\n# Configuration (remove sensitive data)\ncat your_config.yaml\n\n# Complete error message\nglassalpha --verbose audit --config config.yaml --output audit.pdf 2&gt;&amp;1\n</code></pre>"},{"location":"reference/troubleshooting/#support-channels","title":"Support Channels","text":"<ul> <li>GitHub Issues: https://github.com/GlassAlpha/glassalpha/issues</li> <li>Documentation: Complete guides</li> <li>Community: GitHub Discussions</li> </ul>"},{"location":"reference/troubleshooting/#enterprise-support","title":"Enterprise Support","text":"<p>Enterprise customers have access to: - Priority support with guaranteed response times - Direct access to development team - Custom configuration assistance - Advanced debugging and optimization</p> <p>Contact: enterprise-support@glassalpha.com</p>"},{"location":"reference/troubleshooting/#prevention-best-practices","title":"Prevention Best Practices","text":""},{"location":"reference/troubleshooting/#environment-setup","title":"Environment Setup","text":"<pre><code># Always use virtual environments\npython -m venv glassalpha-env\nsource glassalpha-env/bin/activate\n\n# Keep dependencies updated\npip install --upgrade pip\npip install --upgrade glassalpha\n</code></pre>"},{"location":"reference/troubleshooting/#configuration-management","title":"Configuration Management","text":"<pre><code># Always specify explicit seeds for reproducibility\nreproducibility:\n  random_seed: 42\n\n# Use version control for configurations\n# Git commit: \"Update audit configuration for production\"\n\n# Validate configurations before use\n</code></pre> <pre><code>glassalpha validate --config production.yaml --strict\n</code></pre>"},{"location":"reference/troubleshooting/#testing-strategy","title":"Testing Strategy","text":"<pre><code># Test with small datasets first\nglassalpha audit --config config.yaml --output test.pdf --dry-run\n\n# Test new configurations incrementally\n# Start with minimal config, add features gradually\n</code></pre>"},{"location":"reference/troubleshooting/#monitoring-and-logging","title":"Monitoring and Logging","text":"<pre><code># Enable logging for production\nexport GLASSALPHA_LOG_LEVEL=INFO\n\n# Log all audit runs\nglassalpha audit --config config.yaml --output audit.pdf 2&gt;&amp;1 | tee audit.log\n</code></pre> <p>This troubleshooting guide covers the most common issues encountered with GlassAlpha. If you encounter an issue not covered here, please check the GitHub issues or contact support with the diagnostic information requested above.</p>"},{"location":"blog/category/announcements/","title":"Announcements","text":""}]}