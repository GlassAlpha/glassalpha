"""Smart context-aware defaults for CLI commands.

This module implements intelligent defaults that reduce the need for explicit flags
while maintaining predictable behavior. Defaults are inferred from:
- File naming conventions
- Environment variables
- Configuration content
- Working directory structure
"""

import os
from pathlib import Path


def infer_config_path() -> Path | None:
    """Infer config file path from common naming conventions.

    Checks for these files in order:
    1. glassalpha.yaml (preferred)
    2. audit_config.yaml (quickstart default)
    3. audit.yaml
    4. config.yaml
    5. .glassalpha.yaml (hidden)

    Returns:
        Path to config file if found, None otherwise

    """
    common_names = [
        "glassalpha.yaml",
        "audit_config.yaml",  # Generated by quickstart
        "audit.yaml",
        "config.yaml",
        ".glassalpha.yaml",
    ]

    for name in common_names:
        path = Path(name)
        if path.exists():
            return path

    return None


def infer_output_path(config_path: Path) -> Path:
    """Infer output path from config filename.

    Rules:
    - Replaces .yaml/.yml extension with .html
    - Preserves directory structure
    - Falls back to "audit_report.html" if no extension

    Examples:
        audit.yaml → audit.html
        configs/prod.yaml → configs/prod.html
        my_audit → my_audit.html

    Args:
        config_path: Path to configuration file

    Returns:
        Inferred output path

    """
    # Get stem (filename without extension)
    stem = config_path.stem

    # Get parent directory
    parent = config_path.parent

    # Create output path with .html extension
    return parent / f"{stem}.html"


def should_enable_strict_mode(config_path: Path) -> bool:
    """Determine if strict mode should be auto-enabled.

    Strict mode is automatically enabled if:
    - Config filename contains "prod" or "production"
    - Config filename contains "strict"
    - Environment variable GLASSALPHA_STRICT=1

    Args:
        config_path: Path to configuration file

    Returns:
        True if strict mode should be enabled

    """
    # Check environment variable
    if os.environ.get("GLASSALPHA_STRICT", "").lower() in ("1", "true", "yes"):
        return True

    # Check filename patterns
    filename_lower = config_path.name.lower()
    strict_patterns = ["prod", "production", "strict"]

    return any(pattern in filename_lower for pattern in strict_patterns)


def should_enable_repro_mode(config_path: Path | None = None) -> bool:
    """Determine if repro mode should be auto-enabled.

    Repro mode is automatically enabled if:
    - Config filename contains "test" or "ci"
    - Running in CI environment (CI=true)
    - Environment variable GLASSALPHA_REPRO=1

    Args:
        config_path: Optional path to configuration file

    Returns:
        True if repro mode should be enabled

    """
    # Check environment variable
    if os.environ.get("GLASSALPHA_REPRO", "").lower() in ("1", "true", "yes"):
        return True

    # Check if running in CI
    if os.environ.get("CI", "").lower() in ("1", "true", "yes"):
        return True

    # Check filename patterns if config provided
    if config_path:
        filename_lower = config_path.name.lower()
        repro_patterns = ["test", "ci", "repro"]
        return any(pattern in filename_lower for pattern in repro_patterns)

    return False


def get_smart_defaults(
    config: Path | None = None,
    output: Path | None = None,
    strict: bool | None = None,
    repro: bool | None = None,
) -> dict[str, Path | bool]:
    """Get smart defaults for all CLI parameters.

    This function applies intelligent defaults based on context. Explicit
    values always override inferred defaults.

    Args:
        config: Explicit config path (None to infer)
        output: Explicit output path (None to infer)
        strict: Explicit strict mode (None to infer)
        repro: Explicit repro mode (None to infer)

    Returns:
        Dictionary with resolved defaults

    Raises:
        ValueError: If config cannot be found or inferred

    """
    # Resolve config path
    if config is None:
        inferred_config = infer_config_path()
        if inferred_config is None:
            raise ValueError(
                "No configuration file found. Create one with 'glassalpha init' or specify with --config",
            )
        config = inferred_config

    # Resolve output path
    if output is None:
        output = infer_output_path(config)

    # Resolve strict mode
    if strict is None:
        strict = should_enable_strict_mode(config)

    # Resolve repro mode
    if repro is None:
        repro = should_enable_repro_mode(config)

    return {
        "config": config,
        "output": output,
        "strict": strict,
        "repro": repro,
    }


def format_defaults_info(defaults: dict[str, Path | bool]) -> str:
    """Format inferred defaults as human-readable message.

    Args:
        defaults: Dictionary from get_smart_defaults()

    Returns:
        Formatted string for user feedback

    """
    lines = ["Using smart defaults:"]

    for key, value in defaults.items():
        if isinstance(value, bool):
            if value:
                lines.append(f"  • {key}: enabled")
        else:
            lines.append(f"  • {key}: {value}")

    return "\n".join(lines)
