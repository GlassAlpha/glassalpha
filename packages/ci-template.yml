# CI Template - Wheel-first approach to prevent thrashing
# Copy this to .github/workflows/ci.yml when ready to add CI

name: CI - Wheel First

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    # CRITICAL: Install build tools first
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build pytest pytest-cov pytest-mock

    # CRITICAL: Always build wheel first (like local development)
    - name: Build wheel
      run: python -m build
      working-directory: packages

    # CRITICAL: Install from wheel (NOT editable install)
    - name: Install from wheel
      run: |
        pip install --force-reinstall dist/*.whl
      working-directory: packages

    # Optional: Enable packaging assertion in CI
    - name: Verify packaging
      run: |
        GLASSALPHA_ASSERT_PACKAGING=1 python -c "import glassalpha.report"
      working-directory: packages

    # Fast logging contract guard (before tests)
    - name: Enforce single-arg logging
      run: |
        python - <<'PY'
        import ast, sys, pathlib
        bad = []
        root = pathlib.Path("src/glassalpha")
        for p in root.rglob("*.py"):
            tree = ast.parse(p.read_text(encoding="utf-8"))
            for node in ast.walk(tree):
                if isinstance(node, ast.Call) and isinstance(node.func, ast.Attribute):
                    if node.func.attr in {"debug","info","warning","error","critical","exception"}:
                        # More than one positional arg means printf-style or extra args
                        if len(node.args) > 1:
                            bad.append(f"{p}:{node.lineno}")
        if bad:
            print("printf-style logging detected (multiple positional args):")
            print("\n".join(bad))
            sys.exit(1)
        PY
      working-directory: packages

    # Run contract guard tests first (fast feedback)
    - name: Run contract guard tests
      run: pytest -xvs tests/contracts/
      working-directory: packages

    # Run hot spot tests (the critical 4 contracts)
    - name: Run hot spot tests
      run: |
        # Install minimal test dependencies
        pip install numpy pandas scikit-learn pyyaml
        pytest -q tests/test_pipeline_basic.py::test_pipeline_logs_initialization tests/test_end_to_end.py::test_multiple_model_types tests/test_model_integration.py::test_model_saving_and_loading
      working-directory: packages

    # Gate 1: Critical-path modules (90%+ coverage)
    - name: Gate 1 - Critical modules (90%+)
      run: |
        pytest -q --cov=glassalpha --cov-config=.coveragerc_gate1 --cov-fail-under=90
      working-directory: packages

    # Gate 2: Full repo coverage (trend-based)
    - name: Gate 2 - Full repo coverage (70%+)
      run: |
        pytest -q --cov=glassalpha --cov-fail-under=70
      working-directory: packages
