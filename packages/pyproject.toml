[project]
name = "glassalpha"
version = "0.1.0"
description = "AI Compliance Toolkit - transparent, auditable, regulator-ready ML audits"
authors = [{ name = "GlassAlpha Team" }]
readme = "README.md"
license = "Apache-2.0"
requires-python = ">=3.11"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Education",
    "Intended Audience :: Information Technology",
    "Intended Audience :: Legal Industry",
    "Intended Audience :: Financial and Insurance Industry",
    "Intended Audience :: Healthcare Industry",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Quality Assurance",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
]
dependencies = [
    # Core framework - minimal dependencies for basic functionality
    "typer>=0.9.0",          # CLI framework with command groups
    "pydantic>=2.5.0",       # Config validation and schemas
    "pyyaml>=6.0",           # YAML config parsing

    # Scientific stack - minimal for basic model support
    "numpy>=2.1",            # First version with Python 3.13 wheels
    "pandas>=2.2.3",         # Python 3.13 support
    "scipy>=1.15",           # First version with Python 3.13 wheels
    "scikit-learn>=1.5",     # NumPy 2.x compatible, provides LogisticRegression for base install

    # Utilities
    "orjson>=3.9.0",         # Fast JSON serialization
    "platformdirs>=4.0.0",   # Cross-platform user data directories
    "jinja2>=3.1,<4",        # HTML templating - required for all report generation
]

[project.optional-dependencies]
# SHAP explainers and tree models - enables advanced explainers and models
explain = ["shap>=0.44", "xgboost>=2.0", "lightgbm>=4.0"]

# Plotting and visualization dependencies
viz = ["matplotlib>=3.9", "seaborn>=0.13"]

# PDF generation dependencies (jinja2 is now in core)
docs = [
    "weasyprint>=63,<64; platform_system!='Windows'",
    "reportlab>=4.1; platform_system=='Windows'",
]

# Development dependencies
dev = [
    "pytest>=8.0",
    "pytest-cov>=4.1",
    "pytest-asyncio>=0.21",
    "black>=23.0",
    "ruff>=0.6",
    "mypy>=1.11",
    "pre-commit>=3.5"
]

# Everything - all optional features
all = ["glassalpha[explain,viz,docs]"]
# Enterprise dependencies (not included in OSS)
# These would be in glassalpha-enterprise package
# enterprise = [...]

[project.scripts]
glassalpha = "glassalpha.cli:app"

[project.entry-points."glassalpha.models"]
passthrough = "glassalpha.models.passthrough:PassThroughModel"
# Note: The other models register themselves via manual registration functions
# when their modules are imported, not via entry points

[project.entry-points."glassalpha.explainers"]
treeshap = "glassalpha.explain.shap.tree:TreeSHAPExplainer"
kernelshap = "glassalpha.explain.shap.kernel:KernelSHAPExplainer"

[project.entry-points."glassalpha.metrics"]
noop_metric = "glassalpha.metrics.base:NoOpMetric"

[project.entry-points."glassalpha.profiles"]
tabular_compliance = "glassalpha.profiles.tabular:TabularComplianceProfile"

[build-system]
requires = ["setuptools>=70.0.0", "wheel>=0.43.0", "build>=1.2.1"]
build-backend = "setuptools.build_meta"

[tool.cibuildwheel]
# Build wheels for Python 3.11, 3.12, and 3.13 on major platforms
build = "cp311-* cp312-* cp313-*"
skip = "*-win32 *-manylinux_i686 *-musllinux_*"  # Skip 32-bit and musl

# Use constraints.txt for consistent builds
before-build = "pip install -c constraints.txt --upgrade pip wheel"
test-requires = "pytest pytest-cov"
test-command = "pytest {project}/tests/test_core_foundation.py -v"

# Platform-specific settings
[tool.cibuildwheel.macos]
archs = ["x86_64", "arm64"]

[tool.cibuildwheel.linux]
archs = ["x86_64", "aarch64"]
before-all = "yum install -y cairo-devel pango-devel gdk-pixbuf2-devel || apt-get update && apt-get install -y libcairo2-dev libpango1.0-dev libgdk-pixbuf2.0-dev"

[tool.cibuildwheel.windows]
archs = ["AMD64"]

[tool.setuptools.packages.find]
where = ["src"]
include = ["glassalpha*"]

[tool.setuptools]
include-package-data = true

[tool.setuptools.package-data]
# Contract compliance: Include templates in wheel for importlib.resources loading
"glassalpha.report.templates" = ["*.html", "*.css", "*.js", "*.txt"]
# Include built-in configuration files for wheel-based testing
"glassalpha.data.configs" = ["*.yaml"]

[tool.ruff]
line-length = 120  # Modern standard (vs outdated 100) - matches industry practice
target-version = "py311"
extend-include = ["*.pyi"]
extend-exclude = ["glassalpha-enterprise/"]  # Enterprise code has separate config

[tool.ruff.lint]
select = ["ALL"]
ignore = [
    "D417",  # Self parameter documentation not required
    "D203", "D213",  # Conflicting docstring rules
    "D401",          # Docstring mood - pure style preference ("Creates X" vs "Create X")
]

# Per-file ignores for intentional design patterns
[tool.ruff.lint.per-file-ignores]
# CLI files use clean error handling + Typer patterns + late imports for command registration
"src/**/cli/*.py" = ["B904", "B008", "E402"]  # Clean UX exception handling + Typer defaults + late imports
# Test files need module-level imports for mocking dependencies
"tests/*.py" = ["E402"]  # Allow imports not at top for dependency mocking
# Demo files are intentionally less strict for educational purposes
"demo_*.py" = ["D103", "E402", "E501", "D107", "D105"]  # Allow missing docstrings, long lines
# Config validation uses intentional tensorflow import for detection
"src/**/config/strict.py" = ["F401"]  # tensorflow import is used for environment detection

[tool.mypy]
python_version = "3.11"
strict = true
warn_return_any = true
warn_unused_configs = true
no_implicit_reexport = true
namespace_packages = true
show_error_codes = true
show_column_numbers = true
pretty = true

[[tool.mypy.overrides]]
module = [
    "shap.*",
    "xgboost.*",
    "lightgbm.*",
    "weasyprint.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "8.0"
addopts = [
    "-ra",
    "--strict-markers",
    # Coverage now handled by CI configuration to allow dual gates
    # XGBoost tests use conditional import - will skip gracefully if unavailable
    # INCREMENTAL COVERAGE PLAN: Gate 1 (critical ≥90%), Gate 2 (overall ≥60% → 70%)
    # Current: Gate 1 at 100%, Gate 2 at 63% - need targeted tests for non-critical modules
]
markers = [
    "requires_xgboost: tests that need XGBoost runtime (can be skipped on incompatible environments)",
    "slow: tests that take longer than usual (e.g. full audits, can be skipped with -m 'not slow')",
]
testpaths = ["tests"]

# Warning filters: treat our warnings as errors, filter third-party noise
filterwarnings = [
    "error::UserWarning:glassalpha.*",
    "ignore:X does not have valid feature names.*:UserWarning:sklearn.base",
    "ignore:X has feature names.*:UserWarning:sklearn.base",
    "ignore:.*l1_reg.*deprecated.*:DeprecationWarning:shap.explainers._kernel",
    "ignore:Mean of empty slice.*:RuntimeWarning:numpy",
    "ignore:invalid value encountered in scalar divide.*:RuntimeWarning:numpy",
    "ignore:Precision is ill-defined.*:UserWarning",
    "ignore:PyPDF2 is deprecated.*:DeprecationWarning",
]
# pythonpath = ["src"]  # Removed: forces testing against installed package, not source tree

[tool.coverage.run]
branch = true
source = ["src"]                 # measure source code
relative_files = true
parallel = false                 # disable shards to simplify coverage collection in CI

[tool.coverage.paths]
# Unify local src and site-packages under one logical path to fix "module-not-measured" warnings
glassalpha = [
  "src/glassalpha",
  "*/site-packages/glassalpha"
]
source = ["src/glassalpha"]

[tool.coverage.report]
# Explicitly set fail_under to 0 to prevent pytest-cov from enforcing global threshold
fail_under = 0
# Temporary omissions to keep Gate 2 meaningful while we add tests
omit = [
  "*/site-packages/glassalpha/metrics/drift/detection.py",   # placeholder module
  "*/site-packages/glassalpha/metrics/registry.py",          # legacy shim, unused
  "*/site-packages/glassalpha/models/_io.py",                # unused shim
  "*/site-packages/glassalpha/profiles/*",                   # not shipped yet
  "*/site-packages/glassalpha/report/renderers/html.py"      # PDF path is used in CI
]

[tool.black]
line-length = 120
target-version = ["py311"]
extend-exclude = "glassalpha-enterprise/"

[tool.isort]
profile = "black"
line_length = 120
multi_line_output = 3
