[project]
name = "glassalpha"
version = "0.1.0"
description = "AI Compliance Toolkit - transparent, auditable, regulator-ready ML audits"
authors = [{ name = "GlassAlpha Team" }]
readme = "README.md"
license = { text = "Apache-2.0" }
requires-python = ">=3.11"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Education",
    "Intended Audience :: Information Technology",
    "Intended Audience :: Legal Industry",
    "Intended Audience :: Financial and Insurance Industry",
    "Intended Audience :: Healthcare Industry",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Quality Assurance",
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
dependencies = [
    # Core dependencies for Phase 1
    "typer>=0.9.0",          # CLI framework with command groups
    "pydantic>=2.5.0",       # Config validation and schemas
    "pyyaml>=6.0",           # YAML config parsing
    # PERMISSIVE CONSTRAINTS: Allow working versions (local proves NumPy 2.x works)
    "numpy>=1.24.0",         # Allow NumPy 2.x (works locally)
    "pandas>=2.0.0",         # Data handling
    "scipy>=1.11.0",         # Scientific computing
    "scikit-learn>=1.3.0",   # ML utilities and metrics

    # ML Models - Pin XGBoost to avoid CUDA dependencies
    # XGBoost 3.x includes GPU support by default (295MB+ CUDA libraries)
    # Phase 1 focus is CPU-only inference/auditing, not training large models
    # Future: Consider "xgboost[gpu]" in optional enterprise dependencies for large-scale audits
    "xgboost>=2.0.0,<3.0.0", # XGBoost model support (CPU-only, no CUDA overhead)
    "lightgbm>=4.0.0",       # LightGBM model support
    "shap>=0.43.0",          # SHAP explainability
    "matplotlib>=3.7.0",     # Plotting for reports
    "seaborn>=0.12.0",       # Statistical plotting
    "jinja2>=3.1.0",         # Template engine for reports
    "weasyprint>=60.0",      # PDF generation
    "orjson>=3.9.0",         # Fast JSON serialization
]

[project.scripts]
glassalpha = "glassalpha.cli:app"

[project.optional-dependencies]
dev = [
    "pytest>=8.0",
    "pytest-cov>=4.1",
    "pytest-asyncio>=0.21",
    "ruff>=0.6",
    "mypy>=1.11",
    "black>=23.0",
    "pre-commit>=3.5",
]
docs = [
    "mkdocs>=1.5",
    "mkdocs-material>=9.4",
    "mkdocstrings[python]>=0.24",
]
# Enterprise dependencies (not included in OSS)
# These would be in glassalpha-enterprise package
# enterprise = [...]

[build-system]
requires = ["setuptools>=61.0"]
build-backend = "setuptools.build_meta"

[tool.ruff]
line-length = 120  # Modern standard (vs outdated 100) - matches industry practice
target-version = "py311"
extend-include = ["*.pyi"]
extend-exclude = ["glassalpha-enterprise/"]  # Enterprise code has separate config

[tool.ruff.lint]
select = ["ALL"]
ignore = [
    "D417",  # Self parameter documentation not required
    "D203", "D213",  # Conflicting docstring rules
    "D401",          # Docstring mood - pure style preference ("Creates X" vs "Create X")
]

# Per-file ignores for intentional design patterns
[tool.ruff.lint.per-file-ignores]
# CLI files use clean error handling + Typer patterns + late imports for command registration
"src/**/cli/*.py" = ["B904", "B008", "E402"]  # Clean UX exception handling + Typer defaults + late imports
# Test files need module-level imports for mocking dependencies
"tests/*.py" = ["E402"]  # Allow imports not at top for dependency mocking
# Demo files are intentionally less strict for educational purposes
"demo_*.py" = ["D103", "E402", "E501", "D107", "D105"]  # Allow missing docstrings, long lines
# Config validation uses intentional tensorflow import for detection
"src/**/config/strict.py" = ["F401"]  # tensorflow import is used for environment detection

[tool.mypy]
python_version = "3.11"
strict = true
warn_return_any = true
warn_unused_configs = true
no_implicit_reexport = true
namespace_packages = true
show_error_codes = true
show_column_numbers = true
pretty = true

[[tool.mypy.overrides]]
module = [
    "shap.*",
    "xgboost.*",
    "lightgbm.*",
    "weasyprint.*",
]
ignore_missing_imports = true

[tool.setuptools.packages.find]
where = ["src"]

[tool.pytest.ini_options]
minversion = "8.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--cov=glassalpha",
    "--cov-report=term-missing",
    "--cov-report=html",
    # XGBoost tests use conditional import - will skip gracefully if unavailable
    # INCREMENTAL COVERAGE PLAN: 13.83% → 25% → 35% → 45% → 50% → 90%
    # Current: 13.83% (foundation only) - major implementation modules need tests
    # Plan: Add tests incrementally to avoid CI blocking while building comprehensive coverage
    # Stage 1: 25% with pipeline+data tests (~400 lines)
    # Stage 2: 35% with metrics tests (~400 lines)
    # Stage 3: 45% with model+explainer tests (~600 lines)
    # Stage 4: 50% with utils tests (~500 lines)
    # Final: 90% when full audit PDF generation is production-ready
    "--cov-fail-under=49",  # Phase 1 nearly complete (49.60%) - comprehensive testing across all core modules
]
testpaths = ["tests"]
pythonpath = ["src"]

[tool.black]
line-length = 120
target-version = ["py311"]
extend-exclude = "glassalpha-enterprise/"

[tool.isort]
profile = "black"
line_length = 120
multi_line_output = 3
