---
name: Test & Build

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      run-slow-tests:
        description: "Run slow tests (normally skipped)"
        type: boolean
        default: false
      debug-mode:
        description: "Enable debug logging"
        type: boolean
        default: false

permissions:
  contents: read

jobs:
  unit-tests:
    name: Unit Tests (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    env:
      # Fast unit tests only - skip expensive setup
      COV_FLOOR_CRITICAL: "45"
      PYTHONHASHSEED: 0
      TZ: UTC
      MPLBACKEND: Agg
      OMP_NUM_THREADS: 1
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]
    steps:
      - uses: actions/checkout@ff7abcd0c3c05ccf6adc123a8cd1fd4fb30fb493 # v5.0.0
        with:
          fetch-depth: 0

      - name: Set up Git for testing
        run: |
          git config --global user.name "CI Test Runner"
          git config --global user.email "ci@glassalpha.test"

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@18566f86b301499665bd3eb1a2247e0849c64fa5 # v6.0.0
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip dependencies
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.1.0
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('pyproject.toml', 'constraints.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install build tools
        run: |
          python -m pip install -U pip setuptools wheel build

      - name: Install package and test dependencies
        run: |
          python -m pip install -c constraints.txt -e ".[all,dev]"
          python -m pip install pytest pytest-cov

      - name: Run critical contract tests (fast)
        run: |
          echo "=== Run critical contract regression tests (fast subset) ==="
          pytest tests/test_critical_regression_guards.py -v --tb=short

      - name: Run core contract tests (fast)
        run: |
          echo "=== Run core contract guard tests (fast subset) ==="
          pytest tests/contracts/ -v --tb=short

      - name: Run unit tests (fast)
        run: |
          echo "=== Run unit tests (fast subset) ==="
          pytest tests/ -k "not (integration or notebook or smoke or slow)" -v --tb=short --cov=src/glassalpha

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unit-tests

  integration-tests:
    name: Integration Tests (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    needs: unit-tests
    env:
      COV_FLOOR_OVERALL: "70"
      COV_FLOOR_CRITICAL: "45"
      PYTHONHASHSEED: 0
      TZ: UTC
      MPLBACKEND: Agg
      OMP_NUM_THREADS: 1
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]
    steps:
      - uses: actions/checkout@ff7abcd0c3c05ccf6adc123a8cd1fd4fb30fb493 # v5.0.0
        with:
          fetch-depth: 0

      - name: Set up Git for testing
        run: |
          git config --global user.name "CI Test Runner"
          git config --global user.email "ci@glassalpha.test"

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@18566f86b301499665bd3eb1a2247e0849c64fa5 # v6.0.0
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip dependencies
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.1.0
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('pyproject.toml', 'constraints.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install build tools
        run: |
          python -m pip install -U pip setuptools wheel build

      - name: Build and install package
        run: |
          python -m build
          python -m pip install -c constraints.txt dist/*.whl
          python -m pip install -c constraints.txt xgboost lightgbm weasyprint
          python -m pip install pytest pytest-cov

      - name: Run integration tests
        run: |
          echo "=== Run integration tests ==="
          pytest tests/ -k "integration" -v --tb=short --cov=glassalpha --cov-append

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: integration-tests

  smoke-tests:
    name: Smoke Tests (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    needs: integration-tests
    if: github.event.inputs.run-slow-tests == 'true' || github.event_name == 'push'
    env:
      PYTHONHASHSEED: 0
      TZ: UTC
      MPLBACKEND: Agg
      OMP_NUM_THREADS: 1
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]
    steps:
      - uses: actions/checkout@ff7abcd0c3c05ccf6adc123a8cd1fd4fb30fb493 # v5.0.0
        with:
          fetch-depth: 0

      - name: Set up Git for testing
        run: |
          git config --global user.name "CI Test Runner"
          git config --global user.email "ci@glassalpha.test"

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@18566f86b301499665bd3eb1a2247e0849c64fa5 # v6.0.0
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip dependencies
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.1.0
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('pyproject.toml', 'constraints.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install build tools
        run: |
          python -m pip install -U pip setuptools wheel build

      - name: Build and install package
        run: |
          python -m build
          python -m pip install -c constraints.txt dist/*.whl
          python -m pip install -c constraints.txt xgboost lightgbm shap

      - name: Install notebook dependencies
        run: |
          python -m pip install pytest nbmake

      - name: Test notebooks with nbmake
        working-directory: examples/notebooks
        run: |
          echo "=== Test notebooks ==="
          pytest . -v --tb=short --nbmake || echo "Notebook tests skipped (optional)"

      - name: Run security audit
        run: |
          echo "=== Run security audit ==="
          python -m pip install pip-audit
          python -m pip_audit || echo "Security audit completed with warnings (non-blocking)"

      - name: Run linting
        run: |
          echo "=== Run linting ==="
          python -m pip install ruff
          ruff check src/glassalpha/ --exit-zero || echo "⚠️  Ruff found issues (non-blocking)"

  sign-artifacts:
    name: Sign Artifacts
    needs: [unit-tests, integration-tests]
    runs-on: ubuntu-latest
    permissions:
      id-token: write # Required for Sigstore OIDC signing
      contents: read
    steps:
      - uses: actions/checkout@ff7abcd0c3c05ccf6adc123a8cd1fd4fb30fb493 # v5.0.0

      - name: Set up Python
        uses: actions/setup-python@18566f86b301499665bd3eb1a2247e0849c64fa5 # v6.0.0
        with:
          python-version: "3.11"

      - name: Install build tools
        run: |
          python -m pip install -U pip setuptools wheel build

      - name: Build package
        run: |
          python -m build

      - name: Generate SBOM
        run: |
          python -m pip install cyclonedx-bom==4.4.0
          cyclonedx-py environment -o dist/sbom.json

      - name: Sign artifacts with Sigstore
        uses: sigstore/gh-action-sigstore-python@v3.0.1
        with:
          inputs: dist/*.whl dist/sbom.json

      - name: Upload signed artifacts
        uses: actions/upload-artifact@v4
        with:
          name: signed-artifacts-${{ github.run_id }}
          path: |
            dist/*.whl
            dist/sbom.json
            dist/*.sig
          retention-days: 7

  validate-constraints:
    name: Validate Constraints
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.modified, 'pyproject.toml') || contains(github.event.head_commit.modified, 'constraints/')
    steps:
      - uses: actions/checkout@ff7abcd0c3c05ccf6adc123a8cd1fd4fb30fb493 # v5.0.0

      - name: Set up Python
        uses: actions/setup-python@18566f86b301499665bd3eb1a2247e0849c64fa5 # v6.0.0
        with:
          python-version: "3.12"

      - name: Check constraints are documented
        run: |
          echo "=== Verifying constraint files exist ==="
          required_files=(
            "constraints/constraints-ubuntu-latest-py3.11.txt"
            "constraints/constraints-ubuntu-latest-py3.12.txt"
            "constraints/constraints-macos-14-py3.11.txt"
            "constraints/constraints-macos-14-py3.12.txt"
          )

          for file in "${required_files[@]}"; do
            if [ ! -f "$file" ]; then
              echo "❌ Missing required constraint file: $file"
              exit 1
            fi
            echo "✅ Found: $file"
          done

      - name: Validate constraints are not empty
        run: |
          echo "=== Checking constraint files are not empty ==="
          for file in constraints/constraints-*.txt; do
            if [ ! -s "$file" ]; then
              echo "❌ Empty constraint file: $file"
              exit 1
            fi
            lines=$(wc -l < "$file")
            echo "✅ $file: $lines lines"
          done

      - name: Check for stale constraints (optional warning)
        run: |
          echo "=== Checking for potentially stale constraints ==="
          echo "If pyproject.toml changed recently, constraints may need regeneration"
          echo "See CONSTRAINTS.md for regeneration instructions"

          # Get last modification times
          pyproject_mtime=$(stat -c %Y pyproject.toml 2>/dev/null || stat -f %m pyproject.toml)
          constraints_mtime=$(find constraints -name "*.txt" -type f -exec stat -c %Y {} \; 2>/dev/null | sort -n | head -1 || echo "0")

          if [ "$pyproject_mtime" -gt "$constraints_mtime" ]; then
            echo "⚠️  pyproject.toml is newer than constraints files"
            echo "   Consider regenerating constraints if dependencies changed"
          else
            echo "✅ Constraints appear up-to-date"
          fi

  security:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@ff7abcd0c3c05ccf6adc123a8cd1fd4fb30fb493 # v5.0.0

      - name: Set up Python
        uses: actions/setup-python@18566f86b301499665bd3eb1a2247e0849c64fa5 # v6.0.0
        with:
          python-version: "3.12"

      - name: Cache pip dependencies
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.1.0
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('pyproject.toml', 'constraints.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install package and dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -c constraints.txt -e ".[all]"

      - name: Run pip-audit (security vulnerability scan)
        run: |
          python -m pip install pip-audit
          echo "=== Scanning for known CVEs in dependencies ==="
          pip-audit --desc --format json --output pip-audit-report.json || true

          echo "=== Human-readable report ==="
          pip-audit --desc || echo "⚠️  Vulnerabilities found (see details above)"

          echo ""
          echo "Note: Security scan failures do not block CI currently."
          echo "Review findings and update constraints.txt for critical CVEs."

      - name: Upload security report
        if: always()
        uses: actions/upload-artifact@2848b2cda0e5190984587ec6bb1f36730ca78d50 # v4.4.0
        with:
          name: pip-audit-report
          path: pip-audit-report.json
          retention-days: 90

  test-cross-platform:
    name: Cross-platform tests (macOS + Ubuntu)
    runs-on: ${{ matrix.os }}
    env:
      # Determinism environment for cross-platform tests
      PYTHONHASHSEED: 0
      TZ: UTC
      MPLBACKEND: Agg
      OMP_NUM_THREADS: 1
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ["3.11"]
    steps:
      - uses: actions/checkout@ff7abcd0c3c05ccf6adc123a8cd1fd4fb30fb493 # v5.0.0
      - name: Set up Python
        uses: actions/setup-python@18566f86b301499665bd3eb1a2247e0849c64fa5 # v5.3.0
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install system dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew update
          brew install gobject-introspection cairo pango gdk-pixbuf libffi libomp
          echo "PKG_CONFIG_PATH=$(brew --prefix)/lib/pkgconfig" >> $GITHUB_ENV
          echo "DYLD_FALLBACK_LIBRARY_PATH=$(brew --prefix)/lib:$DYLD_FALLBACK_LIBRARY_PATH" >> $GITHUB_ENV
          echo "LDFLAGS=-L$(brew --prefix)/lib" >> $GITHUB_ENV
          echo "CPPFLAGS=-I$(brew --prefix)/include" >> $GITHUB_ENV

      - name: Install system dependencies (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgomp1 libcairo2-dev libpango1.0-dev libgdk-pixbuf2.0-dev

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev,all]"

      - name: Verify no parallel testing
        run: |
          # Check for pytest-xdist (breaks determinism if used for parallel execution)
          if pip list | grep -q pytest-xdist; then
            echo "⚠️  pytest-xdist detected - ensure it's not used for parallel execution"
            echo "   GlassAlpha requires single-threaded testing for determinism"
            echo "   Use pytest -m 'not requires_serial' if you need to run non-deterministic tests"
          else
            echo "✅ No pytest-xdist detected"
          fi

      - name: Run core tests (fast subset)
        run: |
          pytest tests/test_critical_regression_guards.py -v --tb=short

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@ff7abcd0c3c05ccf6adc123a8cd1fd4fb30fb493 # v5.0.0
      - name: Set up Python
        uses: actions/setup-python@18566f86b301499665bd3eb1a2247e0849c64fa5 # v6.0.0
        with:
          python-version: "3.12"

      - name: Cache pip dependencies
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.1.0
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('pyproject.toml', 'constraints.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install package with dev dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Lint with ruff
        run: |
          echo "🔍 Running ruff linter..."
          ruff check src/ tests/ --exit-zero || echo "⚠️  Ruff found issues (not failing build)"
          echo ""
          echo "🎨 Running black formatter check..."
          black --check src/ tests/ || echo "⚠️  Black found formatting issues (not failing build)"
          echo ""
          echo "Note: Linting warnings do not fail the build currently"
          # mypy --strict src/ # Disabled during architectural foundation phase
  docs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@ff7abcd0c3c05ccf6adc123a8cd1fd4fb30fb493 # v5.0.0
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@18566f86b301499665bd3eb1a2247e0849c64fa5 # v6.0.0
        with:
          python-version: "3.12"

      - name: Install Cairo
        run: sudo apt-get install -y libcairo2-dev

      - name: Cache pip
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.1.0
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('site/requirements.txt', 'site/mkdocs.yml', 'pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r site/requirements.txt

      - name: Build site
        run: |
          cd site
          mkdocs build --strict  # Run from site/ directory
        env:
          MKDOCS_ENABLE_SPELLCHECK: false
          MKDOCS_ENABLE_LINK_CHECK: true
          MKDOCS_ENABLE_SOCIAL: true

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@7b1f4a764d45c48632c6b24a0339c27f5614fb0b # v4.0.0
        with:
          path: ./site/site

  deploy:
    needs: [unit-tests, integration-tests, security, lint, docs]
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      pages: write # Required to deploy to Pages
      id-token: write # Required for OIDC authentication
      contents: read
    concurrency:
      group: pages-${{ github.ref }}
      cancel-in-progress: true
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@854d7aa1b99e4509c4d1b53d69b7ba4eaf39215a # v4.0.0
