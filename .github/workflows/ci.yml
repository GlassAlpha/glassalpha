name: CI/CD

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      COV_FLOOR_OVERALL: "60" # Temporary: bump to 70 after test coverage improvements
      COV_FLOOR_CRITICAL: "90" # Critical modules must maintain high coverage
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full git history for manifest generation tests

      - name: Set up Git for testing
        run: |
          git config --global user.name "CI Test Runner"
          git config --global user.email "ci@glassalpha.test"

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('packages/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Interpreter sanity check
        run: |
          cd packages
          echo "=== Interpreter sanity ==="
          which python; python -V
          which pip; pip -V
          python -c "import sys; print('PY:', sys.executable); print('PATH:', '\n'.join(sys.path))"

      - name: Inspect layout and package structure
        run: |
          cd packages
          echo "=== Repo layout ==="
          pwd; ls -la
          ls -la src/glassalpha || true
          ls -la src/glassalpha/data || true
          test -f src/glassalpha/data/__init__.py && echo "data/__init__.py present" || echo "data/__init__.py MISSING"
          echo "=== Case-mismatch smoke test ==="
          grep -R --line-number -E 'from +[Gg]lass[A-Z][a-zA-Z_]*|import +[Gg]lass[A-Z][a-zA-Z_]*' . || true

      - name: Install build tools
        run: |
          echo "=== Install build tools ==="
          python -m pip install -U pip setuptools wheel build

      - name: Upgrade toolchain and install dependencies
        run: |
          cd packages
          echo "=== Install compatible dependency stack (numpy 2.0+ for xgboost compatibility) ==="
          python -m pip install "numpy>=2.0,<2.2" "scipy>=1.10,<1.15" "scikit-learn>=1.3,<1.6" "matplotlib>=3.7,<3.9" "shap>=0.43,<0.46" "xgboost>=2.0,<2.1" "lightgbm>=4.0,<4.5" "pandas>=2.0,<2.3"

      - name: Build wheel and install (no editable)
        working-directory: packages
        run: |
          echo "=== Clean dist directory to prevent multiple wheels ==="
          rm -rf dist build *.egg-info
          mkdir -p dist
          echo "=== Build project wheel only (no dependencies) ==="
          python -m build --wheel --outdir dist
          echo "=== Verify dist hygiene: only project wheel ==="
          ls -la dist
          # Test 1: Exactly one glassalpha wheel
          glassalpha_wheel_count=$(ls dist/glassalpha-*.whl | wc -l)
          if [ "$glassalpha_wheel_count" -ne 1 ]; then
            echo "ERROR: Expected exactly 1 glassalpha wheel, found $glassalpha_wheel_count"
            ls -la dist/
            exit 1
          fi
          # Test 2: No other files in dist/
          total_files=$(ls dist | wc -l)
          if [ "$total_files" -ne 1 ]; then
            echo "ERROR: dist/ should contain only the project wheel, found $total_files files"
            ls -la dist/
            exit 1
          fi
          echo "✅ Dist hygiene verified: clean project-only wheel"
          python -m pip install --force-reinstall dist/glassalpha*.whl

      - name: Verify installation and dependencies
        working-directory: packages
        run: |
          echo "=== Dependency guardrail: check for unwanted heavy deps ==="
          python -c "
          import pkg_resources
          installed = [pkg.project_name.lower() for pkg in pkg_resources.working_set]
          gpu_packages = ['nvidia-nccl-cu12', 'nvidia-cudnn-cu12', 'torch', 'tensorflow']
          found_gpu = [pkg for pkg in gpu_packages if pkg in installed]
          if found_gpu:
              print(f'WARNING: Found heavy GPU packages in CPU job: {found_gpu}')
          else:
              print('✅ No unwanted GPU dependencies found')
          "
          echo "=== Dependency version diagnostics ==="
          python -c "import sys, numpy, scipy, sklearn, matplotlib; print('PY:', sys.executable); print('numpy:', numpy.__version__); print('scipy:', scipy.__version__); print('sklearn:', sklearn.__version__); print('matplotlib:', matplotlib.__version__)"
          echo "=== Package installation verification ==="
          python -m pip show -f glassalpha | sed -n '1,200p'
          echo "=== Verify data package files specifically ==="
          python -m pip show -f glassalpha | grep "glassalpha/data" || echo "ERROR: glassalpha/data NOT FOUND in wheel"
          echo "=== Test import surface ==="
          python -c "import glassalpha; from glassalpha import data, datasets, pipeline; print('SUCCESS: All core modules importable')" || echo "ERROR: Import surface test failed"
          echo "=== Smoke tests ==="
          python -c "import glassalpha, sys; print('✅ Version:', glassalpha.__version__)"
          python -m glassalpha --help > /dev/null && echo "✅ CLI help command works" || echo "❌ CLI help failed"

      - name: Install test dependencies
        run: |
          python -m pip install pytest pytest-cov pytest-asyncio

      - name: Syntax check (prevent broken Python files)
        working-directory: packages
        run: |
          echo "=== Compile all Python files to catch syntax errors ==="
          python - <<'PY'
          import compileall, sys, pkgutil, inspect, glassalpha, pathlib
          base = pathlib.Path(inspect.getsourcefile(glassalpha)).parent
          print(f"Compiling all Python files in {base}...")
          ok = compileall.compile_dir(str(base), quiet=1, force=True)
          if ok:
              print("✅ All Python files compile successfully")
          else:
              print("❌ Syntax errors found in Python files")
          sys.exit(0 if ok else 1)
          PY

      - name: Run contract regression tests first
        working-directory: packages
        run: |
          echo "=== Run critical contract regression tests ==="
          export MPLBACKEND=Agg
          env PYTHONPATH="" python -m pytest tests/test_constants_contract.py tests/test_feature_alignment_contract.py tests/test_logging_no_printf.py \
              --cov=glassalpha --cov-report=term-missing --cov-fail-under=0 -v --tb=short

      - name: Run core contract tests
        working-directory: packages
        run: |
          echo "=== Run core contract guard tests ==="
          export MPLBACKEND=Agg
          env PYTHONPATH="" python -m pytest tests/contracts/ -v --tb=short || echo "Contract tests not found, skipping"

      - name: Run tests with coverage (wheel-first)
        working-directory: packages
        run: |
          echo "=== Run tests with coverage against installed wheel ==="
          export MPLBACKEND=Agg
          env PYTHONPATH="" python -m pytest -q --disable-warnings \
            --cov=glassalpha \
            --cov-report=term-missing \
            --cov-report=xml \
            tests/

      - name: Gate 1 — Critical modules coverage
        working-directory: packages
        run: |
          echo "--- Gate 1: Critical-path modules (${COV_FLOOR_CRITICAL}%+) ---"
          # Combine & inspect coverage data before gate
          python -m coverage combine || true
          python -m coverage debug data  # shows which files were measured
          python -m coverage report \
            --fail-under=${COV_FLOOR_CRITICAL} \
            --include="*/glassalpha/pipeline/*,*/glassalpha/models/*,*/glassalpha/explain/*,*/glassalpha/config/*,*/glassalpha/report/renderer.py"

      - name: Gate 2 — Overall sanity floor
        working-directory: packages
        run: |
          echo "--- Gate 2: Overall sanity floor (${COV_FLOOR_OVERALL}%+) ---"
          # Combine & inspect coverage data before gate
          python -m coverage combine || true
          python -m coverage debug data  # shows which files were measured
          python -m coverage report --fail-under=${COV_FLOOR_OVERALL}

      - name: Run tests against installed package
        working-directory: packages
        run: |
          echo "=== Run full test suite against installed package (no source tree access) ==="
          export MPLBACKEND=Agg
          env PYTHONPATH="" python -m pytest tests/ -v

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('packages/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install package with dev dependencies
        run: |
          python -m pip install --upgrade pip
          cd packages
          pip install -e .[dev]

      - name: Lint with ruff
        working-directory: packages
        run: |
          ruff check src/ tests/
          black --check src/ tests/
          # mypy --strict src/ # Disabled during architectural foundation phase
  docs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install Cairo
        run: sudo apt-get install -y libcairo2-dev

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('site/requirements.txt', 'site/mkdocs.yml', 'packages/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r site/requirements.txt

      - name: Build site
        run: |
          cd site
          mkdocs build --strict  # Run from site/ directory
        env:
          MKDOCS_ENABLE_SPELLCHECK: false
          MKDOCS_ENABLE_LINK_CHECK: true
          MKDOCS_ENABLE_SOCIAL: true

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./site/site

  deploy:
    needs: [test, lint, docs]
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
