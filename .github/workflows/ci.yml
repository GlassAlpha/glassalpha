name: CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11', '3.12']
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('packages/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Interpreter sanity check
        run: |
          cd packages
          echo "=== Interpreter sanity ==="
          which python; python -V
          which pip; pip -V
          python -c "import sys; print('PY:', sys.executable); print('PATH:', '\n'.join(sys.path))"

      - name: Inspect layout and package structure
        run: |
          cd packages
          echo "=== Repo layout ==="
          pwd; ls -la
          ls -la src/glassalpha || true
          ls -la src/glassalpha/data || true
          test -f src/glassalpha/data/__init__.py && echo "data/__init__.py present" || echo "data/__init__.py MISSING"
          echo "=== Case-mismatch smoke test ==="
          grep -R --line-number -E 'from +[Gg]lass[A-Z][a-zA-Z_]*|import +[Gg]lass[A-Z][a-zA-Z_]*' . || true

      - name: Upgrade toolchain and install dependencies
        run: |
          cd packages
          echo "=== Install toolchain ==="
          python -m pip install -U pip setuptools wheel hatchling
          echo "=== Pre-install conservative dependency stack ==="
          python -m pip install "numpy>=1.24,<2.0" "scipy>=1.10,<1.14" "scikit-learn>=1.3,<1.5" "matplotlib>=3.7,<3.9" "shap>=0.43,<0.46"

      - name: Build wheel and install (no editable)
        run: |
          cd packages
          echo "=== Build a wheel, then install it (no editable) ==="
          python -m pip uninstall -y glassalpha || true
          python -m pip wheel -w dist .
          ls -la dist
          python -m pip install --force-reinstall dist/*.whl

      - name: Verify installation and dependencies
        run: |
          cd packages
          echo "=== Dependency version diagnostics ==="
          python -c "import sys, numpy, scipy, sklearn, matplotlib; print('PY:', sys.executable); print('numpy:', numpy.__version__); print('scipy:', scipy.__version__); print('sklearn:', sklearn.__version__); print('matplotlib:', matplotlib.__version__)"
          echo "=== Package installation verification ==="
          python -m pip show -f glassalpha | sed -n '1,200p'
          echo "=== Verify data package files specifically ==="
          python -m pip show -f glassalpha | grep "glassalpha/data" || echo "ERROR: glassalpha/data NOT FOUND in wheel"
          echo "=== Test import surface ==="
          python -c "import glassalpha; from glassalpha import data, datasets, pipeline; print('SUCCESS: All core modules importable')" || echo "ERROR: Import surface test failed"

      - name: Install test dependencies
        run: |
          cd packages
          python -m pip install pytest pytest-cov pytest-asyncio

      - name: Run tests against installed package
        run: |
          cd packages
          echo "=== Run tests against installed package (no source tree access) ==="
          export MPLBACKEND=Agg
          env PYTHONPATH="" python -m pytest tests/ -v

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('packages/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install package with dev dependencies
        run: |
          python -m pip install --upgrade pip
          cd packages
          pip install -e .[dev]

      - name: Lint with ruff
        run: |
          cd packages
          ruff check src/ tests/
          black --check src/ tests/
          # mypy --strict src/ # Disabled during architectural foundation phase
  docs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install Cairo
        run: sudo apt-get install -y libcairo2-dev

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('site/requirements.txt', 'site/mkdocs.yml', 'packages/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r site/requirements.txt

      - name: Build site
        run: |
          cd site
          mkdocs build --strict  # Run from site/ directory
        env:
          MKDOCS_ENABLE_SPELLCHECK: false
          MKDOCS_ENABLE_LINK_CHECK: true
          MKDOCS_ENABLE_SOCIAL: true

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./site/site

  deploy:
    needs: [test, lint, docs]
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
