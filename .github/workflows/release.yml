name: Publish to PyPI

on:
  release:
    types: [published]
  workflow_dispatch: # Manual trigger for testing

permissions:
  contents: read
  id-token: write # Required for PyPI Trusted Publishing and Sigstore OIDC

jobs:
  build:
    name: Build Distribution
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@ff7abcd0c3c05ccf6adc123a8cd1fd4fb30fb493 # v5.0.0

      - name: Set up Python
        uses: actions/setup-python@18566f86b301499665bd3eb1a2247e0849c64fa5 # v5.0.0
        with:
          python-version: "3.11"

      - name: Install build tools
        run: |
          python -m pip install --upgrade pip==24.2 build==1.2.1 twine==5.1.1 cyclonedx-bom==4.4.0

      - name: Build package
        run: |
          python -m build
          echo "Built artifacts:"
          ls -lh dist/

      - name: Generate SBOM
        run: |
          cyclonedx-py environment --outfile dist/sbom.json
          echo "âœ… Generated SBOM: $(ls -lh dist/sbom.json)"

      - name: Check distribution
        run: |
          twine check dist/*.whl dist/*.tar.gz
          echo "âœ… Distribution checks passed"

      - name: Install cosign
        uses: sigstore/cosign-installer@d7543c93d881b35a8faa02e8e3605f69b7a1ce62 # v3.10.0
        with:
          cosign-release: "v2.2.4"

      - name: Sign artifacts with Sigstore
        run: |
          echo "=== Signing artifacts with cosign ==="
          for file in dist/*.whl dist/*.tar.gz dist/sbom.json; do
            if [ -f "$file" ]; then
              echo "Signing $file..."
              # Use GitHub Actions built-in OIDC identity token
              cosign sign-blob --yes "$file" --output-signature "${file}.sig"
            fi
          done
          echo "âœ… All artifacts signed"
          ls -la dist/*.sig

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-${{ github.run_id }}
          path: |
            dist/*.whl
            dist/*.tar.gz
            dist/sbom.json
            dist/*.sig
          retention-days: 90

  publish-testpypi:
    name: Publish to TestPyPI
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    environment:
      name: testpypi
      url: https://test.pypi.org/p/glassalpha

    steps:
      - uses: actions/download-artifact@v4
        with:
          name: dist-${{ github.run_id }}
          path: dist/

      - name: Publish to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}

  publish-pypi:
    name: Publish to PyPI
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    environment:
      name: pypi
      url: https://pypi.org/p/glassalpha

    steps:
      - uses: actions/download-artifact@v4
        with:
          name: dist-${{ github.run_id }}
          path: dist/

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}

      - name: Create release assets summary
        run: |
          echo "## Published to PyPI ðŸŽ‰" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Artifacts:" >> $GITHUB_STEP_SUMMARY
          echo "- Wheel: \`$(ls dist/*.whl)\`" >> $GITHUB_STEP_SUMMARY
          echo "- Source: \`$(ls dist/*.tar.gz)\`" >> $GITHUB_STEP_SUMMARY
          echo "- SBOM: \`dist/sbom.json\`" >> $GITHUB_STEP_SUMMARY
          echo "- Signatures: \`dist/*.sig\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Verification:" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "pip install glassalpha" >> $GITHUB_STEP_SUMMARY
          echo "glassalpha --version" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

  upload-release-assets:
    name: Upload Release Assets
    needs: [build, publish-pypi]
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    permissions:
      contents: write

    steps:
      - uses: actions/download-artifact@v4
        with:
          name: dist-${{ github.run_id }}
          path: dist/

      - name: Generate checksums
        run: |
          cd dist
          sha256sum * > SHA256SUMS.txt
          echo "Checksums:"
          cat SHA256SUMS.txt

      - name: Upload release assets
        uses: softprops/action-gh-release@v2
        with:
          files: |
            dist/*.whl
            dist/*.tar.gz
            dist/sbom.json
            dist/*.sig
            dist/SHA256SUMS.txt
