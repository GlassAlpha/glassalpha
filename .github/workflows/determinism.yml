---
name: Determinism Validation

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch: # Allow manual triggers

permissions:
  contents: read

jobs:
  validate-determinism:
    name: Validate Determinism (${{ matrix.os }}, Python ${{ matrix.python-version }})
    runs-on: ${{ matrix.os }}
    timeout-minutes: 20

    env:
      # Determinism environment - available to ALL steps
      PYTHONHASHSEED: 0
      TZ: UTC
      MPLBACKEND: Agg
      SOURCE_DATE_EPOCH: 1577836800
      OMP_NUM_THREADS: 1
      MKL_NUM_THREADS: 1
      OPENBLAS_NUM_THREADS: 1
      NUMEXPR_NUM_THREADS: 1
      VECLIB_MAXIMUM_THREADS: 1
      BLIS_NUM_THREADS: 1
      GLASSALPHA_NO_PROGRESS: 1
      GLASSALPHA_DETERMINISTIC: 1
      LC_ALL: C

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ["3.11", "3.12"]

    steps:
      - name: Checkout repository
        uses: actions/checkout@ff7abcd0c3c05ccf6adc123a8cd1fd4fb30fb493 # v5.0.0

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v6
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"

      - name: Install system dependencies (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            libgomp1 \
            libopenblas-dev \
            libcairo2-dev \
            libpango1.0-dev \
            libgdk-pixbuf2.0-dev

      - name: Install system dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew update
          brew install \
            libomp \
            cairo \
            pango \
            gobject-introspection \
            harfbuzz \
            fribidi \
            glib \
            fontconfig \
            freetype
          # Set library paths for WeasyPrint runtime linking
          echo "PKG_CONFIG_PATH=$(brew --prefix)/lib/pkgconfig" >> $GITHUB_ENV
          echo "DYLD_FALLBACK_LIBRARY_PATH=$(brew --prefix)/lib:$DYLD_FALLBACK_LIBRARY_PATH" >> $GITHUB_ENV
          echo "LDFLAGS=-L$(brew --prefix)/lib" >> $GITHUB_ENV
          echo "CPPFLAGS=-I$(brew --prefix)/include" >> $GITHUB_ENV
          # Ensure consistent font rendering
          echo "FONTCONFIG_PATH=$(brew --prefix)/etc/fonts" >> $GITHUB_ENV

      - name: Install dependencies with constraints
        run: |
          python -m pip install --upgrade pip==24.2 setuptools==75.1.0 wheel==0.44.0
          pip install -c constraints.txt -e ".[all,dev]"
          pip install shap==0.46.0  # Required for deterministic explainer selection

      - name: Verify dependencies
        run: |
          echo "=== Verify critical dependencies ==="
          python -c "import shap; print(f'✅ SHAP {shap.__version__}')" || \
            (echo "❌ SHAP not available"; exit 1)
          python -c "import weasyprint; print(f'✅ WeasyPrint {weasyprint.__version__}')" || \
            (echo "❌ WeasyPrint not available"; exit 1)

      - name: Verify environment setup
        run: |
          echo "=== Deterministic Environment ==="
          echo "SOURCE_DATE_EPOCH: $SOURCE_DATE_EPOCH"
          echo "PYTHONHASHSEED: $PYTHONHASHSEED"
          echo "OMP_NUM_THREADS: $OMP_NUM_THREADS"
          echo "Python version: $(python --version)"
          echo "Platform: $(uname -a)"

      - name: Verify determinism environment
        run: |
          echo "=== Determinism Environment Check ==="
          echo "OMP_NUM_THREADS: ${OMP_NUM_THREADS:-not set}"
          echo "PYTHONHASHSEED: ${PYTHONHASHSEED:-not set}"
          echo "TZ: ${TZ:-not set}"
          echo "MPLBACKEND: ${MPLBACKEND:-not set}"

          # Verify single-threaded
          if [ "${OMP_NUM_THREADS}" != "1" ]; then
            echo "⚠️  OMP_NUM_THREADS should be 1 for determinism (currently: ${OMP_NUM_THREADS:-not set})"
          fi

          echo "✅ Environment validation passed"

      - name: Run determinism regression test
        run: |
          echo "=== Running determinism test (single run) ==="
          python3 -m pytest tests/test_critical_regression_guards.py::TestCriticalRegressions::test_cli_determinism_regression_guard -v --tb=short

      - name: Run multi-run validation (5 consecutive runs)
        run: |
          echo "=== Running determinism test 5 times ==="
          for i in {1..5}; do
            echo "Run $i/5..."
            python3 -m pytest tests/test_critical_regression_guards.py::TestCriticalRegressions::test_cli_determinism_regression_guard -v --tb=line || exit 1
          done
          echo "✅ All 5 runs passed"

      - name: Cross-platform hash validation
        run: |
          echo "=== Cross-platform determinism check ==="

          # Use production golden config (known to work)
          CONFIG_FILE="examples/german_credit_golden/config.yaml"

          # Validate config has correct determinism settings
          echo "=== Validating determinism config ==="
          python -c "
          from glassalpha.config import load_config
          cfg = load_config('$CONFIG_FILE')
          print(f'Config strict mode: {cfg.strict}')
          print(f'Config thread_control: {cfg.thread_control}')
          assert cfg.strict == True, 'strict must be True'
          assert cfg.thread_control == True, 'thread_control must be True'
          print('✅ Determinism config validated')
          "

          # Run audit twice (config specifies HTML output for speed)
          # Note: Config has output_format: html, so HTML will be used regardless of extension
          echo "=== Running first audit ==="
          python3 -m glassalpha audit -c "$CONFIG_FILE" -o /tmp/audit1.html || {
            echo "❌ First audit failed"
            exit 1
          }

          echo "=== Running second audit ==="
          python3 -m glassalpha audit -c "$CONFIG_FILE" -o /tmp/audit2.html || {
            echo "❌ Second audit failed"
            exit 1
          }

          # Verify files exist
          if [ ! -f /tmp/audit1.html ]; then
            echo "❌ /tmp/audit1.html was not created"
            exit 1
          fi

          if [ ! -f /tmp/audit2.html ]; then
            echo "❌ /tmp/audit2.html was not created"
            exit 1
          fi

          echo "✅ Both audit HTMLs created successfully"

          # Compute hashes
          hash1=$(sha256sum /tmp/audit1.html | cut -d' ' -f1)
          hash2=$(sha256sum /tmp/audit2.html | cut -d' ' -f1)

          echo "Hash 1: $hash1"
          echo "Hash 2: $hash2"

          # Compare
          if [ "$hash1" = "$hash2" ]; then
            echo "✅ Hashes match - deterministic"
          else
            echo "❌ Hashes differ - non-deterministic"
            exit 1
          fi

      - name: Upload audit artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: determinism-artifacts-${{ matrix.os }}-py${{ matrix.python-version }}
          path: |
            /tmp/audit*.html
            /tmp/audit*.manifest.json
            /tmp/test_config.yaml
          retention-days: 7

  compare-cross-platform:
    name: Compare Cross-Platform Hashes
    needs: validate-determinism
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Checkout repository
        uses: actions/checkout@ff7abcd0c3c05ccf6adc123a8cd1fd4fb30fb493 # v5.0.0

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Compare hashes across platforms
        run: |
          echo "=== Cross-Platform Determinism Validation ==="

          # Find all audit1.html and audit2.html files
          find artifacts -name "audit*.html" -type f | while read file; do
            platform=$(echo "$file" | cut -d'-' -f3)
            python_ver=$(echo "$file" | cut -d'-' -f4)
            run_num=$(basename "$file" | cut -d'_' -f2 | cut -d'.' -f1)  # audit1 or audit2
            hash=$(sha256sum "$file" | cut -d' ' -f1)
            echo "$platform | Python $python_ver | run $run_num | $hash"
          done > /tmp/hashes.txt

          cat /tmp/hashes.txt

          echo ""
          echo "=== Validating Within-Combo Determinism ==="

          # Group by platform+python and check audit1 == audit2 for each combo
          validation_failed=0

          # Process each unique platform+python combo
          cut -d'|' -f1,2 /tmp/hashes.txt | sort -u | while read combo; do
            platform=$(echo "$combo" | cut -d'|' -f1 | xargs)
            python_ver=$(echo "$combo" | cut -d'|' -f2 | xargs)

            # Get hashes for this combo's audit1 and audit2
            audit1_hash=$(grep "$platform.*Python $python_ver.*run 1" /tmp/hashes.txt | cut -d'|' -f4 | xargs)
            audit2_hash=$(grep "$platform.*Python $python_ver.*run 2" /tmp/hashes.txt | cut -d'|' -f4 | xargs)

            echo "  $platform Python $python_ver:"
            echo "    audit1: $audit1_hash"
            echo "    audit2: $audit2_hash"

            if [ "$audit1_hash" = "$audit2_hash" ]; then
              echo "    ✅ Within-combo deterministic"
            else
              echo "    ❌ Within-combo non-deterministic"
              validation_failed=1
            fi
          done

          if [ $validation_failed -eq 1 ]; then
            echo ""
            echo "❌ Within-combo determinism validation failed"
            echo "   (Some platform+Python combinations produce different hashes)"
            exit 1
          fi

          echo ""
          echo "✅ All platform+Python combinations are deterministic within themselves"
          echo ""
          echo "=== Cross-Platform/Python Differences (Expected) ==="
          echo "Different platforms and Python versions naturally produce different outputs:"
          echo "- Font rendering: macOS vs Ubuntu (system font differences)"
          echo "- Python versions: 3.11 vs 3.12 (hash algorithm, dict ordering changes)"
          echo "- These differences are acceptable for compliance purposes"
          echo ""
          echo "What matters: Same platform + same Python = same output (✅ ACHIEVED)"

      - name: Upload failed artifacts for debugging
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: determinism-failure-cross-platform
          path: |
            artifacts/**/*.html
            artifacts/**/*.manifest.json
            /tmp/hashes.txt
          retention-days: 7

  report-status:
    name: Report Validation Status
    needs: [validate-determinism, compare-cross-platform]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Check validation results
        run: |
          echo "=== Determinism Validation Summary ==="
          echo "Determinism tests: ${{ needs.validate-determinism.result }}"
          echo "Cross-platform comparison: ${{ needs.compare-cross-platform.result }}"

          if [ "${{ needs.validate-determinism.result }}" != "success" ] || \
             [ "${{ needs.compare-cross-platform.result }}" != "success" ]; then
            echo "❌ Determinism validation failed"
            exit 1
          fi

          echo "✅ All determinism checks passed"
