name: Determinism Tests

on:
    push:
        branches: [main, develop]
    pull_request:
        branches: [main, develop]

jobs:
    test-determinism:
        name: Test Byte-Identical Reproducibility
        runs-on: ${{ matrix.os }}
        strategy:
            fail-fast: false
            matrix:
                os: [ubuntu-latest, macos-latest]
                python-version: ["3.11", "3.12"]

        steps:
            - uses: actions/checkout@v4

            - name: Set up Python ${{ matrix.python-version }}
              uses: actions/setup-python@v5
              with:
                  python-version: ${{ matrix.python-version }}

            - name: Install dependencies
              run: |
                  cd packages
                  pip install --upgrade pip
                  pip install -e ".[dev]"

            - name: Run determinism tests
              run: |
                  cd packages
                  pytest tests/integration/test_determinism.py -v --tb=short

            - name: Validate deterministic environment
              run: |
                  cd packages
                  python -c "from glassalpha.utils.determinism import validate_deterministic_environment, deterministic; import sys; with deterministic(42, strict=True): result = validate_deterministic_environment(); sys.exit(0 if result['status'] == 'pass' else 1)"

    test-cross-platform-consistency:
        name: Cross-Platform Consistency Check
        runs-on: ubuntu-latest
        needs: test-determinism

        steps:
            - uses: actions/checkout@v4

            - name: Set up Python 3.11
              uses: actions/setup-python@v5
              with:
                  python-version: "3.11"

            - name: Install dependencies
              run: |
                  cd packages
                  pip install --upgrade pip
                  pip install -e ".[dev]"

            - name: Generate reference outputs
              run: |
                  cd packages
                  # Generate reference manifest with deterministic context
                  python -c "
                  from glassalpha.utils.determinism import deterministic
                  import json
                  with deterministic(42, strict=True):
                      manifest = {'seed': 42, 'platform': 'linux', 'python': '3.11'}
                      with open('reference_manifest.json', 'w') as f:
                          json.dump(manifest, f, sort_keys=True, indent=2)
                  "

            - name: Upload reference artifacts
              uses: actions/upload-artifact@v4
              with:
                  name: reference-outputs
                  path: packages/reference_manifest.json
