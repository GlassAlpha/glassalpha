name: Determinism Validation

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch: # Allow manual triggers

permissions:
  contents: read

jobs:
  validate-determinism:
    name: Validate Determinism (${{ matrix.os }}, Python ${{ matrix.python-version }})
    runs-on: ${{ matrix.os }}
    timeout-minutes: 20

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ["3.11", "3.12"]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v6
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"

      - name: Install system dependencies (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            libgomp1 \
            libopenblas-dev \
            libcairo2-dev \
            libpango1.0-dev \
            libgdk-pixbuf2.0-dev

      - name: Install system dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew update
          brew install \
            libomp \
            cairo \
            pango \
            gobject-introspection \
            harfbuzz \
            fribidi \
            glib
          # Set library paths for WeasyPrint runtime linking
          echo "PKG_CONFIG_PATH=$(brew --prefix)/lib/pkgconfig" >> $GITHUB_ENV
          echo "DYLD_FALLBACK_LIBRARY_PATH=$(brew --prefix)/lib:$DYLD_FALLBACK_LIBRARY_PATH" >> $GITHUB_ENV
          echo "LDFLAGS=-L$(brew --prefix)/lib" >> $GITHUB_ENV
          echo "CPPFLAGS=-I$(brew --prefix)/include" >> $GITHUB_ENV

      - name: Install dependencies with constraints
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install -c constraints.txt -e ".[all,pdf_determinism,dev]"
          pip install shap  # Required for deterministic explainer selection

      - name: Set up determinism environment
        run: |
          source scripts/setup-determinism-env.sh

      - name: Verify dependencies
        run: |
          echo "=== Verify critical dependencies ==="
          python -c "import shap; print(f'✅ SHAP {shap.__version__}')" || \
            (echo "❌ SHAP not available"; exit 1)
          python -c "import weasyprint; print(f'✅ WeasyPrint {weasyprint.__version__}')" || \
            (echo "❌ WeasyPrint not available"; exit 1)
          python -c "import pypdf; print(f'✅ pypdf {pypdf.__version__}')" || \
            (echo "❌ pypdf not available"; exit 1)

      - name: Set deterministic environment
        run: |
          echo "SOURCE_DATE_EPOCH=1577836800" >> $GITHUB_ENV
          echo "PYTHONHASHSEED=42" >> $GITHUB_ENV
          echo "OMP_NUM_THREADS=1" >> $GITHUB_ENV
          echo "OPENBLAS_NUM_THREADS=1" >> $GITHUB_ENV
          echo "MKL_NUM_THREADS=1" >> $GITHUB_ENV
          echo "GLASSALPHA_DETERMINISTIC=1" >> $GITHUB_ENV
          echo "TZ=UTC" >> $GITHUB_ENV
          echo "MPLBACKEND=Agg" >> $GITHUB_ENV

      - name: Verify environment setup
        run: |
          echo "=== Deterministic Environment ==="
          echo "SOURCE_DATE_EPOCH: $SOURCE_DATE_EPOCH"
          echo "PYTHONHASHSEED: $PYTHONHASHSEED"
          echo "OMP_NUM_THREADS: $OMP_NUM_THREADS"
          echo "Python version: $(python --version)"
          echo "Platform: $(uname -a)"

      - name: Verify determinism environment
        run: |
          echo "=== Determinism Environment Check ==="
          echo "OMP_NUM_THREADS: ${OMP_NUM_THREADS:-not set}"
          echo "PYTHONHASHSEED: ${PYTHONHASHSEED:-not set}"
          echo "TZ: ${TZ:-not set}"
          echo "MPLBACKEND: ${MPLBACKEND:-not set}"

          # Verify single-threaded
          if [ "${OMP_NUM_THREADS}" != "1" ]; then
            echo "⚠️  OMP_NUM_THREADS should be 1 for determinism (currently: ${OMP_NUM_THREADS:-not set})"
          fi

          python -c "
          import os
          from glassalpha.config import load_config
          cfg = load_config('/tmp/test_config.yaml')
          print(f'Config strict mode: {cfg.reproducibility.strict}')
          print(f'Config thread_control: {cfg.reproducibility.thread_control}')
          assert cfg.reproducibility.strict == True, 'strict must be True'
          assert cfg.reproducibility.thread_control == True, 'thread_control must be True'
          print('✅ Determinism config validated')
          "

      - name: Run determinism regression test
        run: |
          echo "=== Running determinism test (single run) ==="
          python3 -m pytest tests/test_critical_regression_guards.py::TestCriticalRegressions::test_cli_determinism_regression_guard -v --tb=short

      - name: Run multi-run validation (5 consecutive runs)
        run: |
          echo "=== Running determinism test 5 times ==="
          for i in {1..5}; do
            echo "Run $i/5..."
            python3 -m pytest tests/test_critical_regression_guards.py::TestCriticalRegressions::test_cli_determinism_regression_guard -v --tb=line || exit 1
          done
          echo "✅ All 5 runs passed"

      - name: Cross-platform hash validation
        run: |
          echo "=== Cross-platform determinism check ==="

          # Create test config with strict determinism controls
          cat > /tmp/test_config.yaml << 'EOF'
          audit_profile: tabular_compliance
          data:
            dataset: german_credit
            target_column: credit_risk
          model:
            type: logistic_regression
          reproducibility:
            random_seed: 42
            strict: true
            thread_control: true
          EOF

          # Run audit twice (seed is set in config file)
          echo "=== Running first audit ==="
          python3 -m glassalpha audit -c /tmp/test_config.yaml -o /tmp/audit1.pdf || {
            echo "❌ First audit failed"
            exit 1
          }

          echo "=== Running second audit ==="
          python3 -m glassalpha audit -c /tmp/test_config.yaml -o /tmp/audit2.pdf || {
            echo "❌ Second audit failed"
            exit 1
          }

          # Verify files exist
          if [ ! -f /tmp/audit1.pdf ]; then
            echo "❌ /tmp/audit1.pdf was not created"
            exit 1
          fi

          if [ ! -f /tmp/audit2.pdf ]; then
            echo "❌ /tmp/audit2.pdf was not created"
            exit 1
          fi

          echo "✅ Both audit PDFs created successfully"

          # Compute hashes
          hash1=$(sha256sum /tmp/audit1.pdf | cut -d' ' -f1)
          hash2=$(sha256sum /tmp/audit2.pdf | cut -d' ' -f1)

          echo "Hash 1: $hash1"
          echo "Hash 2: $hash2"

          # Compare
          if [ "$hash1" = "$hash2" ]; then
            echo "✅ Hashes match - deterministic"
          else
            echo "❌ Hashes differ - non-deterministic"
            exit 1
          fi

      - name: Upload audit artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: determinism-artifacts-${{ matrix.os }}-py${{ matrix.python-version }}
          path: |
            /tmp/audit*.pdf
            /tmp/test_config.yaml
          retention-days: 7

  compare-cross-platform:
    name: Compare Cross-Platform Hashes
    needs: validate-determinism
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Compare hashes across platforms
        run: |
          echo "=== Cross-Platform Hash Comparison ==="

          # Find all audit1.pdf files
          find artifacts -name "audit1.pdf" -type f | while read file; do
            platform=$(echo "$file" | cut -d'-' -f3)
            python_ver=$(echo "$file" | cut -d'-' -f4)
            hash=$(sha256sum "$file" | cut -d' ' -f1)
            echo "$platform | Python $python_ver | $hash"
          done > /tmp/hashes.txt

          cat /tmp/hashes.txt

          # Check if all hashes are identical
          unique_hashes=$(cut -d'|' -f3 /tmp/hashes.txt | sort -u | wc -l)

          if [ "$unique_hashes" -eq 1 ]; then
            echo "✅ All platforms produce identical hashes"
          else
            echo "❌ Hash mismatch across platforms:"
            cut -d'|' -f3 /tmp/hashes.txt | sort | uniq -c
            exit 1
          fi

      - name: Upload failed PDFs for debugging
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: determinism-failure-cross-platform
          path: |
            artifacts/**/*.pdf
            artifacts/**/*.html
            /tmp/hashes.txt
          retention-days: 7

  validate-determinism-framework:
    name: Test Determinism Framework
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Set up Python 3.11
        uses: actions/setup-python@v6
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install system dependencies (Ubuntu)
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            libcairo2-dev \
            libpango1.0-dev \
            libgdk-pixbuf2.0-dev

      - name: Install dependencies
        run: |
          pip install -c constraints.txt -e ".[all,pdf_determinism,dev]"
          pip install shap

      - name: Verify dependencies
        run: |
          python3 -c "import weasyprint; print(f'✅ WeasyPrint {weasyprint.__version__}')"
          python3 -c "import pypdf; print(f'✅ pypdf {pypdf.__version__}')"
          python3 -c "import shap; print(f'✅ SHAP {shap.__version__}')"

      - name: Test DeterminismValidator
        run: |
          python3 << 'EOF'
          import sys
          import tempfile
          import yaml
          from pathlib import Path

          # Use installed package (not hardcoded path)
          from glassalpha.utils.determinism_validator import validate_audit_determinism

          # Create test config with strict determinism controls
          config = {
              'audit_profile': 'tabular_compliance',
              'data': {
                  'dataset': 'german_credit',
                  'target_column': 'credit_risk',
              },
              'model': {'type': 'logistic_regression'},
              'reproducibility': {
                  'random_seed': 42,
                  'strict': True,
                  'thread_control': True,
              },
          }

          with tempfile.NamedTemporaryFile(mode='w', suffix='.yaml', delete=False) as f:
              yaml.dump(config, f)
              config_path = Path(f.name)

          try:
              # Run validation
              report = validate_audit_determinism(
                  config_path=config_path,
                  runs=2,  # Reduced for speed
                  seed=42,
                  check_shap=True,
              )

              print(f"Is deterministic: {report.is_deterministic}")
              print(f"Summary: {report.summary}")
              print(f"Unique hashes: {len(set(report.hashes))}")

              if not report.is_deterministic:
                  print("Non-determinism sources:")
                  for source in report.non_determinism_sources:
                      print(f"  - {source}")
                  exit(1)

              print("✅ DeterminismValidator working correctly")

          finally:
              config_path.unlink()
          EOF

      - name: Test explainer selection determinism
        run: |
          python3 << 'EOF'
          # Use installed package (not hardcoded path)
          from glassalpha.explain import select_explainer, _available
          from sklearn.linear_model import LogisticRegression
          import pandas as pd
          import numpy as np

          # Create test data
          np.random.seed(42)
          X = pd.DataFrame(np.random.randn(100, 5), columns=[f'f{i}' for i in range(5)])
          y = np.random.randint(0, 2, 100)

          # Train model
          model = LogisticRegression(random_state=42)
          model.fit(X, y)

          # Check available explainers
          # Note: _available function is a stub that returns True for all explainers
          treeshap_available = _available("treeshap")
          coefficients_available = _available("coefficients")
          print(f"TreeSHAP available: {treeshap_available}")
          print(f"Coefficients available: {coefficients_available}")

          # Test deterministic selection
          explainer1 = select_explainer(
              model_type="logistic_regression",
              requested_priority=['coefficients'],
          )

          explainer2 = select_explainer(
              model_type="logistic_regression",
              requested_priority=['coefficients'],
          )

          assert explainer1 == explainer2, f"Non-deterministic selection: {explainer1} != {explainer2}"
          print(f"✅ Deterministic explainer selection: {explainer1}")
          EOF

  report-status:
    name: Report Validation Status
    needs:
      [
        validate-determinism,
        compare-cross-platform,
        validate-determinism-framework,
      ]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Check validation results
        run: |
          echo "=== Determinism Validation Summary ==="
          echo "Determinism tests: ${{ needs.validate-determinism.result }}"
          echo "Cross-platform comparison: ${{ needs.compare-cross-platform.result }}"
          echo "Framework tests: ${{ needs.validate-determinism-framework.result }}"

          if [ "${{ needs.validate-determinism.result }}" != "success" ] || \
             [ "${{ needs.compare-cross-platform.result }}" != "success" ] || \
             [ "${{ needs.validate-determinism-framework.result }}" != "success" ]; then
            echo "❌ Determinism validation failed"
            exit 1
          fi

          echo "✅ All determinism checks passed"
