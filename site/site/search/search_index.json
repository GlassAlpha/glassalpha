{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Glass Alpha","text":""},{"location":"#open-core-ai-compliance-toolkit-for-tabular-ml","title":"Open-core AI compliance toolkit for tabular ML","text":"<p>Glass Alpha provides enterprise-grade explainability, fairness, and compliance tools for tabular machine learning models. Built with a focus on regulatory requirements and on-premise deployment.</p> <p>60-Second Quick Start</p> <p><pre><code>from glassalpha import explain, audit\nimport xgboost as xgb\n\n# Train your model\nmodel = xgb.XGBClassifier()\nmodel.fit(X_train, y_train)\n\n# Generate explanations\nexplanations = explain(model, X_test)\n\n# Create audit report\nreport = audit(model, X_test, y_test, output=\"audit_report.pdf\")\n</code></pre> That's it! You now have a regulator-ready PDF audit report.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li> <p> Explainability</p> <p>TreeSHAP-based feature importance and individual predictions explanations for tree-based models</p> <p> Learn more</p> </li> <li> <p> Fairness Analysis</p> <p>Comprehensive bias detection and mitigation across protected attributes</p> <p> Learn more</p> </li> <li> <p> Audit Reports</p> <p>Deterministic, regulator-ready PDF reports with full reproducibility</p> <p> Learn more</p> </li> <li> <p> Counterfactual Recourse</p> <p>Causal-aware, feasible recommendations for changing model decisions</p> <p> Learn more</p> </li> </ul>"},{"location":"#why-glass-alpha","title":"Why Glass Alpha?","text":""},{"location":"#enterprise-ready","title":"\ud83c\udfe2 Enterprise-Ready","text":"<ul> <li>On-premise first: No external API calls, runs entirely offline</li> <li>Deterministic outputs: Seeded runs produce identical results</li> <li>Policy-as-code: Codify compliance requirements in YAML</li> </ul>"},{"location":"#built-for-tabular-ml","title":"\ud83d\udcca Built for Tabular ML","text":"<ul> <li>Optimized for XGBoost, LightGBM, scikit-learn</li> <li>Handles real-world messy data</li> <li>Scales to millions of rows</li> </ul>"},{"location":"#regulatory-compliance","title":"\u2705 Regulatory Compliance","text":"<ul> <li>GDPR Article 22 compliant explanations</li> <li>Fair lending (ECOA/FCRA) compatible</li> <li>Audit trail with immutable manifests</li> </ul>"},{"location":"#supported-models","title":"Supported Models","text":"Framework Status Notes XGBoost \u2705 Full support TreeSHAP optimized LightGBM \u2705 Full support Native integration scikit-learn \u2705 Full support Random Forest, Logistic Regression CatBoost \ud83d\udd04 Coming soon Q2 2025 Deep Learning \ud83d\udcc5 Planned v2.0 roadmap"},{"location":"#installation","title":"Installation","text":"StandardDevelopmentEnterprise <pre><code>pip install glassalpha\n</code></pre> <pre><code>git clone https://github.com/GlassAlpha/glassalpha\ncd glassalpha\npip install -e packages/[dev]\n</code></pre> <pre><code># For on-premise deployment with additional security features\npip install glassalpha[enterprise]\n</code></pre>"},{"location":"#quick-examples","title":"Quick Examples","text":""},{"location":"#generate-explanations","title":"Generate Explanations","text":"<pre><code>from glassalpha import Explainer\nimport pandas as pd\n\nexplainer = Explainer(model)\nshap_values = explainer.explain(X_test)\n\n# Feature importance\nexplainer.plot_importance()\n\n# Individual prediction explanation\nexplainer.plot_waterfall(X_test.iloc[0])\n</code></pre>"},{"location":"#detect-bias","title":"Detect Bias","text":"<pre><code>from glassalpha import FairnessAnalyzer\n\nanalyzer = FairnessAnalyzer(\n    protected_attributes=['gender', 'race']\n)\n\nbias_report = analyzer.analyze(\n    model, X_test, y_test, y_pred\n)\n\nprint(bias_report.disparate_impact)\n</code></pre>"},{"location":"#generate-audit-report","title":"Generate Audit Report","text":"<pre><code>from glassalpha import AuditReport\n\nreport = AuditReport(\n    model=model,\n    data=(X_test, y_test),\n    config=\"configs/audit_config.yaml\"\n)\n\nreport.generate(\"audit_report_2025.pdf\")\n</code></pre>"},{"location":"#next-steps","title":"Next Steps","text":"<ul> <li>\ud83d\udcda Read the Getting Started Guide</li> <li>\ud83d\udca1 Explore Example Notebooks</li> <li>\ud83d\udee0\ufe0f API Reference</li> <li>\ud83d\udc65 Contributing Guidelines</li> </ul>"},{"location":"#license","title":"License","text":"<p>Glass Alpha is released under the Apache 2.0 License. See LICENSE for details.</p>"},{"location":"#support","title":"Support","text":"<ul> <li>\ud83d\udce7 Email: support@glassalpha.io</li> <li>\ud83d\udcac GitHub Discussions: GlassAlpha/glassalpha/discussions</li> <li>\ud83d\udc1b Issues: GlassAlpha/glassalpha/issues</li> </ul>"},{"location":"contributing/","title":"Contributing to Glass Alpha","text":"<p>Thank you for your interest in contributing to Glass Alpha! This guide will help you get started.</p>"},{"location":"contributing/#development-setup","title":"Development Setup","text":""},{"location":"contributing/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.11+</li> <li>Git</li> <li>Virtual environment tool (venv, conda, poetry)</li> </ul>"},{"location":"contributing/#local-development","title":"Local Development","text":"<ol> <li> <p>Fork and clone the repository <pre><code>git clone https://github.com/YOUR_USERNAME/glassalpha\ncd glassalpha\n</code></pre></p> </li> <li> <p>Create a virtual environment <pre><code>python -m venv .venv\nsource .venv/bin/activate  # On Windows: .venv\\Scripts\\activate\n</code></pre></p> </li> <li> <p>Install in development mode <pre><code>pip install -e packages/[dev]\npre-commit install\n</code></pre></p> </li> <li> <p>Run tests to verify setup <pre><code>pytest\n</code></pre></p> </li> </ol>"},{"location":"contributing/#code-standards","title":"Code Standards","text":""},{"location":"contributing/#type-hints","title":"Type Hints","text":"<p>All code must have type hints and pass <code>mypy --strict</code>: <pre><code>def calculate_importance(\n    values: np.ndarray,\n    features: List[str],\n    normalize: bool = True\n) -&gt; Dict[str, float]:\n    \"\"\"Calculate feature importance scores.\"\"\"\n    ...\n</code></pre></p>"},{"location":"contributing/#code-quality","title":"Code Quality","text":"<ul> <li>Formatting: Code must pass <code>black</code> formatting</li> <li>Linting: Must pass <code>ruff</code> checks</li> <li>Testing: Maintain &gt;90% coverage on core modules</li> </ul>"},{"location":"contributing/#testing-requirements","title":"Testing Requirements","text":"<p>Write tests for all new features: <pre><code>def test_feature_importance_calculation():\n    \"\"\"Test that feature importance sums to 1 when normalized.\"\"\"\n    # Arrange\n    values = np.array([0.1, 0.2, 0.3])\n    features = ['f1', 'f2', 'f3']\n\n    # Act\n    result = calculate_importance(values, features, normalize=True)\n\n    # Assert\n    assert sum(result.values()) == pytest.approx(1.0)\n</code></pre></p>"},{"location":"contributing/#making-changes","title":"Making Changes","text":""},{"location":"contributing/#1-create-a-feature-branch","title":"1. Create a Feature Branch","text":"<pre><code>git checkout -b feature/your-feature-name\n</code></pre>"},{"location":"contributing/#2-make-your-changes","title":"2. Make Your Changes","text":"<ul> <li>Write code following our standards</li> <li>Add tests for new functionality</li> <li>Update documentation if needed</li> </ul>"},{"location":"contributing/#3-test-your-changes","title":"3. Test Your Changes","text":"<pre><code># Run tests\npytest\n\n# Check formatting\nblack --check packages/src packages/tests\nruff check packages/src packages/tests\n\n# Type checking\nmypy --strict packages/src\n</code></pre>"},{"location":"contributing/#4-commit-your-changes","title":"4. Commit Your Changes","text":"<pre><code>git add .\ngit commit -m \"feat: add new feature\n\n- Detailed description\n- Closes #123\"\n</code></pre>"},{"location":"contributing/#pull-request-process","title":"Pull Request Process","text":"<ol> <li>Update documentation for any new features</li> <li>Ensure all tests pass locally</li> <li>Update the changelog if applicable</li> <li>Submit PR with clear description</li> <li>Address review feedback promptly</li> </ol>"},{"location":"contributing/#pr-title-format","title":"PR Title Format","text":"<ul> <li><code>feat:</code> New feature</li> <li><code>fix:</code> Bug fix</li> <li><code>docs:</code> Documentation changes</li> <li><code>test:</code> Test improvements</li> <li><code>refactor:</code> Code refactoring</li> <li><code>perf:</code> Performance improvements</li> </ul>"},{"location":"contributing/#security-privacy-guidelines","title":"Security &amp; Privacy Guidelines","text":"<ul> <li>No PII in logs: Never log personally identifiable information</li> <li>No external calls: Core library must work offline</li> <li>Sanitize inputs: Always validate and sanitize user inputs</li> <li>Hash sensitive data: Use SHA-256 for any ID hashing</li> </ul>"},{"location":"contributing/#documentation","title":"Documentation","text":""},{"location":"contributing/#docstring-format-google-style","title":"Docstring Format (Google Style)","text":"<pre><code>def explain_prediction(\n    model: Any,\n    instance: pd.Series,\n    background: Optional[pd.DataFrame] = None\n) -&gt; Explanation:\n    \"\"\"Generate explanation for a single prediction.\n\n    Args:\n        model: Trained model object supporting .predict()\n        instance: Single data instance to explain\n        background: Background dataset for SHAP. If None, uses training data.\n\n    Returns:\n        Explanation object containing SHAP values and visualizations.\n\n    Raises:\n        ValueError: If instance shape doesn't match model input.\n\n    Example:\n        &gt;&gt;&gt; exp = explain_prediction(model, X_test.iloc[0])\n        &gt;&gt;&gt; exp.plot_waterfall()\n    \"\"\"\n</code></pre>"},{"location":"contributing/#example-notebooks","title":"Example Notebooks","text":"<p>Every new feature needs an example notebook in <code>examples/</code>: - Clear problem statement - Step-by-step implementation - Expected outputs - Performance considerations</p>"},{"location":"contributing/#questions","title":"Questions?","text":"<ul> <li>\ud83d\udcac GitHub Discussions</li> <li>\ud83d\udc1b Issue Tracker</li> </ul> <p>Thank you for contributing to Glass Alpha! \ud83c\udf89</p>"},{"location":"limitations/","title":"Assumptions &amp; Limitations","text":"<p>This document outlines the key assumptions and known limitations of Glass Alpha to ensure transparent and responsible use.</p>"},{"location":"limitations/#scope","title":"Scope","text":""},{"location":"limitations/#supported-models","title":"Supported Models","text":"<p>Glass Alpha is currently optimized for: - Tree-based models: XGBoost, LightGBM, RandomForest, GradientBoosting - Linear models: LogisticRegression, LinearRegression - Tabular data only: Structured data with defined features</p>"},{"location":"limitations/#not-yet-supported","title":"Not Yet Supported","text":"<ul> <li>Deep learning models (planned for v2.0)</li> <li>Computer vision models</li> <li>Natural language processing models</li> <li>Time series specific models (partial support via tabular features)</li> <li>Graph neural networks</li> </ul>"},{"location":"limitations/#technical-limitations","title":"Technical Limitations","text":""},{"location":"limitations/#explainability","title":"Explainability","text":"<p>TreeSHAP Limitations - Only exact for tree-based models - Approximations used for other model types - Computational complexity O(TLD\u00b2) where T=trees, L=leaves, D=depth</p> <p>Feature Interactions - Currently limited to 2-way interactions - Higher-order interactions require exponential compute</p> <p>Background Data Requirements - SHAP requires representative background samples - Poor background selection can bias explanations - Recommended minimum: 100 samples for background</p>"},{"location":"limitations/#counterfactuals","title":"Counterfactuals","text":"<p>Feasibility Constraints - Cannot guarantee actionable counterfactuals for all instances - Domain constraints must be manually specified - Causal relationships must be provided, not inferred</p> <p>Search Limitations - Greedy search may miss global optima - High-dimensional spaces (&gt;100 features) may be slow - Categorical features with many levels increase complexity</p>"},{"location":"limitations/#fairness-analysis","title":"Fairness Analysis","text":"<p>Metric Limitations - No single metric captures all aspects of fairness - Metrics can conflict with each other - Requires predefined protected attributes</p> <p>Data Requirements - Needs sufficient samples per protected group (&gt;30 recommended) - Assumes protected attributes are available and accurate - Cannot detect unlabeled proxy discrimination</p>"},{"location":"limitations/#performance-considerations","title":"Performance Considerations","text":""},{"location":"limitations/#scalability","title":"Scalability","text":"Operation Complexity Practical Limit SHAP values O(n_samples \u00d7 TLD\u00b2) 1M samples Counterfactuals O(n_features\u00b2) 200 features Fairness metrics O(n_samples \u00d7 n_groups) 100K samples Audit report O(n_samples \u00d7 n_features) 10M cells"},{"location":"limitations/#memory-requirements","title":"Memory Requirements","text":"<ul> <li>SHAP computation: ~8GB RAM per 100K samples with 100 features</li> <li>Counterfactual search: ~4GB RAM for 1000 searches</li> <li>Audit report generation: ~2GB RAM for standard report</li> </ul>"},{"location":"limitations/#statistical-assumptions","title":"Statistical Assumptions","text":""},{"location":"limitations/#independence-assumptions","title":"Independence Assumptions","text":"<ul> <li>Features are assumed independent for some calculations</li> <li>Violations may affect counterfactual validity</li> <li>Correlation matrices should be reviewed</li> </ul>"},{"location":"limitations/#distribution-assumptions","title":"Distribution Assumptions","text":"<ul> <li>Some fairness metrics assume specific distributions</li> <li>Drift detection assumes stationarity within windows</li> <li>Confidence intervals assume sufficient sample sizes</li> </ul>"},{"location":"limitations/#regulatory-considerations","title":"Regulatory Considerations","text":""},{"location":"limitations/#compliance-limitations","title":"Compliance Limitations","text":"<p>Not Legal Advice - Glass Alpha provides technical tools, not legal guidance - Compliance depends on jurisdiction and use case - Consult legal experts for regulatory requirements</p> <p>Audit Reports - Reports are informative, not certifications - Human review required for critical decisions - Local regulations may require additional documentation</p>"},{"location":"limitations/#geographic-limitations","title":"Geographic Limitations","text":"<p>Data Residency - No built-in data residency controls - Users responsible for data governance - On-premise deployment recommended for sensitive data</p> <p>Language Support - Documentation and reports in English only - Internationalization planned for future releases</p>"},{"location":"limitations/#known-issues","title":"Known Issues","text":""},{"location":"limitations/#current-bugs","title":"Current Bugs","text":"<ul> <li>Memory leak in repeated counterfactual generation (fix in 0.2.1)</li> <li>Slow performance on sparse matrices (optimization planned)</li> <li>PDF generation fails with non-ASCII characters (workaround available)</li> </ul>"},{"location":"limitations/#edge-cases","title":"Edge Cases","text":"<ul> <li>Models with &gt;1000 trees may timeout</li> <li>Extreme class imbalance (&lt;1% minority) affects metrics</li> <li>Missing value handling inconsistent across modules</li> </ul>"},{"location":"limitations/#responsible-ai-considerations","title":"Responsible AI Considerations","text":""},{"location":"limitations/#ethical-limitations","title":"Ethical Limitations","text":"<p>Bias Amplification - Cannot eliminate all forms of bias - May reflect historical discrimination in data - Requires ongoing monitoring and adjustment</p> <p>Explanation Misuse - Explanations can be gamed if exposed to adversaries - Should not be sole basis for high-stakes decisions - Consider explanation uncertainty and limitations</p>"},{"location":"limitations/#human-in-the-loop","title":"Human-in-the-Loop","text":"<p>Required Human Oversight - Critical decisions should involve human review - Explanations are aids, not replacements for judgment - Domain expertise necessary for interpretation</p>"},{"location":"limitations/#recommendations","title":"Recommendations","text":""},{"location":"limitations/#best-practices","title":"Best Practices","text":"<ol> <li>Validate assumptions before deployment</li> <li>Monitor performance continuously in production</li> <li>Document limitations for end users</li> <li>Implement fallbacks for edge cases</li> <li>Regular audits of model decisions</li> </ol>"},{"location":"limitations/#when-not-to-use-glass-alpha","title":"When Not to Use Glass Alpha","text":"<p>\u274c Inappropriate use cases: - Life-critical systems without human oversight - Fully automated decision-making for protected classes - Systems requiring real-time (&lt;10ms) explanations - Non-tabular data without feature engineering</p> <p>\u2705 Appropriate use cases: - Decision support systems with human review - Model development and debugging - Regulatory compliance documentation - Bias detection and monitoring</p>"},{"location":"limitations/#future-improvements","title":"Future Improvements","text":""},{"location":"limitations/#roadmap","title":"Roadmap","text":"<ul> <li>Deep learning support (v2.0)</li> <li>Real-time explanation serving (v1.5)</li> <li>Causal discovery automation (v2.5)</li> <li>Multi-language support (v2.0)</li> </ul>"},{"location":"limitations/#feedback","title":"Feedback","text":"<p>We welcome feedback on limitations and feature requests: - GitHub Issues: Report limitations - Discussions: Request features</p>"},{"location":"limitations/#changelog","title":"Changelog","text":""},{"location":"limitations/#version-010-current","title":"Version 0.1.0 (Current)","text":"<ul> <li>Initial release with core functionality</li> <li>Known limitations documented above</li> </ul> <p>Last updated: September 2025</p>"},{"location":"api/audit/","title":"Audit API","text":"<p>Coming soon - API reference for audit report generation.</p>"},{"location":"api/counterfactuals/","title":"Counterfactuals API","text":"<p>Coming soon - API reference for counterfactual generation.</p>"},{"location":"api/explainability/","title":"Explainability API","text":"<p>Coming soon - API reference for explainability modules.</p>"},{"location":"api/overview/","title":"API Reference Overview","text":"<p>Coming soon - complete API reference documentation.</p>"},{"location":"examples/adult-income/","title":"Adult Income Example","text":"<p>Coming soon - example notebook for Adult Income dataset drift monitoring.</p>"},{"location":"examples/compas/","title":"COMPAS Bias Example","text":"<p>Coming soon - example notebook for COMPAS fairness analysis.</p>"},{"location":"examples/german-credit/","title":"German Credit Example","text":"<p>Coming soon - example notebook for German Credit dataset analysis.</p>"},{"location":"features/audit/","title":"Audit Reports","text":"<p>Coming soon - documentation on generating regulatory audit reports.</p>"},{"location":"features/counterfactuals/","title":"Counterfactual Explanations","text":"<p>Coming soon - documentation on counterfactual generation and recourse.</p>"},{"location":"features/drift/","title":"Drift Monitoring","text":"<p>Coming soon - documentation on model and data drift detection.</p>"},{"location":"features/explainability/","title":"Explainability","text":"<p>Coming soon - detailed documentation on Glass Alpha's explainability features.</p>"},{"location":"features/fairness/","title":"Fairness Analysis","text":"<p>Coming soon - documentation on bias detection and fairness metrics.</p>"},{"location":"getting-started/examples/","title":"Examples","text":"<p>Coming soon - example notebooks and code samples will be added here.</p>"},{"location":"getting-started/installation/","title":"Installation","text":"<p>Glass Alpha can be installed via pip or from source. The library requires Python 3.11 or higher.</p>"},{"location":"getting-started/installation/#requirements","title":"Requirements","text":"<ul> <li>Python 3.11+</li> <li>pip or conda</li> <li>(Optional) Virtual environment tool (venv, conda, poetry)</li> </ul>"},{"location":"getting-started/installation/#standard-installation","title":"Standard Installation","text":""},{"location":"getting-started/installation/#using-pip","title":"Using pip","text":"<pre><code>pip install glassalpha\n</code></pre>"},{"location":"getting-started/installation/#using-conda","title":"Using conda","text":"<pre><code>conda install -c conda-forge glassalpha\n</code></pre>"},{"location":"getting-started/installation/#development-installation","title":"Development Installation","text":"<p>For contributors or those who need the latest development version:</p> <pre><code># Clone the repository\ngit clone https://github.com/GlassAlpha/glassalpha\ncd glassalpha\n\n# Create virtual environment\npython -m venv .venv\nsource .venv/bin/activate  # On Windows: .venv\\Scripts\\activate\n\n# Install in development mode\npip install -e packages/[dev]\n</code></pre>"},{"location":"getting-started/installation/#optional-dependencies","title":"Optional Dependencies","text":"<p>Glass Alpha has optional dependencies for specific features:</p>"},{"location":"getting-started/installation/#visualization","title":"Visualization","text":"<pre><code>pip install glassalpha[viz]\n</code></pre>"},{"location":"getting-started/installation/#deep-learning-support-future","title":"Deep Learning Support (Future)","text":"<pre><code>pip install glassalpha[deep]\n</code></pre>"},{"location":"getting-started/installation/#all-optional-dependencies","title":"All Optional Dependencies","text":"<pre><code>pip install glassalpha[all]\n</code></pre>"},{"location":"getting-started/installation/#verifying-installation","title":"Verifying Installation","text":"<p>After installation, verify everything is working:</p> <pre><code>import glassalpha\nprint(glassalpha.__version__)\n\n# Run basic smoke test\nfrom glassalpha import Explainer\nprint(\"Glass Alpha successfully installed!\")\n</code></pre>"},{"location":"getting-started/installation/#platform-specific-notes","title":"Platform-Specific Notes","text":""},{"location":"getting-started/installation/#macos","title":"macOS","text":"<ul> <li>Requires macOS 11+ for M1/M2 chips</li> <li>XGBoost may require additional setup for GPU support</li> </ul>"},{"location":"getting-started/installation/#linux","title":"Linux","text":"<ul> <li>Tested on Ubuntu 20.04+ and RHEL 8+</li> <li>May require additional system libraries for visualization</li> </ul>"},{"location":"getting-started/installation/#windows","title":"Windows","text":"<ul> <li>Fully supported on Windows 10/11</li> <li>Use Anaconda for easiest setup</li> </ul>"},{"location":"getting-started/installation/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting-started/installation/#common-issues","title":"Common Issues","text":"<p>ImportError: No module named 'glassalpha' - Ensure you've activated your virtual environment - Check pip list to verify installation</p> <p>Version conflicts <pre><code>pip install --upgrade glassalpha\npip install --upgrade --force-reinstall glassalpha\n</code></pre></p> <p>Permission errors <pre><code>pip install --user glassalpha\n</code></pre></p>"},{"location":"getting-started/installation/#next-steps","title":"Next Steps","text":"<ul> <li>Quick Start Guide</li> <li>Example Notebooks</li> <li>API Reference</li> </ul>"},{"location":"getting-started/quickstart/","title":"Quick Start Guide","text":"<p>Get up and running with Glass Alpha in under 5 minutes.</p>"},{"location":"getting-started/quickstart/#the-60-second-hello-world","title":"The 60-Second Hello World","text":"<pre><code># 1. Import Glass Alpha\nfrom glassalpha import explain, audit\nimport pandas as pd\nfrom sklearn.datasets import make_classification\nfrom sklearn.model_selection import train_test_split\nimport xgboost as xgb\n\n# 2. Create sample data\nX, y = make_classification(n_samples=1000, n_features=20, n_informative=15)\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)\n\n# 3. Train a model\nmodel = xgb.XGBClassifier(random_state=42)\nmodel.fit(X_train, y_train)\n\n# 4. Generate explanations\nexplanations = explain(model, X_test)\nprint(f\"Top feature: {explanations.feature_importance[0]}\")\n\n# 5. Create audit report\nreport = audit(model, X_test, y_test, output=\"my_first_audit.pdf\")\nprint(\"\u2705 Audit report generated!\")\n</code></pre>"},{"location":"getting-started/quickstart/#core-concepts","title":"Core Concepts","text":""},{"location":"getting-started/quickstart/#explainability","title":"Explainability","text":"<p>Glass Alpha uses TreeSHAP for efficient and accurate explanations:</p> <pre><code>from glassalpha import Explainer\n\n# Initialize explainer\nexplainer = Explainer(model, X_train)\n\n# Get SHAP values\nshap_values = explainer.explain(X_test)\n\n# Visualize\nexplainer.plot_summary()  # Feature importance summary\nexplainer.plot_waterfall(X_test[0])  # Individual explanation\n</code></pre>"},{"location":"getting-started/quickstart/#fairness-analysis","title":"Fairness Analysis","text":"<p>Detect and measure bias across protected attributes:</p> <pre><code>from glassalpha import FairnessAnalyzer\n\n# Define protected attributes\nanalyzer = FairnessAnalyzer(\n    protected_attributes=['gender', 'race']\n)\n\n# Run analysis\nresults = analyzer.analyze(model, X_test, y_test)\n\n# Check metrics\nprint(f\"Disparate Impact: {results.disparate_impact}\")\nprint(f\"Equal Opportunity Difference: {results.equal_opportunity_diff}\")\n</code></pre>"},{"location":"getting-started/quickstart/#counterfactual-explanations","title":"Counterfactual Explanations","text":"<p>Find minimal changes needed to flip predictions:</p> <pre><code>from glassalpha import CounterfactualExplainer\n\n# Initialize with constraints\ncf_explainer = CounterfactualExplainer(\n    model,\n    immutable_features=['age', 'gender'],\n    feature_ranges={'income': (20000, 200000)}\n)\n\n# Generate counterfactual\ncounterfactual = cf_explainer.explain(\n    X_test[0], \n    desired_outcome=1\n)\n\nprint(f\"Changes needed: {counterfactual.changes}\")\n</code></pre>"},{"location":"getting-started/quickstart/#audit-reports","title":"Audit Reports","text":"<p>Generate comprehensive, reproducible audit reports:</p> <pre><code>from glassalpha import AuditReport\n\n# Configure report\nconfig = {\n    'include_shap': True,\n    'include_fairness': True,\n    'include_drift': False,\n    'confidence_level': 0.95\n}\n\n# Generate report\nreport = AuditReport(model, config=config)\nreport.fit(X_train, y_train)\nreport.generate(X_test, y_test, output=\"audit_report.pdf\")\n\n# Access programmatically\nmetrics = report.get_metrics()\nprint(f\"Model accuracy: {metrics['accuracy']}\")\n</code></pre>"},{"location":"getting-started/quickstart/#real-world-example-credit-scoring","title":"Real-World Example: Credit Scoring","text":"<pre><code>import pandas as pd\nfrom glassalpha import GlassAlpha\n\n# Load data\ndata = pd.read_csv(\"german_credit.csv\")\nX = data.drop(['default'], axis=1)\ny = data['default']\n\n# Initialize Glass Alpha with policy\nglass = GlassAlpha(\n    config=\"configs/policy/lending.yaml\",\n    random_seed=42\n)\n\n# Train model with Glass Alpha wrapper\nmodel = glass.train(X_train, y_train, algorithm='xgboost')\n\n# Full compliance workflow\nresults = glass.analyze(model, X_test, y_test)\n\n# Check compliance\nif results.is_compliant:\n    print(\"\u2705 Model passes all compliance checks\")\n    glass.deploy(model, \"production/model.pkl\")\nelse:\n    print(\"\u274c Compliance issues found:\")\n    print(results.violations)\n</code></pre>"},{"location":"getting-started/quickstart/#configuration-with-yaml","title":"Configuration with YAML","text":"<p>Glass Alpha supports configuration-driven workflows:</p> <pre><code># config.yaml\nmodel:\n  type: xgboost\n  params:\n    max_depth: 5\n    learning_rate: 0.1\n\nexplainability:\n  method: treeshap\n  background_samples: 100\n\nfairness:\n  protected_attributes:\n    - gender\n    - race\n  metrics:\n    - disparate_impact\n    - equal_opportunity\n  thresholds:\n    disparate_impact: 0.8\n\naudit:\n  output_format: pdf\n  include_sections:\n    - executive_summary\n    - model_performance\n    - fairness_analysis\n    - explainability\n  reproducibility:\n    save_manifest: true\n    track_seeds: true\n</code></pre> <p>Load and use configuration:</p> <pre><code>from glassalpha import GlassAlpha\n\nglass = GlassAlpha.from_config(\"config.yaml\")\nresults = glass.run_full_pipeline(X, y)\n</code></pre>"},{"location":"getting-started/quickstart/#best-practices","title":"Best Practices","text":""},{"location":"getting-started/quickstart/#1-always-set-seeds","title":"1. Always Set Seeds","text":"<pre><code>from glassalpha.utils import set_global_seed\n\nset_global_seed(42)  # Ensures reproducibility\n</code></pre>"},{"location":"getting-started/quickstart/#2-use-immutable-manifests","title":"2. Use Immutable Manifests","text":"<pre><code>report = AuditReport(track_manifest=True)\n# Automatically saves: config hash, data hash, git commit, seeds\n</code></pre>"},{"location":"getting-started/quickstart/#3-define-policies-upfront","title":"3. Define Policies Upfront","text":"<pre><code>from glassalpha import Policy\n\npolicy = Policy(\n    immutable_features=['ssn', 'date_of_birth'],\n    monotonic_constraints={'age': 'positive'},\n    acceptable_ranges={'income': (0, 1000000)}\n)\n\nglass = GlassAlpha(policy=policy)\n</code></pre>"},{"location":"getting-started/quickstart/#whats-next","title":"What's Next?","text":"<ul> <li>\ud83d\udcca Explore Example Notebooks</li> <li>\ud83d\udd27 Deep Dive into API</li> <li>\ud83c\udfaf Advanced Features</li> <li>\ud83d\udca1 Real-world Use Cases</li> </ul>"}]}